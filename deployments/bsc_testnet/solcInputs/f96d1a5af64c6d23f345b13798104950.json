{
  "language": "Solidity",
  "sources": {
    "contracts/GoldenTreePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * Golden Tree Pool Contract (SMTC-BUSD pool)\r\n * @author Liu\r\n */\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\n\r\nimport \"./interfaces/IUniswapRouter.sol\";\r\nimport \"./interfaces/ISmartTokenCash.sol\";\r\nimport \"./interfaces/ISmartComp.sol\";\r\nimport \"./interfaces/IGoldenTreePool.sol\";\r\nimport \"./interfaces/ISmartAchievement.sol\";\r\nimport \"./interfaces/ISmartLadder.sol\";\r\n\r\n\r\ncontract GoldenTreePool is UUPSUpgradeable, OwnableUpgradeable, IGoldenTreePool {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  /// @dev Token Addresses\r\n  ISmartTokenCash public smtcToken;\r\n\r\n  ISmartComp public comptroller;\r\n\r\n\r\n  bool public swapEnabled;\r\n  uint256 public limitPerSwap;\r\n\r\n  /// @dev Total BUSD rewards\r\n  uint256 public totalRevenue;\r\n\r\n  /// @dev Total Swapped BUSD\r\n  uint256 public totalSwapped;\r\n\r\n  /// @dev Total Burned SMTC\r\n  uint256 public totalBurned;\r\n\r\n  /// @dev Growth Balance Mapping\r\n  /// user address => Growth Balance\r\n  mapping(address => uint256) public growthBalances;\r\n\r\n  /// @dev Growth Balance share percentage\r\n  uint16[8] public growthShare;\r\n\r\n  EnumerableSet.AddressSet private _rewardsDistributors;\r\n\r\n  // events \r\n  event RewardAdded(uint256 amount, address account);\r\n  event RewardSwapped(uint256 smtAmount, uint256 busdAmount);\r\n  event Growth(uint256 amount, address account);\r\n  event ReferralGrowth(uint256 amount, address account, address referral, uint level);\r\n\r\n  function initialize(address _comp, address _smtcToken) public initializer {\r\n\t\t__Ownable_init();\r\n\r\n    comptroller = ISmartComp(_comp);\r\n    smtcToken = ISmartTokenCash(_smtcToken);\r\n\r\n    swapEnabled = true;\r\n    limitPerSwap = 1000 * 1e18;\r\n    \r\n    growthShare = [6500, 500, 500, 500, 500, 500, 500, 500];\r\n\r\n    _rewardsDistributors.add(address(this));\r\n    _rewardsDistributors.add(msg.sender);\r\n  }\r\n\r\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\r\n\r\n\r\n  /**\r\n    * @notice Sets a new comptroller\r\n    * @dev Admin function to set a new comptroller\r\n    */\r\n  function setComptroller(ISmartComp newComptroller) public onlyOwner {\r\n    // Ensure invoke comptroller.isComptroller() returns true\r\n    require(newComptroller.isComptroller(), \"marker method returned false\");\r\n\r\n    // Set comptroller to newComptroller\r\n    comptroller = newComptroller;\r\n  }\r\n  \r\n\r\n  /**\r\n   * @dev Add rewards distributor\r\n   * @param _address Address of Reward Distributor\r\n   */\r\n  function addDistributor(address _address) external onlyOwner {\r\n    _rewardsDistributors.add(_address);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Remove rewards distributor\r\n   * @param _address Address of Reward Distributor\r\n   */\r\n  function removeDistributor(address _address) external onlyOwner {\r\n    _rewardsDistributors.remove(_address);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Set Enable or Disable swap and distribute\r\n   * @param _enabled boolean\r\n   */\r\n  function setSwapEnabled(bool _enabled) external onlyOwner {\r\n    swapEnabled = _enabled;\r\n  }\r\n\r\n  /**\r\n   * @dev max limitation of smt amount to swap per once\r\n   * @param _amount amount\r\n   */\r\n  function setLimitPerSwap(uint256 _amount) external onlyOwner {\r\n    limitPerSwap = _amount;\r\n  }\r\n\r\n  \r\n  /**\r\n   * Update Growth token distribution percent\r\n   */\r\n  function updateGrowthShare(\r\n    uint16[8] memory _share\r\n  ) \r\n    public \r\n    onlyOwner \r\n  {\r\n    uint16 _sumPercent = 0;\r\n    for(uint i = 0; i < 8; i++) {\r\n      _sumPercent = _sumPercent + _share[i];\r\n    }\r\n    require(_sumPercent == 10_000, \"GoldenTreePool#updateGrowthShare: invalid share\");\r\n\r\n    growthShare = _share;\r\n  }\r\n\r\n  /**\r\n   * Sell SMTC token with threshold price\r\n   * Received SMTC token will be burnned\r\n   * \r\n   */\r\n  function sellSmtc(uint256 amount) external {\r\n    require(amount > 0, \"GoldenTreePool#buySmtc: Invalid zero amount\");\r\n    \r\n    IERC20 busdToken = comptroller.getBUSD();\r\n    uint256 smtcBalance = smtcToken.balanceOf(address(this));\r\n    uint256 busdBalance = busdToken.balanceOf(address(this));\r\n    require(amount <= smtcBalance, \"GoldenTreePool#buySmtc: insufficient SMTC balance\");\r\n    require(busdBalance > 0, \"GoldenTreePool#buySmtc: insufficient BUSD balance\");\r\n\r\n    SafeERC20.safeTransferFrom(smtcToken, msg.sender, address(this), amount);\r\n    smtcToken.burn(amount);\r\n\r\n    uint256 busdAmount = amount.mul(thresholdPrice()).div(1e18);\r\n    SafeERC20.safeTransfer(busdToken, msg.sender, busdAmount);\r\n\r\n    totalSwapped = totalSwapped.add(busdAmount);\r\n  }\r\n\r\n  /**\r\n   * Swap SMT token to BUSD\r\n   * This function should be called from anyone\r\n   */\r\n  function swapDistribute() public override {\r\n    IERC20 busdToken = comptroller.getBUSD();\r\n    IERC20 smtToken = comptroller.getSMT();\r\n\r\n    uint256 smtBalance = smtToken.balanceOf(address(this));\r\n    require(smtBalance > 0, \"GoldenTreePool#swapDistribute: insufficient SMT balance\");\r\n\r\n    if(!swapEnabled || smtBalance <= limitPerSwap) {\r\n      return;\r\n    }\r\n\r\n    address[] memory busdpath = new address[](2);\r\n    busdpath[0] = address(smtToken);\r\n    busdpath[1] = address(busdToken);\r\n\r\n    IUniswapV2Router02 _uniswapV2Router = comptroller.getUniswapV2Router();\r\n\r\n    smtToken.safeApprove(address(_uniswapV2Router), smtBalance);\r\n\r\n    uint256 beforeBalance = busdToken.balanceOf(address(this));\r\n    _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        smtBalance,\r\n        0,\r\n        busdpath,\r\n        address(this),\r\n        block.timestamp + 3600\r\n    );\r\n    uint256 amount = busdToken.balanceOf(address(this)).sub(beforeBalance);  \r\n\r\n    totalRevenue = totalRevenue.add(amount);\r\n\r\n    emit RewardSwapped(smtBalance, amount);\r\n  }\r\n\r\n\r\n  /**\r\n   * notify rewards to golden tree pool from smt token\r\n   * This function should be called after transfer BUSD to this pool or\r\n   * Swapped.\r\n   */\r\n  function notifyReward(uint256 amount, address account) \r\n    public \r\n    override \r\n    onlyRewardsDistributor \r\n  {\r\n    if(amount == 0) {\r\n      return;\r\n    }\r\n\r\n    IERC20 busdToken = comptroller.getBUSD();\r\n    IERC20 smtToken = comptroller.getSMT();\r\n\r\n    address[] memory busdpath = new address[](2);\r\n    busdpath[0] = address(smtToken);\r\n    busdpath[1] = address(busdToken);\r\n\r\n    IUniswapV2Router02 _uniswapV2Router = comptroller.getUniswapV2Router();\r\n\r\n    uint256 busdAmount = _uniswapV2Router.getAmountsOut(amount, busdpath)[1];\r\n\r\n    // Add growth balance for from account\r\n    // distribute growth token to referral\r\n    address ref = account;\r\n    ISmartLadder smartLadder = comptroller.getSmartLadder();\r\n    ISmartArmy smartArmy = comptroller.getSmartArmy();\r\n\r\n    for(uint i = 0 ; i < growthShare.length; i++) {\r\n      uint16 percent = growthShare[i];\r\n      if(percent > 0 && ref != address(0x0)) {\r\n        uint256 shareAmount = busdAmount.mul(percent).div(10_000);\r\n      \r\n        if(i == 0) {\r\n          growthBalances[ref] = growthBalances[ref].add(shareAmount);\r\n          emit Growth(shareAmount, ref);\r\n\r\n        } else {\r\n          uint256 ladderLevel = smartArmy.licenseLevelOf(ref);\r\n\r\n          if(ladderLevel >= i) {\r\n            growthBalances[ref] = growthBalances[ref].add(shareAmount);\r\n            emit ReferralGrowth(shareAmount, ref, account, i);\r\n          }\r\n        }\r\n      } \r\n      ref = smartLadder.sponsorOf(ref);\r\n    }\r\n   \r\n    emit RewardAdded(amount, account);\r\n  }\r\n\r\n  /**\r\n   * Increase Growth Token\r\n   */\r\n  function increaseGrowth(address account, uint256 amount) internal {\r\n    uint256 old = growthBalances[account];\r\n    uint256 newBalance = old.add(amount);\r\n\r\n    growthBalances[account] = newBalance;\r\n    \r\n    ISmartAchievement ach = comptroller.getSmartAchievement();\r\n    ach.notifyGrowth(account, old, newBalance);\r\n  }\r\n  \r\n\r\n  /**\r\n   * Get Total Supply of SMTC token\r\n   */\r\n  function smtcTotalSupply() public view returns(uint256) {\r\n    return smtcToken.totalSupply();\r\n  } \r\n\r\n  /**\r\n   * Get Threshold Price \r\n   * (Stored BUSD balance) / (SMTC total supply) * 1e18\r\n   */\r\n  function thresholdPrice() public view returns(uint256) {\r\n    return comptroller.getBUSD().balanceOf(address(this)).mul(1e18).div(smtcTotalSupply());\r\n  }\r\n\r\n  /**\r\n   * Get Groth Point\r\n   * (Growth balance) / (1000 BUSD)\r\n   */\r\n  function growthPoint(address account) public view returns(uint256) {\r\n    return growthBalances[account].div(1000);\r\n  }\r\n\r\n\r\n  modifier onlyRewardsDistributor() {\r\n    require(_rewardsDistributors.contains(msg.sender) \r\n      || msg.sender == (address)(comptroller.getSMT())\r\n      || msg.sender == (address)(comptroller.getSmartFarm())  , \"GoldenTreePool: only reward distributors\");\r\n    _;\r\n  }\r\n} "
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal initializer {\n        __ERC1967Upgrade_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal initializer {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/interfaces/IUniswapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"
    },
    "contracts/interfaces/ISmartTokenCash.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface ISmartTokenCash is IERC20 {\r\n    function burn(uint256 amount) external; \r\n}\r\n"
    },
    "contracts/interfaces/ISmartComp.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nimport './ISmartArmy.sol';\r\nimport './ISmartLadder.sol';\r\nimport './ISmartFarm.sol';\r\nimport './IGoldenTreePool.sol';\r\nimport './ISmartAchievement.sol';\r\nimport './IUniswapRouter.sol';\r\n\r\n// Smart Comptroller Interface\r\ninterface ISmartComp {\r\n    function isComptroller() external pure returns(bool);\r\n    function getSMT() external view returns(IERC20);\r\n    function getBUSD() external view returns(IERC20);\r\n    function getWBNB() external view returns(IERC20);\r\n\r\n    function getUniswapV2Router() external view returns(IUniswapV2Router02);\r\n\r\n    function getUniswapV2Factory() external view returns(address);\r\n\r\n    function getSmartArmy() external view returns(ISmartArmy);\r\n\r\n    function getSmartLadder() external view returns(ISmartLadder);\r\n\r\n    function getSmartFarm() external view returns(ISmartFarm);\r\n\r\n    function getGoldenTreePool() external view returns(IGoldenTreePool);\r\n\r\n    function getSmartAchievement() external view returns(ISmartAchievement);\r\n}\r\n"
    },
    "contracts/interfaces/IGoldenTreePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IGoldenTreePool {\r\n    function swapDistribute() external;\r\n    function notifyReward(uint256 amount, address account) external;\r\n}\r\n"
    },
    "contracts/interfaces/ISmartAchievement.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface ISmartAchievement {\r\n\r\n    struct NobilityType {\r\n        string            title;               // Title of Nobility Folks Baron Count Viscount Earl Duke Prince King\r\n        uint256           growthRequried;      // Required growth token\r\n        uint256           passiveShare;        // Passive share percent\r\n\r\n        uint256[]         chestSMTRewards;\r\n        uint256[]         chestSMTCRewards;\r\n    }\r\n\r\n\r\n    function notifyGrowth(address account, uint256 oldGrowth, uint256 newGrowth) external returns(bool);\r\n    function claimReward() external;\r\n    function claimChestReward() external;\r\n    function swapDistribute() external;\r\n    \r\n    function isUpgradeable(uint256 from, uint256 to) external view returns(bool, uint256);\r\n    function nobilityOf(address account) external view returns(NobilityType memory);\r\n    function nobilityTitleOf(address account) external view returns(string memory);\r\n}\r\n"
    },
    "contracts/interfaces/ISmartLadder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface ISmartLadder {\r\n    /// @dev Ladder system activities\r\n    struct Activity {\r\n        string      name;         // buytax, farming, ...\r\n        uint16[7]   share;        // share percentage\r\n        address     token;        // share token address\r\n        bool        enabled;      // enabled or disabled temporally\r\n        bool        isValid;\r\n        uint256     totalDistributed; // total distributed\r\n    }\r\n    \r\n    function registerSponsor(address _user, address _sponsor) external;\r\n    function distributeTax(uint256 id, address account) external; \r\n    function distributeBuyTax(address account) external; \r\n    function distributeFarmingTax(address account) external; \r\n    function distributeSmartLivingTax(address account) external; \r\n    function distributeEcosystemTax(address account) external; \r\n    \r\n    function activity(uint256 id) external view returns(Activity memory);\r\n    function sponsorOf(address account) external view returns(address);\r\n    function sponsorsOf(address account, uint count) external returns (address[] memory); \r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal initializer {\n        __ERC1967Upgrade_init_unchained();\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal initializer {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            _functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ISmartArmy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface ISmartArmy {\r\n    /// @dev License Types\r\n    struct LicenseType {\r\n        uint256  level;        // level\r\n        string   name;         // Trial, Opportunist, Runner, Visionary\r\n        uint256  price;        // 100, 1000, 5000, 10,000\r\n        uint256  ladderLevel;  // Level of referral system with this license\r\n        uint256  duration;     // default 6 months\r\n        bool     isValid;\r\n    }\r\n\r\n    enum LicenseStatus {\r\n        None,\r\n        Pending,\r\n        Active,\r\n        Expired\r\n    }\r\n\r\n    /// @dev User information on license\r\n    struct UserLicense {\r\n        address owner;\r\n        uint256 level;\r\n        uint256 startAt;\r\n        uint256 activeAt;\r\n        uint256 expireAt;\r\n        uint256 lpLocked;\r\n\r\n        LicenseStatus status;\r\n    }\r\n\r\n    /// @dev User Personal Information\r\n    struct UserPersonal {\r\n        address sponsor;\r\n        string username;\r\n        string telegram;\r\n    }\r\n\r\n    /// @dev Fee Info \r\n    struct FeeInfo {\r\n        uint256 penaltyFeePercent;      // liquidate License LP fee percent\r\n        uint256 extendFeeBNB;       // extend Fee as BNB\r\n        address feeAddress;\r\n    }\r\n    \r\n    function licenseOf(address account) external view returns(UserLicense memory);\r\n    function lockedLPOf(address account) external view returns(uint256);\r\n    function isActiveLicense(address account) external view returns(bool);\r\n    function isEnabledIntermediary(address account) external view returns(bool);\r\n    function licenseLevelOf(address account) external view returns(uint256);\r\n    function licenseActiveDuration(address account, uint256 from, uint256 to) external view returns(uint256, uint256);\r\n}\r\n"
    },
    "contracts/interfaces/ISmartFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface ISmartFarm {\r\n    /// @dev Pool Information\r\n    struct PoolInfo {\r\n        address stakingTokenAddress;     // staking contract address\r\n        address rewardTokenAddress;      // reward token contract\r\n\r\n        uint256 rewardPerDay;            // reward percent per day\r\n\r\n        uint unstakingFee;\r\n            \r\n        uint256 totalStaked;             /* How many tokens we have successfully staked */\r\n    }\r\n\r\n\r\n    struct UserInfo {\r\n        uint256 balance;\r\n        uint256 rewards;\r\n        uint256 rewardPerTokenPaid;     // User rewards per token paid for passive\r\n        uint256 lastUpdated;\r\n    }\r\n    \r\n    function stakeSMT(address account, uint256 amount) external returns(uint256);\r\n    function withdrawSMT(address account, uint256 amount) external returns(uint256);\r\n    function claimReward() external;\r\n\r\n    function notifyRewardAmount(uint _reward) external;\r\n}\r\n"
    },
    "contracts/SmartToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * Smart Token\r\n * @author Liu\r\n */\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\nimport '@openzeppelin/contracts/utils/Context.sol';\r\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\r\nimport './libs/IBEP20.sol';\r\nimport './interfaces/IWETH.sol';\r\nimport './interfaces/IUniswapRouter.sol';\r\nimport './interfaces/IUniswapFactory.sol';\r\nimport './interfaces/IUniswapPair.sol';\r\nimport './interfaces/IGoldenTreePool.sol';\r\nimport './interfaces/ISmartArmy.sol';\r\nimport './interfaces/ISmartLadder.sol';\r\nimport './interfaces/ISmartFarm.sol';\r\nimport './interfaces/ISmartAchievement.sol';\r\n\r\n\r\ncontract SmartToken is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    address public immutable BUSD_ADDRESS;\r\n    address public immutable _uniswapV2ETHPair;\r\n    address public immutable _uniswapV2BUSDPair;\r\n    IUniswapV2Router02 public immutable _uniswapV2Router;\r\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\n    address public _operator; \r\n    address public _smartArmy;\r\n    \r\n    // tax addresses\r\n    address public _referralAddress;\r\n    address public _goldenTreePoolAddress;\r\n    address public _devAddress;\r\n    address public _achievementSystemAddress;\r\n    address public _farmingRewardAddress;\r\n    address public _intermediaryAddress;\r\n\r\n    // tax information\r\n    uint256 public _buyTaxFee = 15; // 15% \r\n    uint256 public _sellTaxFee = 15; // 15%\r\n    uint256 public _transferTaxFee = 15; // 15%\r\n\r\n    uint256[] public _sellTaxTierDays = [10, 10, 10, 10];\r\n    uint256[] public _sellTaxTiers    = [30, 25, 20, 15];\r\n    uint256 private _start_timestamp = block.timestamp;\r\n\r\n    uint256 public BUY_REFERRAL_FEE = 50; \r\n    uint256 public BUY_GOLDEN_TREE_POOL_FEE = 30;\r\n    uint256 public BUY_DEV_FEE = 10;\r\n    uint256 public BUY_ARCHIVEMENT_FEE = 10;\r\n\r\n    uint256 public SELL_DEV_FEE = 10;\r\n    uint256 public SELL_GOLDEN_TREE_POOL_FEE = 30;\r\n    uint256 public SELL_FARMING_FEE = 20;\r\n    uint256 public SELL_BURN_FEE = 30;\r\n    uint256 public SELL_ARCHIVEMENT_FEE = 10;\r\n\r\n    uint256 public TRANSFER_DEV_FEE = 10;\r\n    uint256 public TRANFER_ARCHIVEMENT_FEE = 10;\r\n    uint256 public TRANSFER_GOLDEN_TREE_POOL_FEE = 50;\r\n    uint256 public TRANSFER_FARMING_FEE = 30;\r\n\r\n    uint256 public _numTokensSwap = 0; //50000e18;\r\n\r\n    bool _inSwapEnabled;\r\n    bool public _swapEnabled;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public _excludedFromFee;\r\n\r\n    event SwapEnabledUpdate(bool enabled);\r\n    event TaxAddressesUpdated(address referral, address goldenTree, address dev, address achievement, address farming);\r\n\r\n\r\n\r\n    modifier onlyOperator() {\r\n        require(_operator == msg.sender || msg.sender == owner(), \"SMT: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    modifier lockTheSwap {\r\n        _inSwapEnabled = true;\r\n        _;\r\n        _inSwapEnabled = false;\r\n    }    \r\n\r\n    /**\r\n     * @dev Sets the values for BUSD_ADDRESS, {totalSupply} and tax addresses\r\n     *\r\n     */\r\n    constructor(\r\n        address busd, \r\n        uint256 mintSupply, \r\n        address referral, \r\n        address goldenTree, \r\n        address dev, \r\n        address achievement, \r\n        address farming,\r\n        address intermediary,\r\n        address smartArmy) \r\n    {\r\n        _name = \"Smart Token\";\r\n        _symbol = \"SMT\";\r\n        _decimals = 18;\r\n\r\n\r\n        BUSD_ADDRESS = busd;\r\n        _operator = msg.sender;\r\n        _referralAddress = referral;\r\n        _goldenTreePoolAddress = goldenTree;\r\n        _devAddress = dev;\r\n        _achievementSystemAddress = achievement;\r\n        _farmingRewardAddress = farming;\r\n        _intermediaryAddress = intermediary;\r\n\r\n        _smartArmy = smartArmy;\r\n\r\n        // Pancake V2 router\r\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); \r\n\r\n        _uniswapV2Router = uniswapRouter;\r\n\r\n        // Create a pair with ETH\r\n        _uniswapV2ETHPair = IUniswapV2Factory(uniswapRouter.factory())\r\n            .createPair(address(this), uniswapRouter.WETH());\r\n\r\n        // Create a pair with BUSD\r\n        _uniswapV2BUSDPair = IUniswapV2Factory(uniswapRouter.factory())\r\n            .createPair(address(this), busd);\r\n\r\n        _excludedFromFee[msg.sender] = true;\r\n        _excludedFromFee[address(this)] = true;\r\n        _excludedFromFee[BURN_ADDRESS] = true;\r\n        _excludedFromFee[_referralAddress] = true;\r\n        _excludedFromFee[_goldenTreePoolAddress] = true;\r\n        _excludedFromFee[_devAddress] = true;\r\n        _excludedFromFee[_achievementSystemAddress] = true;\r\n        _excludedFromFee[_farmingRewardAddress] = true;\r\n        _excludedFromFee[_smartArmy] = true;\r\n\r\n        _mint(msg.sender, mintSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external override view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the number of decimals used to get its user representation.\r\n    */\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom (address sender, address recipient, uint256 amount) public override virtual returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(amount, 'SMT: transfer amount exceeds allowance')\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, 'SMT: decreased allowance below zero'));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer (address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), 'SMT: transfer from the zero address');\r\n        require(recipient != address(0), 'SMT: transfer to the zero address');\r\n        _balances[sender] = _balances[sender].sub(amount, 'SMT: transfer amount exceeds balance');\r\n\r\n        if (_excludedFromFee[sender] || _excludedFromFee[recipient]) {\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        } else {\r\n            bool toPair = recipient == _uniswapV2ETHPair || recipient == _uniswapV2BUSDPair;\r\n            bool fromPair = sender == _uniswapV2ETHPair || sender == _uniswapV2BUSDPair;\r\n            \r\n            if(sender == _intermediaryAddress && toPair) {\r\n                // Intermediary => Pair: No Fee\r\n\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n            } \r\n            else if(fromPair && recipient == _intermediaryAddress) {\r\n                // Pair => Intermediary: No Fee\r\n\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n            }\r\n            else if(sender == _intermediaryAddress || recipient == _intermediaryAddress) {\r\n                if (recipient == _intermediaryAddress) {\r\n                    require(enabledIntermediary(sender), \"SMT: no smart army account\");\r\n                    // sell transfer via intermediary: sell tax reduce 30%\r\n                    uint256 sellTaxPercent = _getCurrentSellTax().mul(700).div(1000);\r\n                    uint256 taxAmount1 = amount.mul(sellTaxPercent).div(100);\r\n                    uint256 recvAmount1 = amount.sub(taxAmount1);\r\n                    \r\n                    distributeSellTax(taxAmount1, sender);\r\n                    \r\n                    _balances[recipient] = _balances[recipient].add(recvAmount1);\r\n\r\n                }\r\n                else {\r\n                    require(enabledIntermediary(recipient), \"SMT: no smart army account\");\r\n                    // buy transfer via intermediary: buy tax reduce 30%\r\n                    uint256 taxAmount2 = amount.mul(_buyTaxFee.mul(700).div(1000)).div(100);\r\n                    uint256 recvAmount2 = amount.sub(taxAmount2);\r\n                    \r\n                    distributeBuyTax(taxAmount2, recipient);\r\n                    \r\n                    _balances[recipient] = _balances[recipient].add(recvAmount2);\r\n                    \r\n                } \r\n            }\r\n            else if (fromPair) {\r\n                // buy transfer\r\n                uint256 taxAmount3 = amount.mul(_buyTaxFee).div(100);\r\n                uint256 recvAmount3 = amount.sub(taxAmount3);\r\n                \r\n                distributeBuyTax(taxAmount3, recipient);\r\n\r\n                _balances[recipient] = _balances[recipient].add(recvAmount3);\r\n            } else if (toPair) {\r\n                // sell transfer                \r\n                uint256 taxAmount4 = amount.mul(_getCurrentSellTax()).div(100);\r\n                uint256 recvAmount4 = amount.sub(taxAmount4);\r\n                \r\n                distributeSellTax(taxAmount4, sender);\r\n\r\n                // !!! should be called after distribute!\r\n                _balances[recipient] = _balances[recipient].add(recvAmount4);\r\n            } else {\r\n                // normal transfer\r\n                uint256 taxAmount5 = amount.mul(_transferTaxFee).div(100);\r\n                uint256 recvAmount5 = amount.sub(taxAmount5);\r\n                \r\n                distributeTransferTax(taxAmount5, sender);\r\n                \r\n                _balances[recipient] = _balances[recipient].add(recvAmount5);     \r\n            }\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Distributes sell tax tokens to tax addresses\r\n     */\r\n    function distributeSellTax (uint256 amount, address account) internal {\r\n\r\n        uint256 devAmount = amount.mul(SELL_DEV_FEE).div(100);\r\n        uint256 goldenTreeAmount = amount.mul(SELL_GOLDEN_TREE_POOL_FEE).div(100);\r\n        uint256 farmingAmount = amount.mul(SELL_FARMING_FEE).div(100);\r\n        uint256 burnAmount = amount.mul(SELL_BURN_FEE).div(100);\r\n        uint256 achievementAmount = amount.mul(SELL_ARCHIVEMENT_FEE).div(100);\r\n\r\n        _balances[_devAddress] = _balances[_devAddress].add(devAmount);\r\n        _balances[_farmingRewardAddress] = _balances[_farmingRewardAddress].add(farmingAmount);\r\n        _balances[BURN_ADDRESS] = _balances[BURN_ADDRESS].add(burnAmount);\r\n        _balances[_achievementSystemAddress] = _balances[_achievementSystemAddress].add(achievementAmount);\r\n        _balances[_goldenTreePoolAddress] = _balances[_goldenTreePoolAddress].add(goldenTreeAmount);\r\n        \r\n        distributeTaxToGoldenTreePool(account, goldenTreeAmount);\r\n\r\n        if(farmingAmount > 0) {\r\n            distributeSellTaxToFarming(farmingAmount);\r\n        }\r\n    } \r\n\r\n    /**\r\n     * @dev Distributes buy tax tokens to tax addresses\r\n     */\r\n    function distributeBuyTax(uint256 amount, address account) internal {\r\n\r\n        uint256 referralAmount = amount.mul(BUY_REFERRAL_FEE).div(100);\r\n        uint256 goldenTreeAmount = amount.mul(BUY_GOLDEN_TREE_POOL_FEE).div(100);\r\n        uint256 devAmount = amount.mul(BUY_DEV_FEE).div(100);\r\n        uint256 achievementAmount = amount.mul(BUY_ARCHIVEMENT_FEE).div(100);\r\n\r\n        _balances[_devAddress] = _balances[_devAddress].add(devAmount);\r\n        _balances[_referralAddress] = _balances[_referralAddress].add(referralAmount);\r\n        _balances[_achievementSystemAddress] = _balances[_achievementSystemAddress].add(achievementAmount);\r\n        _balances[_goldenTreePoolAddress] = _balances[_goldenTreePoolAddress].add(goldenTreeAmount);\r\n\r\n        distributeBuyTaxToLadder(account);\r\n        distributeTaxToGoldenTreePool(account, goldenTreeAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Distributes transfer tax tokens to tax addresses\r\n     */\r\n    function distributeTransferTax (uint256 amount, address account) internal {\r\n\r\n        uint256 devAmount = amount.mul(TRANSFER_DEV_FEE).div(100);\r\n        uint256 farmingAmount = amount.mul(TRANSFER_FARMING_FEE).div(100);\r\n        uint256 goldenTreeAmount = amount.mul(TRANSFER_GOLDEN_TREE_POOL_FEE).div(100);\r\n        uint256 achievementAmount = amount.mul(TRANFER_ARCHIVEMENT_FEE).div(100);\r\n\r\n        _balances[_devAddress] = _balances[_devAddress].add(devAmount);\r\n        _balances[_farmingRewardAddress] = _balances[_farmingRewardAddress].add(farmingAmount);\r\n        _balances[_achievementSystemAddress] = _balances[_achievementSystemAddress].add(achievementAmount);\r\n        _balances[_goldenTreePoolAddress] = _balances[_goldenTreePoolAddress].add(goldenTreeAmount);\r\n        \r\n        distributeTaxToGoldenTreePool(account, goldenTreeAmount);\r\n    } \r\n\r\n    /**\r\n     * @dev Distributes buy tax tokens to smart ladder system\r\n     */\r\n    function distributeBuyTaxToLadder (address from) internal {\r\n        ISmartLadder(_referralAddress).distributeBuyTax(from);\r\n    } \r\n\r\n    /**\r\n     * @dev Distributes sell tax tokens to farmming passive rewards pool\r\n     */\r\n    function distributeSellTaxToFarming (uint256 amount) internal {\r\n        ISmartFarm(_farmingRewardAddress).notifyRewardAmount(amount);\r\n    } \r\n\r\n    /**\r\n     * @dev Distribute tax to golden Tree pool as SMT and notify\r\n     */\r\n    function distributeTaxToGoldenTreePool (address account, uint256 amount) internal {\r\n        IGoldenTreePool(_goldenTreePoolAddress).notifyReward(amount, account);\r\n    }\r\n\r\n\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), 'SMT: mint to the zero address');\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), 'SMT: burn from the zero address');\r\n\r\n        _balances[account] = _balances[account].sub(amount, 'SMT: burn amount exceeds balance');\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve (address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), 'SMT: approve from the zero address');\r\n        require(spender != address(0), 'SMT: approve to the zero address');\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom (address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, 'SMT: burn amount exceeds allowance'));\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Returns the address is excluded from burn fee or not.\r\n     */\r\n    function isExcludedFromFee (address account) public view returns (bool) {\r\n        return _excludedFromFee[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Exclude the address from fee.\r\n     */\r\n    function excludeFromFee (address account) external onlyOperator {\r\n        _excludedFromFee[account] = true;\r\n    } \r\n\r\n    /**\r\n     * @dev Sets value for _swapEnabled with {enabled}.\r\n     */\r\n    function setSwapEnabled (bool enabled) external onlyOperator {\r\n        _swapEnabled = enabled;\r\n        emit SwapEnabledUpdate(enabled);\r\n    }      \r\n\r\n    /**\r\n     * @dev Sets value for _sellTaxFee with {sellTaxFee} in emergency status.\r\n     */\r\n    function setSellFee (uint256 sellTaxFee) external onlyOperator {\r\n        require(sellTaxFee < 100, 'SMT: sellTaxFee exceeds maximum value');\r\n        _sellTaxFee = sellTaxFee;\r\n    }    \r\n\r\n    /**\r\n     * @dev Sets value for _buyTaxFee with {buyTaxFee} in emergency status.\r\n     */\r\n    function setBuyFee (uint256 buyTaxFee) external onlyOperator {\r\n        require(buyTaxFee < 100, 'SMT: buyTaxFee exceeds maximum value');\r\n        _buyTaxFee = buyTaxFee;\r\n    }    \r\n\r\n    /**\r\n     * @dev Sets value for _transferTaxFee with {transferTaxFee} in emergency status.\r\n     */\r\n    function setTransferFee (uint256 transferTaxFee) external onlyOperator {\r\n        require(transferTaxFee < 100, 'SMT: transferTaxFee exceeds maximum value');\r\n        _transferTaxFee = transferTaxFee;\r\n    }  \r\n\r\n    /**\r\n     * @dev start Sell Tax tier system again \r\n     */\r\n    function resetStartTimestamp() external onlyOperator {\r\n        _start_timestamp = block.timestamp;\r\n    }   \r\n\r\n    /**\r\n     * @dev get current sellTax percent through sell tax tier system\r\n     */\r\n    function _getCurrentSellTax() public view returns (uint256) {\r\n        uint256 time_since_start = block.timestamp - _start_timestamp;\r\n        for(uint i = 0; i < _sellTaxTierDays.length; i++) {\r\n            if(time_since_start < _sellTaxTierDays[i] * 24 * 3600) {\r\n                return _sellTaxTiers[i];\r\n            }\r\n        }\r\n\r\n        return _sellTaxFee;\r\n    }   \r\n\r\n    /**\r\n     *  @dev Sets values for tax addresses \r\n     */\r\n    function setTaxAddresses (address referral, address goldenTree, address dev, address achievement, address farming, address intermediary) external onlyOperator {\r\n\r\n        if (_referralAddress != referral) {\r\n            _referralAddress = referral;\r\n            _excludedFromFee[referral] = true;\r\n        }\r\n        if (_goldenTreePoolAddress != goldenTree) {\r\n            _goldenTreePoolAddress = goldenTree;\r\n            _excludedFromFee[goldenTree] = true;\r\n        }\r\n        if (_devAddress != dev) {\r\n            _devAddress = dev;\r\n            _excludedFromFee[dev] = true;\r\n        }\r\n        if (_achievementSystemAddress != achievement) {\r\n            _achievementSystemAddress = achievement;\r\n            _excludedFromFee[achievement] = true;\r\n        }\r\n        if (_farmingRewardAddress != farming) {\r\n            _farmingRewardAddress = farming;\r\n            _excludedFromFee[farming] = true;\r\n        }\r\n        if (_intermediaryAddress != intermediary) {\r\n            _intermediaryAddress = intermediary;\r\n        }\r\n\r\n        emit TaxAddressesUpdated(referral, goldenTree, dev, achievement, farming);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets value for _numTokensSwap with {numTokensSwap}\r\n     */\r\n    function setNumTokensSwap (uint256 numTokensSwap) external onlyOperator {\r\n         require(numTokensSwap < _totalSupply, 'SMT: numTokensSwap exceeds total supply');\r\n         _numTokensSwap = numTokensSwap;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Sets value for _goldenTreePoolAddress\r\n     */\r\n    function setGoldenTreeAddress (address _address) external onlyOperator {\r\n        require(_address!= address(0x0), 'SMT: not allowed zero address');\r\n        _goldenTreePoolAddress = _address;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets value for _smartArmy\r\n     */\r\n    function setSmartArmyAddress (address _address) external onlyOperator {\r\n        require(_address!= address(0x0), 'SMT: not allowed zero address');\r\n        _smartArmy = _address;\r\n    }\r\n    \r\n    function enabledIntermediary (address account) public view returns (bool){\r\n        if(_smartArmy == address(0x0)) {\r\n            return false;\r\n        }\r\n\r\n        return ISmartArmy(_smartArmy).isEnabledIntermediary(account);\r\n    }\r\n\r\n\r\n     //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n}\r\n\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/libs/IBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}"
    },
    "contracts/interfaces/IUniswapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"
    },
    "contracts/interfaces/IUniswapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"
    },
    "contracts/SmartAchievement.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * Smart Passive Rewards Pool Contract\r\n * @author Liu\r\n */\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\n\r\n\r\nimport './libs/StableMath.sol';\r\nimport './libs/TransferHelper.sol';\r\n\r\nimport './interfaces/IUniswapRouter.sol';\r\nimport './interfaces/IWETH.sol';\r\nimport './interfaces/ISmartComp.sol';\r\nimport './interfaces/ISmartAchievement.sol';\r\n\r\ncontract SmartAchievement is UUPSUpgradeable, OwnableUpgradeable, ISmartAchievement {\r\n  using StableMath for uint256;\r\n  using SafeMath for uint256;\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  ISmartComp public comptroller;\r\n  address public smtcTokenAddress;\r\n\r\n  bool public swapEnabled;\r\n  uint256 public limitPerSwap;\r\n\r\n  uint256 public constant DURATION = 7 days;\r\n\r\n  // Timestamp for current period finish\r\n  uint256 public periodFinish;\r\n  // RewardRate for the rest of the PERIOD\r\n  uint256 public rewardRate;\r\n  // Last time any user took action\r\n  uint256 public lastUpdateTime;\r\n  // Ever increasing rewardPerToken rate, based on % of total supply\r\n  uint256 public rewardPerTokenStored;\r\n\r\n  mapping(address => uint256) public userRewardPerTokenPaid;\r\n  mapping(address => uint256) public rewards;\r\n  \r\n  mapping(address => uint256) public chestSMTRewards;\r\n  mapping(address => uint256) public chestSMTCRewards;\r\n  mapping(address => uint256) public checkRewardUpdated;\r\n  \r\n  uint256 private randNonce;\r\n\r\n  // Nobility Types mapping\r\n  mapping(uint256 => NobilityType) public nobilityTypes;\r\n  uint256 public totalNobilityTypes;\r\n  \r\n  uint256 public totalRewardShares;\r\n  \r\n  // Account => Nobility type\r\n  mapping(address => uint256) public userNobilities;\r\n  mapping(uint256 => uint256) public userNobilityCounts;\r\n\r\n\r\n  EnumerableSet.AddressSet private _rewardsDistributors;\r\n\r\n  event NobilityTypeUpdated(uint256 id, NobilityType _type);\r\n  event UserNobilityUpgraded(address indexed account, uint256 level);\r\n  event RewardAdded(uint256 reward);\r\n  event RewardPaid(address indexed user, uint256 reward);\r\n  event RewardSwapped(uint256 reward);\r\n\r\n\r\n  function initialize(address _comp, address _smtcToken) public initializer {\r\n\t\t__Ownable_init();\r\n    __SmartAchievement_init_unchained(_comp, _smtcToken);\r\n  }\r\n\r\n\r\n  function __SmartAchievement_init_unchained(address _comp, address _smtcToken)\r\n    internal\r\n    initializer\r\n  {\r\n    comptroller = ISmartComp(_comp);\r\n    smtcTokenAddress = _smtcToken;\r\n\r\n    totalNobilityTypes = 8;\r\n\r\n    swapEnabled = true;\r\n    limitPerSwap = 1000 * 1e18;\r\n\r\n    // initialize nobility types\r\n    _updateNobilityType(1, 'Folks',    1,    2,\r\n      [uint256(0), 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [uint256(0), 0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n\r\n    _updateNobilityType(2, 'Baron',    10,   5,\r\n      [uint256(1e16), 1e17, 1e18, 0, 0, 0, 0, 0, 0, 0],\r\n      [uint256(1e13), 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,0 ,0, 0]);\r\n\r\n    _updateNobilityType(3, 'Count',    50,   10,\r\n      [uint256(2.5e16), 2.5e17, 2.5e18, 0, 0, 0, 0, 0, 0, 0], \r\n      [uint256(2.5e13), 2.5e14, 2.5e15, 2.5e16, 2.5e17, 2.5e18, 2.5e19, 0, 0, 0]);\r\n\r\n    _updateNobilityType(4, 'Viscount', 100,  20, \r\n      [uint256(5e16), 5e17, 5e18, 0, 0, 0, 0, 0, 0, 0],\r\n      [uint256(5e14), 5e15, 5e16, 5e17, 5e18, 5e19, 0 ,0, 0, 0]);\r\n    \r\n    _updateNobilityType(5, 'Earl',     200,  40,\r\n      [uint256(8.5e16), 8.5e17, 8.5e18, 0 ,0, 0, 0, 0, 0, 0],\r\n      [uint256(8.5e15), 8.5e16, 8.5e17, 8.5e18, 8.5e19, 0 ,0 ,0 ,0, 0]);\r\n\r\n    _updateNobilityType(6, 'Duke',     500,  100,\r\n      [uint256(2.5e17), 2.5e18, 2.5e19, 0, 0, 0, 0, 0, 0, 0],\r\n      [uint256(2.5e16), 2.5e17, 2.5e18, 2.5e19, 2.5e20, 0, 0, 0, 0, 0]);\r\n\r\n    _updateNobilityType(7, 'Prince',   1000, 300, \r\n      [uint256(5e17), 5e18, 5e19, 0, 0, 0, 0, 0, 0, 0], \r\n      [uint256(5e17), 5e18, 5e19, 5e20, 0, 0, 0, 0, 0, 0]);\r\n\r\n    _updateNobilityType(8, 'King',     2000, 700, \r\n      [uint256(1e18), 1e18, 1e19, 1e20, 0, 0, 0, 0, 0, 0],\r\n      [uint256(5e18), 5e19, 5e20, 5e21, 0, 0, 0, 0, 0, 0]);\r\n  }\r\n\r\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\r\n\r\n\r\n  /** @dev Updates the reward for a given address, before executing function */\r\n  modifier updateReward(address _account) {\r\n    // Setting of global vars\r\n    uint256 newRewardPerToken = rewardPerToken();\r\n    // If statement protects against loss in initialisation case\r\n    if (newRewardPerToken > 0) {\r\n      rewardPerTokenStored = newRewardPerToken;\r\n      lastUpdateTime = lastTimeRewardApplicable();\r\n      // Setting of personal vars based on new globals\r\n      if (_account != address(0)) {\r\n        rewards[_account] = earned(_account);\r\n        userRewardPerTokenPaid[_account] = newRewardPerToken;\r\n      }\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  /** @dev only Rewards distributors */\r\n  modifier onlyRewardsDistributor() {\r\n    require(_rewardsDistributors.contains(msg.sender) || msg.sender == owner(), \"only reward distributors\");\r\n    _;\r\n  }\r\n\r\n  /***************************************\r\n                    ACTIONS\r\n  ****************************************/\r\n\r\n  /**\r\n   * @dev Claims outstanding rewards for the sender.\r\n   * First updates outstanding reward allocation and then transfers.\r\n   */\r\n  function claimReward() public override updateReward(msg.sender) {\r\n    uint256 reward = rewards[msg.sender];\r\n    if (reward > 0) {\r\n      rewards[msg.sender] = 0;\r\n      IWETH(address(comptroller.getWBNB())).withdraw(reward);\r\n      TransferHelper.safeTransferETH(msg.sender, reward);\r\n      emit RewardPaid(msg.sender, reward);\r\n    }\r\n  }\r\n\r\n\r\n  function claimChestReward() public override {\r\n    // update chest rewards before claim\r\n    updateChestReward(msg.sender);\r\n\r\n    if(chestSMTRewards[msg.sender] > 0) {\r\n      TransferHelper.safeTransfer(address(comptroller.getSMT()), msg.sender, chestSMTRewards[msg.sender]);\r\n      chestSMTRewards[msg.sender] = 0;\r\n    }\r\n\r\n    if(chestSMTCRewards[msg.sender] > 0) {\r\n      TransferHelper.safeTransfer(smtcTokenAddress, msg.sender, chestSMTCRewards[msg.sender]);\r\n      chestSMTCRewards[msg.sender] = 0;\r\n    }\r\n  }\r\n\r\n  /***************************************\r\n                    GETTERS\r\n  ****************************************/\r\n\r\n  /**\r\n   * @dev Gets the RewardsToken\r\n   */\r\n  function getRewardToken() public view returns (IERC20) {\r\n    return comptroller.getWBNB();\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the last applicable timestamp for this reward period\r\n   */\r\n  function lastTimeRewardApplicable() public view returns (uint256) {\r\n    return StableMath.min(block.timestamp, periodFinish);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount of unclaimed rewards per token since last update,\r\n   * and sums with stored to give the new cumulative reward per token\r\n   * @return 'Reward' per staked token\r\n   */\r\n  function rewardPerToken() public view returns (uint256) {\r\n    // If there is no StakingToken liquidity, avoid div(0)\r\n    uint256 stakedTokens = totalRewardShares * 1e9;\r\n    if (stakedTokens == 0) {\r\n      return rewardPerTokenStored;\r\n    }\r\n    // new reward units to distribute = rewardRate * timeSinceLastUpdate\r\n    uint256 rewardUnitsToDistribute = rewardRate.mul(lastTimeRewardApplicable().sub(lastUpdateTime));\r\n    // prevent overflow\r\n    require(rewardUnitsToDistribute < type(uint256).max.div(1e18));\r\n    // new reward units per token = (rewardUnitsToDistribute * 1e18) / totalTokens\r\n    uint256 unitsToDistributePerToken = rewardUnitsToDistribute.divPrecisely(stakedTokens);\r\n    // return summed rate\r\n    return rewardPerTokenStored.add(unitsToDistributePerToken);\r\n  }\r\n\r\n  function balanceOf(address _account) public view returns(uint256) {\r\n    NobilityType memory _type = nobilityOf(_account);\r\n\r\n    uint256 totalUsersOn = userNobilityCounts[userNobilities[_account]];\r\n    if(totalUsersOn == 0) {\r\n      return 0;\r\n    }\r\n    return _type.passiveShare.mul(1e9).div(totalUsersOn);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount of unclaimed rewards a user has earned\r\n   * @param _account User address\r\n   * @return Total reward amount earned\r\n   */\r\n  function earned(address _account) public view returns (uint256) {\r\n    // current rate per token - rate user previously received\r\n    uint256 userRewardDelta = rewardPerToken().sub(userRewardPerTokenPaid[_account]);\r\n    // new reward = staked tokens * difference in rate\r\n    uint256 userNewReward = balanceOf(_account).mulTruncate(userRewardDelta);\r\n    // add to previous rewards\r\n    return rewards[_account].add(userNewReward);\r\n  }\r\n\r\n  /**\r\n   * @dev get Nobility type of account \r\n   */\r\n  function nobilityOf(address account) public view override returns(NobilityType memory) {\r\n    return nobilityTypes[userNobilities[account]];\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev get Title of Nobility type of account \r\n   */\r\n  function nobilityTitleOf(address account) public view override returns(string memory) {\r\n    return nobilityOf(account).title;\r\n  }\r\n\r\n  /**\r\n   * @dev Check Nobility upgradeable from growth balance to growth balance\r\n   */\r\n  function isUpgradeable(uint256 from, uint256 to) public view override returns(bool, uint256) {\r\n    for(uint256 i = 1 ; i <= totalNobilityTypes; i++) {\r\n      NobilityType memory _type = nobilityTypes[i];\r\n\r\n      if(from < _type.growthRequried && to >= _type.growthRequried) {\r\n        return (true, i);\r\n      }\r\n    }\r\n\r\n    return (false, 0);\r\n  }\r\n\r\n  function notifyGrowth(\r\n    address account, \r\n    uint256 oldBalance, \r\n    uint256 newBalance\r\n  ) \r\n    public \r\n    override \r\n    updateReward(account)\r\n    returns(bool) \r\n  {\r\n    require(_msgSender() == address(comptroller.getGoldenTreePool()), \"SmartAchievement#notifyUpdate: only golden tree pool\");\r\n\r\n    (bool possible, uint256 id) = isUpgradeable(oldBalance, newBalance);\r\n    if(possible) {\r\n      userNobilities[account] = id;\r\n      userNobilityCounts[id] = userNobilityCounts[id].add(1);\r\n    \r\n      if(id > 1) {\r\n        userNobilityCounts[id - 1] = userNobilityCounts[id - 1].sub(1);\r\n      }\r\n\r\n      if(id == 2) {\r\n        // From Nobility = 2 : Baron Chest rewards start\r\n        checkRewardUpdated[account] = block.timestamp; \r\n      } else if(id > 2) {\r\n        updateChestReward(account);\r\n      }\r\n      \r\n      emit UserNobilityUpgraded(account, id);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function updateChestReward(address account) internal {\r\n    uint256 rewardWeeks = uint256(block.timestamp - checkRewardUpdated[account]).div(7 * 24 * 3600);\r\n\r\n    for(uint i = 0; i < rewardWeeks; i++) {\r\n      randNonce = randNonce.add(1);\r\n      (uint256 smtReward, uint256 smtcReward) = getRandomReward(randNonce, userNobilities[account]);\r\n\r\n      chestSMTRewards[account] = chestSMTRewards[account].add(smtReward);\r\n      chestSMTCRewards[account] = chestSMTCRewards[account].add(smtcReward);\r\n    }\r\n\r\n    checkRewardUpdated[account] = checkRewardUpdated[account].add(rewardWeeks.mul(7 * 24 * 3600));\r\n  }\r\n\r\n  function getRandomReward(uint256 nonce, uint256 nobilityType) private view returns(uint256, uint256) {\r\n    NobilityType memory _type = nobilityTypes[nobilityType];\r\n\r\n    uint256 seed = uint256(keccak256(abi.encode(nonce, msg.sender, block.timestamp)));\r\n    uint256 chestSMTIndex = _getRandomNumebr(seed, _type.chestSMTRewards.length);\r\n    uint256 chestSMTCIndex = chestSMTIndex.mul(3).mod(_type.chestSMTCRewards.length);\r\n\r\n    return (\r\n      _type.chestSMTRewards[chestSMTIndex],\r\n      _type.chestSMTCRewards[chestSMTCIndex]\r\n    );\r\n  }\r\n\r\n  function _getRandomNumebr(uint256 seed, uint256 mod) view private returns(uint256) {\r\n    if(mod == 0) {\r\n      return 0;\r\n    }\r\n    return uint256(keccak256(abi.encode(block.timestamp, block.difficulty, block.coinbase, blockhash(block.number + 1), seed, block.number))).mod(mod);\r\n  }\r\n\r\n  /***************************************\r\n                    ADMIN\r\n  ****************************************/\r\n  /**\r\n   * @dev Add rewards distributor\r\n   * @param _address Address of Reward Distributor\r\n   */\r\n  function addDistributor(address _address) external onlyOwner {\r\n    _rewardsDistributors.add(_address);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Remove rewards distributor\r\n   * @param _address Address of Reward Distributor\r\n   */\r\n  function removeDistributor(address _address) external onlyOwner {\r\n    _rewardsDistributors.remove(_address);\r\n  }\r\n\r\n  /**\r\n   * @dev Set Enable or Disable swap and distribute\r\n   * @param _enabled boolean\r\n   */\r\n  function setSwapEnabled(bool _enabled) external onlyOwner {\r\n    swapEnabled = _enabled;\r\n  }\r\n\r\n  /**\r\n   * @dev max limitation of smt amount to swap per once\r\n   * @param _amount amount\r\n   */\r\n  function setLimitPerSwap(uint256 _amount) external onlyOwner {\r\n    limitPerSwap = _amount;\r\n  }\r\n\r\n  function updateNobilityType(\r\n    uint256 id, \r\n    string memory title, \r\n    uint256 growthRequried, \r\n    uint256 passiveShare,\r\n    uint256[10] memory _chestSMTRewards,\r\n    uint256[10] memory _chestSMTCRewards\r\n  ) \r\n    external\r\n    onlyOwner\r\n  {\r\n    _updateNobilityType(id, title, growthRequried, passiveShare, _chestSMTRewards, _chestSMTCRewards);\r\n  }\r\n\r\n  /**\r\n   * @dev Update Nobility Type\r\n   */\r\n  function _updateNobilityType(\r\n    uint256 id, \r\n    string memory title,\r\n    uint256 growthRequried,\r\n    uint256 passiveShare,\r\n    uint256[10] memory _chestSMTRewards,\r\n    uint256[10] memory _chestSMTCRewards\r\n  )\r\n    private\r\n  {\r\n    require(id <= totalNobilityTypes && id > 0, \"SmartAchievement#_updateNobilityType: invalid id\");\r\n    NobilityType storage _type = nobilityTypes[id];\r\n    _type.title          = title;\r\n    _type.growthRequried = growthRequried;\r\n    _type.passiveShare   = passiveShare;\r\n\r\n    for(uint256 i = 0; i < _chestSMTRewards.length; i++) {\r\n      if(_chestSMTRewards[i] > 0) {\r\n        _type.chestSMTRewards.push(_chestSMTRewards[i]);\r\n      }\r\n    }\r\n\r\n    for(uint256 j = 0; j < _chestSMTCRewards.length; j++) {\r\n      if(_chestSMTCRewards[j] > 0) {\r\n        _type.chestSMTCRewards.push(_chestSMTCRewards[j]);\r\n      }\r\n    }\r\n\r\n    uint256 temp = 0;\r\n    for(uint256 i = 1; i <= totalNobilityTypes; i++) {\r\n      temp = temp.add(nobilityTypes[id].passiveShare);\r\n    }\r\n    totalRewardShares = temp;\r\n\r\n    emit NobilityTypeUpdated(id, _type);\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Swap and distribute SMT token to BNB\r\n   */\r\n  function swapDistribute() \r\n    external\r\n    override \r\n  {\r\n    IERC20 smt  = comptroller.getSMT();\r\n    uint256 smtBalance = smt.balanceOf(address(this));\r\n    \r\n    if(!swapEnabled || smtBalance <= limitPerSwap) {\r\n      return;\r\n    }\r\n\r\n    IERC20 weth = comptroller.getWBNB();\r\n    address[] memory wethpath = new address[](2);\r\n    wethpath[0] = address(smt);\r\n    wethpath[1] = address(weth);\r\n\r\n    IUniswapV2Router02 _uniswapV2Router = comptroller.getUniswapV2Router();\r\n\r\n    uint256 beforeBalance = address(this).balance;\r\n    _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        smtBalance > limitPerSwap ? limitPerSwap : smtBalance,\r\n        0,\r\n        wethpath,\r\n        address(this),\r\n        block.timestamp + 3600\r\n    );\r\n    uint256 wethAmount = (address(this).balance).sub(beforeBalance);\r\n    IWETH(address(weth)).deposit{value: wethAmount}();\r\n    \r\n    if(wethAmount > 0) {\r\n      notifyRewardAmount(wethAmount);\r\n    }\r\n\r\n    emit RewardSwapped(wethAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Notifies the contract that new rewards have been added.\r\n   * Calculates an updated rewardRate based on the rewards in period.\r\n   * @param _reward Units of RewardToken that have been added to the pool\r\n   */\r\n  function notifyRewardAmount(uint256 _reward)\r\n    internal\r\n    updateReward(address(0))\r\n  {\r\n    uint256 currentTime = block.timestamp;\r\n    // If previous period over, reset rewardRate\r\n    if (currentTime >= periodFinish) {\r\n      rewardRate = _reward.div(DURATION);\r\n    }\r\n    // If additional reward to existing period, calc sum\r\n    else {\r\n      uint256 remaining = periodFinish.sub(currentTime);\r\n      uint256 leftover = remaining.mul(rewardRate);\r\n      rewardRate = _reward.add(leftover).div(DURATION);\r\n    }\r\n\r\n    lastUpdateTime = currentTime;\r\n    periodFinish = currentTime.add(DURATION);\r\n\r\n    emit RewardAdded(_reward);\r\n  }\r\n\r\n\r\n  //to recieve ETH from uniswapV2Router when swaping\r\n  receive() external payable {}\r\n}"
    },
    "contracts/libs/StableMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport './SafeMath.sol';\r\n\r\nlibrary StableMath {\r\n  using SafeMath for uint;\r\n\r\n  /**\r\n   * @dev Scaling unit for use in specific calculations,\r\n   * where 1 * 10**18, or 1e18 represents a unit '1'\r\n   */\r\n  uint private constant FULL_SCALE = 1e18;\r\n\r\n  /**\r\n   * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\r\n   * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\r\n   * @dev bAsset ratio unit for use in exact calculations,\r\n   * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\r\n   */\r\n  uint private constant RATIO_SCALE = 1e8;\r\n\r\n  /**\r\n   * @dev Provides an interface to the scaling unit\r\n   * @return Scaling unit (1e18 or 1 * 10**18)\r\n   */\r\n  function getFullScale() internal pure returns (uint) {\r\n    return FULL_SCALE;\r\n  }\r\n\r\n  /**\r\n   * @dev Provides an interface to the ratio unit\r\n   * @return Ratio scale unit (1e8 or 1 * 10**8)\r\n   */\r\n  function getRatioScale() internal pure returns (uint) {\r\n    return RATIO_SCALE;\r\n  }\r\n\r\n  /**\r\n   * @dev Scales a given integer to the power of the full scale.\r\n   * @param x   Simple uint256 to scale\r\n   * @return    Scaled value a to an exact number\r\n   */\r\n  function scaleInteger(uint x) internal pure returns (uint) {\r\n    return x.mul(FULL_SCALE);\r\n  }\r\n\r\n  /***************************************\r\n              PRECISE ARITHMETIC\r\n    ****************************************/\r\n\r\n  /**\r\n   * @dev Multiplies two precise units, and then truncates by the full scale\r\n   * @param x     Left hand input to multiplication\r\n   * @param y     Right hand input to multiplication\r\n   * @return      Result after multiplying the two inputs and then dividing by the shared\r\n   *              scale unit\r\n   */\r\n  function mulTruncate(uint x, uint y) internal pure returns (uint) {\r\n    return mulTruncateScale(x, y, FULL_SCALE);\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two precise units, and then truncates by the given scale. For example,\r\n   * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\r\n   * @param x     Left hand input to multiplication\r\n   * @param y     Right hand input to multiplication\r\n   * @param scale Scale unit\r\n   * @return      Result after multiplying the two inputs and then dividing by the shared\r\n   *              scale unit\r\n   */\r\n  function mulTruncateScale(\r\n    uint x,\r\n    uint y,\r\n    uint scale\r\n  ) internal pure returns (uint) {\r\n    // e.g. assume scale = fullScale\r\n    // z = 10e18 * 9e17 = 9e36\r\n    uint z = x.mul(y);\r\n    // return 9e38 / 1e18 = 9e18\r\n    return z.div(scale);\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\r\n   * @param x     Left hand input to multiplication\r\n   * @param y     Right hand input to multiplication\r\n   * @return      Result after multiplying the two inputs and then dividing by the shared\r\n   *              scale unit, rounded up to the closest base unit.\r\n   */\r\n  function mulTruncateCeil(uint x, uint y) internal pure returns (uint) {\r\n    // e.g. 8e17 * 17268172638 = 138145381104e17\r\n    uint scaled = x.mul(y);\r\n    // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\r\n    uint ceil = scaled.add(FULL_SCALE.sub(1));\r\n    // e.g. 13814538111.399...e18 / 1e18 = 13814538111\r\n    return ceil.div(FULL_SCALE);\r\n  }\r\n\r\n  /**\r\n   * @dev Precisely divides two units, by first scaling the left hand operand. Useful\r\n   *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\r\n   * @param x     Left hand input to division\r\n   * @param y     Right hand input to division\r\n   * @return      Result after multiplying the left operand by the scale, and\r\n   *              executing the division on the right hand input.\r\n   */\r\n  function divPrecisely(uint x, uint y) internal pure returns (uint) {\r\n    // e.g. 8e18 * 1e18 = 8e36\r\n    uint z = x.mul(FULL_SCALE);\r\n    // e.g. 8e36 / 10e18 = 8e17\r\n    return z.div(y);\r\n  }\r\n\r\n  /***************************************\r\n                  RATIO FUNCS\r\n  ****************************************/\r\n\r\n  /**\r\n   * @dev Multiplies and truncates a token ratio, essentially flooring the result\r\n   *      i.e. How much mAsset is this bAsset worth?\r\n   * @param x     Left hand operand to multiplication (i.e Exact quantity)\r\n   * @param ratio bAsset ratio\r\n   * @return c     Result after multiplying the two inputs and then dividing by the ratio scale\r\n   */\r\n  function mulRatioTruncate(uint x, uint ratio) internal pure returns (uint c) {\r\n    return mulTruncateScale(x, ratio, RATIO_SCALE);\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies and truncates a token ratio, rounding up the result\r\n   *      i.e. How much mAsset is this bAsset worth?\r\n   * @param x     Left hand input to multiplication (i.e Exact quantity)\r\n   * @param ratio bAsset ratio\r\n   * @return      Result after multiplying the two inputs and then dividing by the shared\r\n   *              ratio scale, rounded up to the closest base unit.\r\n   */\r\n  function mulRatioTruncateCeil(uint x, uint ratio) internal pure returns (uint) {\r\n    // e.g. How much mAsset should I burn for this bAsset (x)?\r\n    // 1e18 * 1e8 = 1e26\r\n    uint scaled = x.mul(ratio);\r\n    // 1e26 + 9.99e7 = 100..00.999e8\r\n    uint ceil = scaled.add(RATIO_SCALE.sub(1));\r\n    // return 100..00.999e8 / 1e8 = 1e18\r\n    return ceil.div(RATIO_SCALE);\r\n  }\r\n\r\n  /**\r\n   * @dev Precisely divides two ratioed units, by first scaling the left hand operand\r\n   *      i.e. How much bAsset is this mAsset worth?\r\n   * @param x     Left hand operand in division\r\n   * @param ratio bAsset ratio\r\n   * @return      Result after multiplying the left operand by the scale, and\r\n   *              executing the division on the right hand input.\r\n   */\r\n  function divRatioPrecisely(uint x, uint ratio) internal pure returns (uint) {\r\n    // e.g. 1e14 * 1e8 = 1e22\r\n    uint y = x.mul(RATIO_SCALE);\r\n    // return 1e22 / 1e12 = 1e10\r\n    return y.div(ratio);\r\n  }\r\n\r\n  /***************************************\r\n                    HELPERS\r\n    ****************************************/\r\n\r\n  /**\r\n   * @dev Calculates minimum of two numbers\r\n   * @param x     Left hand input\r\n   * @param y     Right hand input\r\n   * @return      Minimum of the two inputs\r\n   */\r\n  function min(uint x, uint y) internal pure returns (uint) {\r\n    return x > y ? y : x;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculated maximum of two numbers\r\n   * @param x     Left hand input\r\n   * @param y     Right hand input\r\n   * @return      Maximum of the two inputs\r\n   */\r\n  function max(uint x, uint y) internal pure returns (uint) {\r\n    return x > y ? x : y;\r\n  }\r\n\r\n  /**\r\n   * @dev Clamps a value to an upper bound\r\n   * @param x           Left hand input\r\n   * @param upperBound  Maximum possible value to return\r\n   * @return            Input x clamped to a maximum value, upperBound\r\n   */\r\n  function clamp(uint x, uint upperBound) internal pure returns (uint) {\r\n    return x > upperBound ? upperBound : x;\r\n  }\r\n}\r\n"
    },
    "contracts/libs/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    address constant NATIVE_TOKEN = address(0);\r\n\r\n    function isEther(address token) internal pure returns (bool) {\r\n      return token == NATIVE_TOKEN;\r\n    }\r\n\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferTokenOrETH(address token, address to, uint value) internal {\r\n        isEther(token) \r\n            ? safeTransferETH(to, value)\r\n            : safeTransfer(token, to, value);\r\n    }\r\n}"
    },
    "contracts/libs/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n\r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n        return x / y;\r\n    }\r\n\r\n    function mod(uint x, uint y) internal pure returns (uint z) {\r\n        return x % y;\r\n    }\r\n}"
    },
    "contracts/SmartLadder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * Smart Ladder Contract\r\n * @author Liu\r\n */\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\n\r\nimport './libs/TransferHelper.sol';\r\n\r\nimport './interfaces/ISmartComp.sol';\r\nimport './interfaces/ISmartLadder.sol';\r\n\r\n\r\ncontract SmartLadder is UUPSUpgradeable, OwnableUpgradeable, ISmartLadder {\r\n  using SafeMath for uint256;\r\n\r\n  /// @dev percent divider\r\n  uint256 constant public PERCENTS_DIVIDER = 10000;\r\n\r\n  ISmartComp public comptroller;\r\n\r\n  address public adminWallet;\r\n\r\n  /// @dev Activities\r\n  mapping(uint256 => Activity) public activities;\r\n\r\n  uint256 totalActivities;\r\n\r\n  /// @dev Users user => sponsor\r\n  mapping(address => address) public users;\r\n  \r\n  /// @dev Events\r\n  event ActivityUpdated(uint256 id, Activity activity);\r\n  event ActivityAdded(uint256 id, Activity activity);\r\n  event ActivityEnabled(uint256 id, bool enable);\r\n\r\n  event ReferralReward(address from, address sponsor, address token, uint256 amount, uint level);\r\n  event AdminReferralReward(address from, address admin, address token, uint256 amount);\r\n  \r\n\r\n  function initialize(address _comp, address _admin) public initializer {\r\n\t\t__Ownable_init();\r\n    __SmartLadder_init_unchained(_comp, _admin);\r\n  }\r\n\r\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\r\n\r\n\r\n  function __SmartLadder_init_unchained(\r\n      address _comp,\r\n      address _admin\r\n    )\r\n        internal\r\n        initializer\r\n    {\r\n        comptroller = ISmartComp(_comp);\r\n        adminWallet = _admin;\r\n      \r\n        _initActivities();\r\n    }\r\n    \r\n  /**\r\n   * Initialize Activities with default\r\n   * \r\n   */\r\n  function _initActivities() internal {\r\n    IERC20 smtToken = comptroller.getSMT();\r\n\r\n    _updateActivity(1,    \"buytax\",      [5000, 500, 500, 750, 750, 1250, 1250], address(smtToken),  true,  true);\r\n    _updateActivity(2,    \"farmtax\",     [5500, 250, 250, 750, 750, 1250, 1250], address(smtToken),  true,  true);\r\n    _updateActivity(3,    \"smartliving\", [5000, 500, 500, 750, 750, 1250, 1250], address(smtToken),  true,  true);\r\n    _updateActivity(4,    \"ecosystem\",   [5000, 500, 500, 750, 750, 1250, 1250], address(smtToken),  true,  true);\r\n\r\n    totalActivities = 4;\r\n  }\r\n\r\n\r\n  /**\r\n    * @notice Sets a new comptroller\r\n    * @dev Admin function to set a new comptroller\r\n    */\r\n  function setComptroller(ISmartComp newComptroller) public onlyOwner {\r\n    // Ensure invoke comptroller.isComptroller() returns true\r\n    require(newComptroller.isComptroller(), \"marker method returned false\");\r\n\r\n    // Set comptroller to newComptroller\r\n    comptroller = newComptroller;\r\n  }\r\n\r\n  /**\r\n   * Update Admin wallet\r\n   */\r\n  function updateAdminWallet(\r\n    address _address\r\n  ) external onlyOwner {\r\n    adminWallet = _address;\r\n  }\r\n\r\n  /**\r\n   * register Referral\r\n   * @param _user : user to register\r\n   * @param _sponsor : address of sponsor\r\n   */\r\n  function registerSponsor(\r\n    address _user,\r\n    address _sponsor\r\n  ) \r\n    public \r\n    override\r\n  {\r\n    require(msg.sender == address(comptroller.getSmartArmy()) || msg.sender == owner(), \"SmartLadder#registerSponsor: only SmartArmy or owner\");\r\n    require(users[_user] == address(0x0), \"SmartLadder#registerSponsor: already registered\");\r\n    users[_user] = _sponsor;  \r\n  }\r\n\r\n\r\n  /**\r\n   * add new Activity\r\n   */\r\n  function addActivity(\r\n    string memory _name,\r\n    uint16[7] memory _share,\r\n    address _token\r\n  ) \r\n    public \r\n    onlyOwner \r\n  {\r\n    totalActivities = totalActivities.add(1);\r\n    Activity storage _activity = activities[totalActivities];\r\n    require(!_activity.isValid, \"SmartLadder#addActivity: already exist\");\r\n\r\n    uint16 _sumPercent = 0;\r\n    for(uint i = 0; i < 7; i++) {\r\n      _sumPercent = _sumPercent + _share[i];\r\n    }\r\n    require(_sumPercent == PERCENTS_DIVIDER, \"SmartLadder#addActivity: invalid share\");\r\n    \r\n    _activity.name = _name;\r\n    _activity.token = _token;\r\n    _activity.share = _share;\r\n    _activity.enabled = true;\r\n    _activity.isValid = true;\r\n    \r\n    emit ActivityAdded(totalActivities, _activity);\r\n  } \r\n\r\n  /**\r\n   * Update Activity Share percentage\r\n   */\r\n  function updateActivityShare(\r\n    uint256 _id, \r\n    uint16[7] memory _share\r\n  ) \r\n    public \r\n    onlyOwner \r\n  {\r\n    Activity storage _activity = activities[_id];\r\n    require(_activity.isValid, \"SmartLadder#updateActivityShare: invalid activity\");\r\n\r\n    uint16 _sumPercent = 0;\r\n    for(uint i = 0; i < 7; i++) {\r\n      _sumPercent = _sumPercent + _share[i];\r\n    }\r\n    require(_sumPercent == PERCENTS_DIVIDER, \"SmartLadder#updateActivityShare: invalid share\");\r\n    \r\n    _activity.share = _share;\r\n    \r\n    emit ActivityUpdated(_id, _activity);\r\n  } \r\n\r\n  /**\r\n   * Enable or Disable Activity\r\n   */\r\n  function enableActivity(\r\n    uint256 _id,\r\n    bool enable\r\n  )\r\n    public \r\n    onlyOwner\r\n  {\r\n    Activity storage _activity = activities[_id];\r\n    require(_activity.isValid, \"SmartLadder#enableActivity: invalid activity\");\r\n\r\n    _activity.enabled = enable;\r\n\r\n    emit ActivityEnabled(_id, enable);\r\n  }\r\n\r\n\r\n  /**\r\n   * Update Activity Information\r\n   */\r\n  function _updateActivity(\r\n    uint256 _id, \r\n    string memory _name,\r\n    uint16[7] memory _share,\r\n    address _token,\r\n    bool _enabled,\r\n    bool _isValid\r\n  ) \r\n    private \r\n  {\r\n    Activity storage _activity = activities[_id];\r\n    _activity.name  = _name;\r\n    _activity.token = _token;\r\n    _activity.enabled = _enabled;\r\n    _activity.isValid = _isValid;\r\n\r\n    updateActivityShare(_id, _share);\r\n  } \r\n\r\n  /**\r\n   * Distribute Tax SMT to referrals\r\n   * @param account: from address\r\n   */\r\n  function distributeTax(\r\n    uint256 id,\r\n    address account\r\n  ) \r\n    public \r\n    override\r\n  {\r\n    Activity memory _activity = activities[id];\r\n    require(_activity.isValid && _activity.enabled, \"SmartLadder#distributeTax: invalid activity\");\r\n\r\n    _distribute(id, account);\r\n  }\r\n\r\n  /**\r\n   * Distribute Buy Tax SMT to referrals\r\n   * @param account: the address to buy on dex\r\n   */\r\n  function distributeBuyTax(\r\n    address account\r\n  ) \r\n    public \r\n    override\r\n  {\r\n    _distribute(1, account);\r\n  }\r\n\r\n  /**\r\n   * Distribute Farming Tax SMT to referrals\r\n   * @param account:  from address\r\n   */\r\n  function distributeFarmingTax(\r\n    address account\r\n  ) \r\n    public \r\n    override\r\n  {\r\n    _distribute(2, account);\r\n  }\r\n\r\n  /**\r\n   * Distribute Smart Living Tax SMT to referrals\r\n   * @param account:  from address\r\n   */\r\n  function distributeSmartLivingTax(\r\n    address account\r\n  ) \r\n    public \r\n    override\r\n  {\r\n    _distribute(3, account);\r\n  }\r\n\r\n  /**\r\n   * Distribute Ecosystem Tax SMT to referrals\r\n   * @param account:  from address\r\n   */\r\n  function distributeEcosystemTax(\r\n    address account\r\n  ) \r\n    public \r\n    override\r\n  {\r\n    _distribute(4, account);\r\n  }\r\n\r\n\r\n  /**\r\n   * Private rewards to referrals \r\n   */\r\n  function _distribute(\r\n    uint256 id,\r\n    address from\r\n  ) \r\n    internal \r\n  {\r\n    Activity storage _activity = activities[id];\r\n    address token = _activity.token;\r\n\r\n    uint256 amount = TransferHelper.isEther(token) \r\n      ? address(this).balance\r\n      : IERC20(token).balanceOf(address(this));\r\n\r\n    if(amount == 0) {\r\n      return;\r\n    }\r\n\r\n    if(!_activity.isValid || !_activity.enabled || users[from] == address(0x0)) {\r\n      // if activity is not valid or is stopped now, all token to admin wallet\r\n      TransferHelper.safeTransferTokenOrETH(token, adminWallet, amount);\r\n      emit AdminReferralReward(from, adminWallet, token, amount);\r\n\r\n    } else {\r\n      uint256 paid = 0;\r\n      address ref = from;\r\n      for(uint i = 0 ; i < _activity.share.length; i++) {\r\n        uint16 percent = _activity.share[i];\r\n        ref = users[ref];\r\n        uint256 ladderLevel = comptroller.getSmartArmy().licenseLevelOf(ref);\r\n        if(percent > 0 && ref != address(0x0) && i < ladderLevel) {\r\n          uint256 shareAmount = amount.mul(percent).div(PERCENTS_DIVIDER);\r\n          TransferHelper.safeTransferTokenOrETH(token, ref, shareAmount);\r\n\r\n          paid = paid.add(shareAmount);\r\n\r\n          emit ReferralReward(from, ref, token, shareAmount, i+1);\r\n        } \r\n      }\r\n\r\n      if(amount > paid) {\r\n        uint256 remain = amount.sub(paid);\r\n        TransferHelper.safeTransferTokenOrETH(token, adminWallet, remain);\r\n        emit AdminReferralReward(from, adminWallet, token, remain);\r\n      }\r\n    }\r\n\r\n    _activity.totalDistributed = _activity.totalDistributed.add(amount);\r\n  }\r\n\r\n  \r\n  /**\r\n   * get Activity Information from id\r\n   */\r\n  function activity(uint256 id) \r\n    public \r\n    view\r\n    override\r\n    returns(Activity memory) \r\n  {\r\n      return activities[id];\r\n  }\r\n\r\n  function sponsorOf(address account) \r\n    public \r\n    view\r\n    override\r\n    returns (address) \r\n  {\r\n    return users[account];\r\n  }\r\n\r\n  function sponsorsOf(address account, uint count) \r\n    public \r\n    view\r\n    override\r\n    returns (address[] memory) \r\n  {\r\n    address[] memory _sponsors = new address[](count);\r\n    address ref = account;\r\n    for (uint i = 0; i < count; i++) {\r\n      ref = users[ref];\r\n      if(ref == address(0x0)) {\r\n        break;\r\n      }\r\n      _sponsors[i] = ref;\r\n    }\r\n\r\n    return _sponsors;\r\n  }\r\n}"
    },
    "contracts/SMTBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * SMTC Pancake bridge - SMT Intermediary\r\n * @author Liu\r\n */\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./libs/UniswapV2Library.sol\";\r\nimport \"./interfaces/IUniswapFactory.sol\";\r\nimport \"./interfaces/IWETH.sol\";\r\nimport './libs/TransferHelper.sol';\r\nimport \"./libs/IBEP20.sol\";\r\n\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\n\r\n\r\ncontract SMTBridge is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public WBNB;\r\n    address public pancakeFactory;\r\n    \r\n    uint256 public aggregatorFee = 0; // Default to 0.0%\r\n    uint256 public constant FEE_DENOMINATOR = 10 ** 10;\r\n\r\n    modifier ensure(uint deadline) {\r\n        require(deadline >= block.timestamp, 'SMTBridge: EXPIRED');\r\n        _;\r\n    }\r\n\r\n    constructor (\r\n        address _wbnb,\r\n        address _factory\r\n    ) {\r\n        require(_wbnb != address(0), \"SMTBridge: ZERO_WBNB_ADDRESS\");\r\n        require(_factory != address(0), \"SMTBridge: ZERO_FACTORY_ADDRESS\");\r\n        \r\n        WBNB = _wbnb;\r\n        pancakeFactory = _factory;\r\n    }\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint swapAmountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external virtual ensure(deadline) {\r\n        uint amountOut = _swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, swapAmountOutMin, path);\r\n        uint feeAmount = amountOut.mul(aggregatorFee).div(FEE_DENOMINATOR);\r\n\r\n        uint adjustedAmountOut = amountOut.sub(feeAmount);\r\n        TransferHelper.safeTransfer(path[path.length - 1], to, adjustedAmountOut);\r\n    }\r\n\r\n\r\n    function _swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path\r\n    ) internal virtual returns (uint) {\r\n        _transferTokenToPair(\r\n            path[0], msg.sender, UniswapV2Library.pairFor(pancakeFactory, path[0], path[1]), amountIn\r\n        );\r\n        uint balanceBefore = IBEP20(path[path.length - 1]).balanceOf(address(this));\r\n        _swapSupportingFeeOnTransferTokens(path, address(this));\r\n        uint amountOut = IBEP20(path[path.length - 1]).balanceOf(address(this)).sub(balanceBefore);\r\n        require(amountOut >= amountOutMin, 'SMTBridge: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        return amountOut;\r\n    }\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint swapAmountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external virtual payable ensure(deadline) {\r\n        uint amountOut = _swapExactETHForTokensSupportingFeeOnTransferTokens(swapAmountOutMin, path, 0);\r\n        uint feeAmount = amountOut.mul(aggregatorFee).div(FEE_DENOMINATOR);\r\n\r\n        uint adjustedAmountOut = amountOut.sub(feeAmount);\r\n        TransferHelper.safeTransfer(path[path.length - 1], to, adjustedAmountOut);\r\n    }\r\n\r\n    function _swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint swapAmountOutMin,\r\n        address[] calldata path,\r\n        uint fee\r\n    ) internal virtual returns (uint) {\r\n        require(path[0] == WBNB, 'SMTBridge: INVALID_PATH');\r\n        uint amountIn = msg.value.sub(fee);\r\n        require(amountIn > 0, 'SMTBridge: INSUFFICIENT_INPUT_AMOUNT');\r\n        IWETH(WBNB).deposit{value: amountIn}();\r\n        assert(IWETH(WBNB).transfer(UniswapV2Library.pairFor(pancakeFactory, path[0], path[1]), amountIn));\r\n        uint balanceBefore = IBEP20(path[path.length - 1]).balanceOf(address(this));\r\n        _swapSupportingFeeOnTransferTokens(path, address(this));\r\n        uint amountOut = IBEP20(path[path.length - 1]).balanceOf(address(this)).sub(balanceBefore);\r\n        require(amountOut >= swapAmountOutMin, 'SMTBridge: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        return amountOut;\r\n    }\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint swapAmountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external virtual ensure(deadline) {\r\n        uint amountOut = _swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, swapAmountOutMin, path);\r\n        uint feeAmount = amountOut.mul(aggregatorFee).div(FEE_DENOMINATOR);\r\n\r\n        IWETH(WBNB).withdraw(amountOut);\r\n        uint adjustedAmountOut = amountOut.sub(feeAmount);\r\n        TransferHelper.safeTransferETH(to, adjustedAmountOut);\r\n    }\r\n\r\n    function _swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint swapAmountOutMin,\r\n        address[] calldata path\r\n    ) internal virtual returns (uint) {\r\n        require(path[path.length - 1] == WBNB, 'SMTBridge: INVALID_PATH');\r\n        _transferTokenToPair(\r\n            path[0], msg.sender, UniswapV2Library.pairFor(pancakeFactory, path[0], path[1]), amountIn\r\n        );\r\n        uint balanceBefore = IBEP20(WBNB).balanceOf(address(this));\r\n        _swapSupportingFeeOnTransferTokens(path, address(this));\r\n        uint amountOut = IBEP20(WBNB).balanceOf(address(this)).sub(balanceBefore);\r\n        require(amountOut >= swapAmountOutMin, 'SMTBridge: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        return amountOut;\r\n    }\r\n\r\n    // **** SWAP (supporting fee-on-transfer tokens) ****\r\n    // requires the initial amount to have already been sent to the first pair\r\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0,) = UniswapV2Library.sortTokens(input, output);\r\n            require(IUniswapV2Factory(pancakeFactory).getPair(input, output) != address(0), \"SMTBridge: PAIR_NOT_EXIST\");\r\n            IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(pancakeFactory, input, output));\r\n            uint amountInput;\r\n            uint amountOutput;\r\n            { // scope to avoid stack too deep errors\r\n            (uint reserve0, uint reserve1,) = pair.getReserves();\r\n            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n            amountInput = IBEP20(input).balanceOf(address(pair)).sub(reserveInput);\r\n            amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);\r\n            }\r\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\r\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(pancakeFactory, output, path[i + 2]) : _to;\r\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\r\n        }\r\n    }\r\n\r\n    // Transfer token from User => This => Pair\r\n    function _transferTokenToPair(address token, address from, address pair, uint value) internal {\r\n        // First transfer token to this\r\n        uint balanceBefore = IBEP20(token).balanceOf(address(this));\r\n        TransferHelper.safeTransferFrom(\r\n            token, from, address(this), value\r\n        );\r\n        uint amountIn = IBEP20(token).balanceOf(address(this)).sub(balanceBefore);\r\n        \r\n        // Second Transfer token to pair from this\r\n        TransferHelper.safeTransfer(token, pair, amountIn);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function collect(address token) external {\r\n        if (token == WBNB) {\r\n            uint256 wethBalance = IBEP20(token).balanceOf(address(this));\r\n            if (wethBalance > 0) {\r\n                IWETH(WBNB).withdraw(wethBalance);\r\n            }\r\n            TransferHelper.safeTransferETH(owner(), address(this).balance);\r\n        } else {\r\n            TransferHelper.safeTransfer(token, owner(), IBEP20(token).balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function setAggregatorFee(uint _fee) external onlyOwner {\r\n        aggregatorFee = _fee;\r\n    }\r\n\r\n    function setPancakeFactory(address _factory) external onlyOwner {\r\n        pancakeFactory = _factory;\r\n    }\r\n\r\n    function setWBNB(address _wbnb) external onlyOwner {\r\n        WBNB = _wbnb;\r\n    }\r\n}"
    },
    "contracts/libs/UniswapV2Library.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport '../interfaces/IUniswapPair.sol';\r\nimport \"./SafeMath.sol\";\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'PancakeLibrary: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'PancakeLibrary: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                //hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5' // init code hash - mainnet\r\n                hex'ecba335299a6693cb2ebc4782e74669b84290b6378ea3a3873c7231a8d7d1074' // init code hash - testnet\r\n            )))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'PancakeLibrary: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(9975);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(10000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(9975);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'PancakeLibrary: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'PancakeLibrary: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i > 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/SmartFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * Smart Farming Contract\r\n * @author Liu\r\n */\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\n\r\nimport './libs/TransferHelper.sol';\r\nimport './libs/StableMath.sol';\r\n\r\nimport './interfaces/ISmartComp.sol';\r\nimport './interfaces/ISmartLadder.sol';\r\nimport './interfaces/ISmartArmy.sol';\r\nimport './interfaces/ISmartFarm.sol';\r\nimport './interfaces/IGoldenTreePool.sol';\r\nimport './interfaces/IUniswapRouter.sol';\r\nimport './interfaces/IUniswapFactory.sol';\r\n\r\ncontract SmartFarm is UUPSUpgradeable, OwnableUpgradeable, ISmartFarm {\r\n  using StableMath for uint256;\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  /// @dev Params for Passive Rewards\r\n  uint public constant DURATION = 7 days;\r\n\r\n  // Timestamp for current period finish\r\n  uint256 public periodFinish;\r\n  // RewardRate for the rest of the PERIOD\r\n  uint256 public rewardRate;\r\n  // Last time any user took action\r\n  uint256 public lastUpdateTime;\r\n  // Ever increasing rewardPerToken rate, based on % of total supply\r\n  uint256 public rewardPerTokenStored;\r\n\r\n  EnumerableSet.AddressSet private _rewardsDistributors;\r\n\r\n\r\n  ISmartComp public comptroller;\r\n\r\n  /// @dev Info of each user that stakes LP tokens.\r\n  mapping(address => UserInfo) public userInfo;\r\n\r\n  /// @dev Farming Tax percent to distribute\r\n  uint256 public farmingTax_referral;\r\n  uint256 public farmingTax_golden;\r\n  uint256 public farmingTax_dev;\r\n  uint256 public farmingTax_passive;\r\n  uint256 public unstakingFee;\r\n\r\n  uint256 public farmingRewardPercent;\r\n  address public farmingRewardWallet;\r\n\r\n  /// @dev Address for collecting fee\r\n  address public feeAddress;\r\n\r\n  uint256 public totalStaked;\r\n\r\n  event RewardAdded(uint256 reward);\r\n  event Staked(address indexed account, uint256 amount, uint256 lp);\r\n  event Withdrawn(address indexed account, uint256 amount, uint256 lp);\r\n  event Claimed(address indexed account, uint256 amount);\r\n\r\n\r\n  function initialize(address _comp, address _rewardWallet) public initializer {\r\n\t\t__Ownable_init();\r\n    __SmartFarm_init_unchained(_comp, _rewardWallet);\r\n  }\r\n\r\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\r\n\r\n\r\n  function __SmartFarm_init_unchained(address _comp, address _rewardWallet)\r\n        internal\r\n        initializer\r\n    {\r\n      comptroller = ISmartComp(_comp);\r\n      \r\n      farmingTax_referral = 1000;\r\n      farmingTax_golden = 300;\r\n      farmingTax_dev = 100;\r\n      farmingTax_passive = 100;\r\n\r\n      unstakingFee = 0;\r\n      farmingRewardPercent = 10;   // 0.1 %\r\n      farmingRewardWallet = _rewardWallet;\r\n\r\n      feeAddress = msg.sender;\r\n    }\r\n  \r\n\r\n  /**\r\n  * @notice Sets a new comptroller\r\n  * @dev Admin function to set a new comptroller\r\n  */\r\n  function setComptroller(ISmartComp newComptroller) public onlyOwner {\r\n    // Ensure invoke comptroller.isComptroller() returns true\r\n    require(newComptroller.isComptroller(), \"marker method returned false\");\r\n\r\n    // Set comptroller to newComptroller\r\n    comptroller = newComptroller;\r\n  }\r\n\r\n\r\n  /**\r\n   * Update Fee information\r\n   */\r\n  function updateFeeInfo(\r\n    uint256 _farmingTax_referral,             // Farming tax percent for referral system\r\n    uint256 _farmingTax_golden,               // Farming tax percent for golden tree pool\r\n    uint256 _farmingTax_dev,                  // Farming tax percent for dev wallet\r\n    uint256 _farmingTax_passive,              // Farming tax percent for passive share\r\n    uint256 _unstakingFee,                    // Unstaking fee percent\r\n    address _feeAddress\r\n  ) external onlyOwner {\r\n    require(_farmingTax_referral < 5000, \"SmartFarm#updateFeeInfo: Too big farming tax referral\");\r\n    require(_farmingTax_golden < 5000, \"SmartFarm#updateFeeInfo: Too big farming tax golden\");\r\n    require(_farmingTax_dev < 5000, \"SmartFarm#updateFeeInfo: Too big farming tax dev\");\r\n    require(_farmingTax_passive < 5000, \"SmartFarm#updateFeeInfo: Too big farming tax passwive\");\r\n    \r\n    require(_unstakingFee < 5000, \"SmartFarm#updateFeeInfo: Too big unstaking fee\");\r\n    \r\n    farmingTax_referral = _farmingTax_referral;\r\n    farmingTax_golden = _farmingTax_golden;\r\n    farmingTax_dev = _farmingTax_dev;\r\n    farmingTax_passive = _farmingTax_passive;\r\n    unstakingFee = _unstakingFee;\r\n    feeAddress = _feeAddress;\r\n  }\r\n\r\n  /**\r\n   * Update farming reward pecentage and wallet address\r\n   */\r\n  function updateFarmingRewardParams(\r\n    uint256 percent,\r\n    address wallet\r\n  ) \r\n    external\r\n    onlyOwner \r\n  {\r\n    require(wallet != address(0x0), \"SmartFarm#updateFarmingReward: invalid wallet address\");\r\n    require(percent <= 10_000, \"SmartFarm#updateFarmingReward: too big percent\");\r\n\r\n    farmingRewardPercent = percent;\r\n    farmingRewardWallet = wallet;\r\n  }\r\n\r\n\r\n  /***************************************\r\n                    ADMIN\r\n  ****************************************/\r\n  /**\r\n   * @dev Add rewards distributor\r\n   * @param _address Address of Reward Distributor\r\n   */\r\n  function addDistributor(address _address) external onlyOwner {\r\n    _rewardsDistributors.add(_address);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Remove rewards distributor\r\n   * @param _address Address of Reward Distributor\r\n   */\r\n  function removeDistributor(address _address) external onlyOwner {\r\n    _rewardsDistributors.remove(_address);\r\n  }\r\n\r\n\r\n  /** @dev only Rewards distributors */\r\n  modifier onlyRewardsDistributor() {\r\n    require(_rewardsDistributors.contains(msg.sender) || msg.sender == owner(), \"SmartFarm: only reward distributors\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Notifies the contract that new rewards have been added.\r\n   * Calculates an updated rewardRate based on the rewards in period.\r\n   * @param _reward Units of RewardToken that have been added to the pool\r\n   */\r\n  function notifyRewardAmount(uint _reward)\r\n    external\r\n    override\r\n    onlyRewardsDistributor\r\n    updatePassiveReward(address(0))\r\n  {\r\n    uint currentTime = block.timestamp;\r\n\r\n    // transfer all SMT token for farming passive rewards to \r\n    IERC20 smtToken = comptroller.getSMT();\r\n    TransferHelper.safeTransfer(address(smtToken), farmingRewardWallet, _reward);\r\n\r\n    // If previous period over, reset rewardRate\r\n    if (currentTime >= periodFinish) {\r\n      rewardRate = _reward.div(DURATION);\r\n    }\r\n    // If additional reward to existing period, calc sum\r\n    else {\r\n      uint remaining = periodFinish.sub(currentTime);\r\n      uint leftover = remaining.mul(rewardRate);\r\n      rewardRate = _reward.add(leftover).div(DURATION);\r\n    }\r\n\r\n    lastUpdateTime = currentTime;\r\n    periodFinish = currentTime.add(DURATION);\r\n\r\n    emit RewardAdded(_reward);\r\n  }\r\n\r\n\r\n  /** @dev Updates the reward for a given address, before executing function */\r\n  modifier updatePassiveReward(address account) {\r\n    // Setting of global vars\r\n    uint256 newRewardPerToken = rewardPerToken();\r\n    // If statement protects against loss in initialisation case\r\n    if (newRewardPerToken > 0) {\r\n      rewardPerTokenStored = newRewardPerToken;\r\n      lastUpdateTime = lastTimeRewardApplicable();\r\n      // Setting of personal vars based on new globals\r\n      if (account != address(0)) {\r\n        UserInfo storage uInfo = userInfo[account];\r\n        uInfo.rewards = earnedPassive(account);\r\n        uInfo.rewardPerTokenPaid = newRewardPerToken;\r\n      }\r\n    }\r\n    _;\r\n  }\r\n\r\n  modifier updateFixedReward(address account) {\r\n      if (account != address(0)) {\r\n          UserInfo storage uInfo = userInfo[account];\r\n          uInfo.rewards = earned(account);\r\n          uInfo.lastUpdated = block.timestamp;\r\n      }\r\n      _;\r\n  }\r\n\r\n\r\n  function balanceOf(address account) public view returns (uint256) {\r\n    return userInfo[account].balance;\r\n  }\r\n\r\n  function rewardsOf(address account) public view returns (uint256) {\r\n    return userInfo[account].rewards;\r\n  }\r\n\r\n\r\n   /**\r\n   * @dev Gets the last applicable timestamp for this reward period\r\n   */\r\n  function lastTimeRewardApplicable() public view returns (uint) {\r\n    return StableMath.min(block.timestamp, periodFinish);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount of unclaimed rewards per token since last update,\r\n   * and sums with stored to give the new cumulative reward per token\r\n   * @return 'Reward' per staked token\r\n   */\r\n  function rewardPerToken() public view returns (uint) {\r\n    // If there is no StakingToken liquidity, avoid div(0)\r\n    uint256 stakedTokens = totalStaked;\r\n    if (stakedTokens == 0) {\r\n      return rewardPerTokenStored;\r\n    }\r\n    // new reward units to distribute = rewardRate * timeSinceLastUpdate\r\n    uint256 rewardUnitsToDistribute = rewardRate.mul(lastTimeRewardApplicable().sub(lastUpdateTime));\r\n    // prevent overflow\r\n    require(rewardUnitsToDistribute < type(uint256).max.div(1e18));\r\n    // new reward units per token = (rewardUnitsToDistribute * 1e18) / totalTokens\r\n    uint256 unitsToDistributePerToken = rewardUnitsToDistribute.divPrecisely(stakedTokens);\r\n    // return summed rate\r\n    return rewardPerTokenStored.add(unitsToDistributePerToken);\r\n  }\r\n\r\n  /**\r\n   * Calculate earned amount from lastUpdated to block.timestamp\r\n   * Check License activate status while staking \r\n   */\r\n  function earned(address account) public view returns (uint256) {\r\n    uint256 blockTime = block.timestamp;\r\n    UserInfo memory uInfo = userInfo[account];\r\n\r\n    // Check license activation duration \r\n    (uint256 start, uint256 end) = comptroller.getSmartArmy().licenseActiveDuration(account, uInfo.lastUpdated, blockTime);\r\n    if(start == 0 || end == 0) {\r\n      return uInfo.rewards;\r\n    }\r\n    \r\n    uint256 duration = end.sub(start);\r\n    uint256 amount = duration.mul(balanceOf(account)).mul(farmingRewardPercent).div(86400).div(10_000);\r\n    return uInfo.rewards.add(amount);\r\n  }\r\n  \r\n\r\n  /**\r\n   * @dev Calculates the amount of unclaimed rewards a user has earned\r\n   * @param _account User address\r\n   * @return Total reward amount earned\r\n   */\r\n  function earnedPassive(address _account) public view returns (uint256) {\r\n    UserInfo memory uInfo = userInfo[_account];\r\n\r\n    // current rate per token - rate user previously received\r\n    uint256 userRewardDelta = rewardPerToken().sub(uInfo.rewardPerTokenPaid);\r\n    // new reward = staked tokens * difference in rate\r\n    uint256 userNewReward = balanceOf(_account).mulTruncate(userRewardDelta);\r\n    // add to previous rewards\r\n    return uInfo.rewards.add(userNewReward);\r\n  }\r\n\r\n  /**\r\n   * Stake SMT token\r\n   * Swap with BUSD and add liquidity to pcs\r\n   * Lock LP token to contract\r\n   */\r\n  function stakeSMT(\r\n    address account,\r\n    uint256 amount\r\n  ) \r\n    public\r\n    override\r\n    updateFixedReward(account)\r\n    updatePassiveReward(account)\r\n    returns(uint256)\r\n  {\r\n    ISmartArmy smartArmy = comptroller.getSmartArmy();\r\n    require(_msgSender() == address(smartArmy) || _msgSender() == account, \"SmartFarm#stakeSMT: invalid account\");\r\n\r\n    uint256 liquidity = _tranferSmtToContract(_msgSender(), account, amount);\r\n    require(liquidity > 0, \"SmartFarm#stakeSMT: failed to add liquidity\");\r\n\r\n    UserInfo storage uInfo = userInfo[account];\r\n    uInfo.balance = uInfo.balance.add(liquidity);\r\n\r\n    totalStaked = totalStaked.add(liquidity);\r\n\r\n    emit Staked(account, amount, liquidity);\r\n\r\n    return liquidity;\r\n  }\r\n\r\n\r\n  /**\r\n   * @notice Withdraw Staked SMT\r\n   */\r\n  function withdrawSMT(\r\n    address account,\r\n    uint256 lpAmount\r\n  )\r\n    public \r\n    override\r\n    updateFixedReward(account)\r\n    updatePassiveReward(account)\r\n    returns(uint256)\r\n  {\r\n    require(lpAmount > 0, \"SmartFarm#withdrawSMT: Cannot withdraw 0\");\r\n    require(lpAmount <= balanceOf(account), \"SmartFarm#withdrawSMT: Cannot withdraw more than balance\");\r\n\r\n    ISmartArmy smartArmy = comptroller.getSmartArmy();\r\n    uint256 lpLocked = smartArmy.lockedLPOf(account);\r\n\r\n    require(_msgSender() == address(smartArmy) || _msgSender() == account, \"SmartFarm#withdrawSMT: invalid account\");\r\n\r\n    if(_msgSender() == address(smartArmy)) {\r\n      require(lpLocked == lpAmount, \"SmartFarm#withdrawSMT: withdraw amount from SmartArmy is invalid\");\r\n    } else {\r\n      require(lpLocked.add(lpAmount) <= balanceOf(account), \"SmartFarm#withdrawSMT: withdraw amount is invalid\");\r\n    }\r\n\r\n    UserInfo storage uInfo = userInfo[account];\r\n\r\n    uint256 smtAmount = _tranferSmtToUser(_msgSender(), lpAmount);\r\n    require(smtAmount > 0, \"SmartFarm#withdrawSMT: failed to sent SMT to staker\");\r\n\r\n    uInfo.balance = uInfo.balance.sub(lpAmount);\r\n    \r\n    totalStaked = totalStaked.sub(lpAmount);\r\n    \r\n    emit Withdrawn(account, smtAmount, lpAmount);\r\n\r\n    return smtAmount;\r\n  }\r\n  \r\n\r\n  /**\r\n   * ///@notice Redeem SMT rewards from staking\r\n   */\r\n  function claimReward() \r\n    public \r\n    override\r\n    updateFixedReward(_msgSender())\r\n    updatePassiveReward(_msgSender())\r\n  {\r\n      UserInfo storage uInfo = userInfo[_msgSender()];\r\n\r\n      uint256 rewards = rewardsOf(_msgSender());\r\n\r\n      require(rewards > 0 , \"SmartFarm#stakeSMT: Not enough rewards to claim\");\r\n\r\n      TransferHelper.safeTransferFrom(address(comptroller.getSMT()), farmingRewardWallet, _msgSender(), rewards);\r\n\r\n      uInfo.rewards = 0;\r\n      emit Claimed(_msgSender(), rewards);\r\n  }\r\n  \r\n  function exit() external {\r\n    withdrawSMT(msg.sender, balanceOf(msg.sender));\r\n    claimReward();\r\n  }\r\n\r\n  /**\r\n   * Transfer smt token to contract.\r\n   * Swap half as BUSD, \r\n   * Add Liquidity => LP token Lock\r\n   */\r\n  function _tranferSmtToContract(address _from, address account, uint256 _amount) \r\n    private \r\n    returns(uint) \r\n  {\r\n    IERC20 smtToken = comptroller.getSMT();\r\n    IERC20 busdToken = comptroller.getBUSD();\r\n  \r\n    // Transfer SMT token from user to contract\r\n    uint256 beforeBalance = smtToken.balanceOf(address(this));\r\n    SafeERC20.safeTransferFrom(smtToken, _from, address(this), _amount);\r\n    uint256 amount = smtToken.balanceOf(address(this)).sub(beforeBalance);\r\n    require(amount > 0, \"SmartFarm#_transferSmtToContract: faild to transfer SMT token\");\r\n\r\n    // distribute farming tax\r\n    {\r\n      uint256 totalFarmingTax = _distributeFarmingTax(account, amount);\r\n      amount = amount.sub(totalFarmingTax);\r\n    }\r\n\r\n    // Swap half of SMT token to BUSD\r\n    uint256 half = amount.div(2);\r\n    uint256 otherHalf = amount.sub(half);\r\n\r\n    uint256 beforeBusdBalance = busdToken.balanceOf(address(this));\r\n    _swapTokensForBUSD(half);\r\n    uint256 newBusdBalance = busdToken.balanceOf(address(this)).sub(beforeBusdBalance);\r\n\r\n    // add liquidity\r\n    (, , uint liquidity) = _addLiquidity(otherHalf, newBusdBalance);\r\n\r\n    return liquidity;\r\n  }\r\n\r\n  /**\r\n   * Distribute farming tax to ...\r\n   */\r\n  function _distributeFarmingTax(\r\n    address account,\r\n    uint256 farmingAmount\r\n  )\r\n    internal\r\n    returns (uint256)\r\n  {\r\n    // distribute farming tax\r\n    // 10% goes to referral system\r\n    // 3% goes to golden tree pool\r\n    // 1% goes to development wallet\r\n    // 1% goes to passive global share\r\n    IERC20 smtToken = comptroller.getSMT();\r\n\r\n    uint256 farmingTaxReferralAmount = farmingAmount.mul(farmingTax_referral).div(10_000);\r\n    uint256 farmingTaxGoldenAmount = farmingAmount.mul(farmingTax_golden).div(10_000);\r\n    uint256 farmingTaxDevAmount = farmingAmount.mul(farmingTax_dev).div(10_000);\r\n    uint256 farmingTaxPassiveAmount = farmingAmount.mul(farmingTax_passive).div(10_000);\r\n\r\n    uint256 totalPaid = 0;\r\n\r\n    if(farmingTaxReferralAmount > 0) {\r\n      ISmartLadder smartLadder = comptroller.getSmartLadder();\r\n      TransferHelper.safeTransfer(address(smtToken), address(smartLadder), farmingTaxReferralAmount);\r\n      smartLadder.distributeFarmingTax(account);\r\n\r\n      totalPaid = totalPaid.add(farmingTaxReferralAmount);\r\n    }\r\n    \r\n    if(farmingTaxGoldenAmount > 0) {\r\n      IGoldenTreePool pool = comptroller.getGoldenTreePool();\r\n\r\n      TransferHelper.safeTransfer(address(smtToken), address(pool), farmingTaxGoldenAmount);\r\n      pool.notifyReward(farmingTaxGoldenAmount, account);\r\n\r\n      totalPaid = totalPaid.add(farmingTaxReferralAmount);\r\n    }\r\n\r\n    if(farmingTaxDevAmount > 0) {\r\n      TransferHelper.safeTransfer(address(smtToken), address(feeAddress), farmingTaxDevAmount);\r\n      totalPaid = totalPaid.add(farmingTaxReferralAmount);\r\n    }\r\n\r\n    if(farmingTaxPassiveAmount > 0) {\r\n      // TODO\r\n      // transfer smt to passive pool and sync\r\n      ISmartAchievement ach = comptroller.getSmartAchievement();\r\n\r\n      TransferHelper.safeTransfer(address(smtToken), address(ach), farmingTaxPassiveAmount);\r\n      ISmartAchievement(ach).swapDistribute();\r\n\r\n      totalPaid = totalPaid.add(farmingTaxPassiveAmount);\r\n    }\r\n\r\n    return totalPaid;\r\n  }\r\n\r\n\r\n  /**\r\n   * Transfer smt token to user.\r\n   * Remove liquidity\r\n   * Swap half as SMT, \r\n   */\r\n  function _tranferSmtToUser(address _to, uint256 _lpAmount) private returns(uint) {\r\n    if(_lpAmount == 0) {\r\n      return 0;\r\n    }\r\n    IERC20 smtToken = comptroller.getSMT();\r\n    IERC20 busdToken = comptroller.getBUSD();\r\n    IUniswapV2Router02 uniswapV2Router = comptroller.getUniswapV2Router();\r\n\r\n    // Tranfer Penalty Fee to fee address\r\n    uint256 feeAmount = _lpAmount.mul(unstakingFee).div(10_1000);\r\n\r\n    address pair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(address(smtToken), address(busdToken));\r\n    SafeERC20.safeTransfer(IERC20(pair), feeAddress, feeAmount);\r\n\r\n    // Remove liquidity from dex\r\n    (uint smtAmount, uint busdAmount) = _removeLiquidity(_lpAmount.sub(feeAmount));\r\n\r\n    // Swap BUSD to smt token\r\n    uint256 beforeBalance = smtToken.balanceOf(address(this));\r\n    _swapTokensForSMT(busdAmount);\r\n    uint256 amount = uint256(smtAmount).add(smtToken.balanceOf(address(this)).sub(beforeBalance));\r\n    \r\n    // Transfer SMT token to user\r\n    SafeERC20.safeTransfer(smtToken, _to, amount);\r\n    \r\n    return amount;\r\n  }\r\n\r\n  function _swapTokensForBUSD(uint256 tokenAmount) private {\r\n    IERC20 smtToken = comptroller.getSMT();\r\n    IERC20 busdToken = comptroller.getBUSD();\r\n    IUniswapV2Router02 uniswapV2Router = comptroller.getUniswapV2Router();\r\n\r\n    // generate the uniswap pair path of token -> busd\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(smtToken);\r\n    path[1] = address(busdToken);\r\n\r\n    smtToken.safeApprove(address(uniswapV2Router), tokenAmount);\r\n    \r\n    // make the swap\r\n    uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        tokenAmount,\r\n        0,\r\n        path,\r\n        address(this),\r\n        block.timestamp\r\n    );\r\n  }\r\n\r\n  function _swapTokensForSMT(uint256 tokenAmount) private {\r\n    IERC20 smtToken = comptroller.getSMT();\r\n    IERC20 busdToken = comptroller.getBUSD();\r\n    IUniswapV2Router02 uniswapV2Router = comptroller.getUniswapV2Router();\r\n\r\n    // generate the uniswap pair path of token -> busd\r\n    address[] memory path = new address[](2);\r\n    path[1] = address(smtToken);\r\n    path[0] = address(busdToken);\r\n\r\n    busdToken.safeApprove(address(uniswapV2Router), tokenAmount);\r\n    \r\n    // make the swap\r\n    uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        tokenAmount,\r\n        0,\r\n        path,\r\n        address(this),\r\n        block.timestamp\r\n    );\r\n  }\r\n\r\n  function _addLiquidity(uint256 tokenAmount, uint256 busdAmount) \r\n    private \r\n    returns (uint amountA, uint amountB, uint liquidity)\r\n  {\r\n    IERC20 smtToken = comptroller.getSMT();\r\n    IERC20 busdToken = comptroller.getBUSD();\r\n    IUniswapV2Router02 uniswapV2Router = comptroller.getUniswapV2Router();\r\n\r\n    // approve token transfer to cover all possible scenarios\r\n    smtToken.safeApprove(address(uniswapV2Router), tokenAmount);\r\n    busdToken.safeApprove(address(uniswapV2Router), busdAmount);\r\n    \r\n    // add the liquidity\r\n    (amountA, amountB, liquidity) = uniswapV2Router.addLiquidity(\r\n        address(smtToken),\r\n        address(busdToken),\r\n        tokenAmount,\r\n        busdAmount,\r\n        0, // slippage is unavoidable\r\n        0, // slippage is unavoidable\r\n        address(this),\r\n        block.timestamp\r\n    );\r\n  }\r\n\r\n\r\n  function _removeLiquidity(uint256 lpAmount) \r\n    private \r\n    returns (uint amountA, uint amountB)\r\n  {\r\n    IERC20 smtToken = comptroller.getSMT();\r\n    IERC20 busdToken = comptroller.getBUSD();\r\n    IUniswapV2Router02 uniswapV2Router = comptroller.getUniswapV2Router();\r\n\r\n    // approve token transfer to cover all possible scenarios\r\n    address pair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(address(smtToken), address(busdToken));\r\n    IERC20(pair).safeApprove(address(uniswapV2Router), lpAmount);\r\n    \r\n    \r\n    // add the liquidity\r\n    (amountA, amountB) = uniswapV2Router.removeLiquidity(\r\n        address(smtToken),\r\n        address(busdToken),\r\n        lpAmount,\r\n        0, // slippage is unavoidable\r\n        0, // slippage is unavoidable\r\n        address(this),\r\n        block.timestamp\r\n    );\r\n  }\r\n}"
    },
    "contracts/SmartArmy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * Smart Army License Contract\r\n * @author Liu\r\n */\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\n\r\nimport './libs/TransferHelper.sol';\r\n\r\nimport './interfaces/ISmartComp.sol';\r\nimport './interfaces/ISmartArmy.sol';\r\nimport './interfaces/ISmartLadder.sol';\r\nimport './interfaces/IUniswapRouter.sol';\r\nimport './interfaces/IUniswapFactory.sol';\r\n\r\ncontract SmartArmy is UUPSUpgradeable, OwnableUpgradeable, ISmartArmy {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  uint256 public constant LICENSE_EXPIRE = 6 * 30 * 24 * 3600; // 6 months\r\n\r\n  ISmartComp public comptroller;  \r\n  \r\n  FeeInfo public feeInfo;\r\n\r\n  /// @dev License Types\r\n  mapping(uint256 => LicenseType) public licenseTypes;\r\n\r\n  uint256 totalLicenses;\r\n  /// @dev User License Mapping  licenseId => License\r\n  mapping(uint256 => UserLicense) public licenses;\r\n  /// @dev User address => licenseId\r\n  mapping(address => uint256) public userLicenses;\r\n\r\n  /// @dev User Personal Information\r\n  mapping(address => UserPersonal) public userInfo;\r\n\r\n\r\n  /// @dev Events\r\n  event LicenseTypeUpdated(uint256 level, LicenseType _type);\r\n  event RegisterLicense(address account, UserLicense license);\r\n  event ActivatedLicense(address account, UserLicense license);\r\n  \r\n  event LiquidateLicense(address account, UserLicense license);\r\n  event ExtendLicense(address account, UserLicense license);\r\n  event TransferLicense(address account, UserLicense license);\r\n\r\n\r\n  function initialize(address _comp) public initializer {\r\n\t\t__Ownable_init();\r\n    __SmartArmy_init_unchained(_comp);\r\n  }\r\n\r\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\r\n\r\n\r\n  function __SmartArmy_init_unchained(address _comp)\r\n    internal\r\n    initializer\r\n  {\r\n      comptroller = ISmartComp(_comp);\r\n\r\n      feeInfo = FeeInfo({\r\n        penaltyFeePercent: 10,\r\n        extendFeeBNB: 10 ** 16, // 0.01 BNB\r\n        feeAddress: 0xc2A79DdAF7e95C141C20aa1B10F3411540562FF7\r\n      });\r\n\r\n      _initLicenseTypes();\r\n  }\r\n    \r\n  /**\r\n   * Initialize License types with default\r\n   * \r\n   */\r\n  function _initLicenseTypes() internal {\r\n    updateLicenseType(1, \"Trial\",       100 * 10 ** 18,    1, true);\r\n    updateLicenseType(2, \"Opportunist\", 1_000 * 10 ** 18,  3, true);\r\n    updateLicenseType(3, \"Runner\",      5_000 * 10 ** 18,  5, true);\r\n    updateLicenseType(4, \"Visionary\",   10_000 * 10 ** 18, 7, true);\r\n  }\r\n\r\n  /**\r\n    * @notice Sets a new comptroller\r\n    * @dev Admin function to set a new comptroller\r\n    */\r\n  function setComptroller(ISmartComp newComptroller) public onlyOwner {\r\n    // Ensure invoke comptroller.isComptroller() returns true\r\n    require(newComptroller.isComptroller(), \"marker method returned false\");\r\n\r\n    // Set comptroller to newComptroller\r\n    comptroller = newComptroller;\r\n  }\r\n\r\n  /**\r\n   * Update Fee Information\r\n   */\r\n  function updateFeeInfo(\r\n    uint256 _penaltyFeePercent,      // Stop License LP fee percent\r\n    uint256 _extendFeeBNB,       // Extend Fee LP fee percent\r\n    address _feeAddress\r\n  ) external onlyOwner {\r\n    require(_penaltyFeePercent < 1000, \"SmartArmy#updateFeeInfo: Too big penalty fee\");\r\n    \r\n    feeInfo.penaltyFeePercent = _penaltyFeePercent;\r\n    feeInfo.extendFeeBNB = _extendFeeBNB;\r\n    feeInfo.feeAddress = _feeAddress;\r\n  }\r\n  \r\n\r\n  /**\r\n   * Update License type\r\n   */\r\n  function updateLicenseType(\r\n    uint256 _level, \r\n    string memory _name,\r\n    uint256 _price,\r\n    uint256 _ladderLevel,\r\n    bool _isValid\r\n  ) \r\n    public \r\n    onlyOwner \r\n  {\r\n    require(_price > 0, \"SmartArmy#updateLicenseType: Invalid Price\");\r\n\r\n    LicenseType storage _type = licenseTypes[_level];\r\n    _type.level = _level;\r\n    _type.name  = _name;\r\n    _type.price = _price;\r\n    _type.ladderLevel = _ladderLevel;\r\n    _type.duration = LICENSE_EXPIRE;\r\n    _type.isValid = _isValid;\r\n\r\n    emit LicenseTypeUpdated(_level, _type);\r\n  } \r\n\r\n  /**\r\n   * Update License type\r\n   */\r\n  function updateLicenseTypePrice(\r\n    uint256 _level, \r\n    uint256 _price\r\n  ) \r\n    public \r\n    onlyOwner \r\n  {\r\n    require(_price > 0, \"SmartArmy#updateLicenseType: Invalid Price\");\r\n\r\n    LicenseType storage _type = licenseTypes[_level];\r\n    _type.price = _price;\r\n\r\n    emit LicenseTypeUpdated(_level, _type);\r\n  } \r\n\r\n  /**\r\n   * Start License\r\n   * \r\n   */\r\n  function registerLicense(\r\n    uint256 _level,\r\n    address _sponsor,\r\n    string memory _username, \r\n    string memory _telegram\r\n    ) \r\n      external \r\n    {\r\n    require(licenseOf(msg.sender).status == LicenseStatus.None\r\n      || licenseOf(msg.sender).status == LicenseStatus.Expired, \"SmartArmy#startLicense: already started\");\r\n\r\n    uint256 newLicenseId = totalLicenses.add(1);\r\n\r\n    LicenseType memory _type = licenseTypes[_level];\r\n    require(_type.isValid, \"SmartArmy#startLicense: Invalid License Level\");\r\n\r\n    UserLicense storage license = licenses[newLicenseId];\r\n    license.owner = _msgSender();\r\n    license.level = _level;\r\n    license.startAt = block.timestamp;\r\n    license.expireAt = block.timestamp + LICENSE_EXPIRE;\r\n    license.lpLocked = 0;\r\n    license.status  = LicenseStatus.Pending;\r\n\r\n    userLicenses[_msgSender()] = newLicenseId;\r\n\r\n    UserPersonal storage info = userInfo[_msgSender()];\r\n    info.username = _username;\r\n    info.telegram = _telegram;\r\n\r\n    ISmartLadder smartLadder = comptroller.getSmartLadder();\r\n    address prevSponsor = smartLadder.sponsorOf(msg.sender);\r\n    if(prevSponsor == address(0x0) && _sponsor != address(0x0)) {\r\n      smartLadder.registerSponsor(msg.sender, _sponsor);\r\n      info.sponsor  = _sponsor;\r\n    } else {\r\n      info.sponsor  = prevSponsor == address(0x0) ? _sponsor : prevSponsor;\r\n    }\r\n    \r\n    emit RegisterLicense(_msgSender(), license);\r\n  }\r\n\r\n  /**\r\n   * Activate License\r\n   * \r\n   */\r\n  function activateLicense() external {\r\n    UserLicense storage license = licenses[userLicenses[msg.sender]];\r\n    require(license.status == LicenseStatus.Pending, \"SmartArmy#activateLicense: not registered\");\r\n\r\n    LicenseType memory _type = licenseTypes[license.level];\r\n    require(_type.isValid, \"SmartArmy#activateLicense: Invalid License Level\");\r\n\r\n    // Transfer SMT token for License type to this contract\r\n    uint256 smtAmount = _type.price;\r\n    uint amount = _tranferSmtToContract(_msgSender(), smtAmount);\r\n    \r\n    uint256 liquidity = comptroller.getSmartFarm().stakeSMT(_msgSender(), amount);\r\n    require(liquidity > 0, \"SmartArmy#activateLicense: failed to add liquidity\");\r\n\r\n    license.activeAt = block.timestamp;\r\n    license.lpLocked = liquidity;\r\n    license.status  = LicenseStatus.Active;\r\n\r\n    emit ActivatedLicense(_msgSender(), license);\r\n  }\r\n\r\n  /**\r\n   * Liquidate License\r\n   *  \r\n   */\r\n  function liquidateLicense() external {\r\n    uint256 userLicenseId = userLicenses[_msgSender()];\r\n    UserLicense storage license = licenses[userLicenseId];\r\n    require(license.status == LicenseStatus.Active, \"SmartArmy#liquidateLicense: no license yet\");\r\n    require(license.expireAt <= block.timestamp, \"SmartArmy#liquidateLicense: still active\");\r\n\r\n    uint256 smtAmount = comptroller.getSmartFarm().withdrawSMT(_msgSender(), license.lpLocked);\r\n    require(smtAmount > 0, \"SmartArmy#liquidateLicense: failed to refund SMT\");\r\n\r\n    _tranferSmtToUser(_msgSender(), smtAmount);\r\n    \r\n    //remove license\r\n    license.owner = address(0x0);\r\n    license.lpLocked = 0;\r\n    license.status = LicenseStatus.Expired;\r\n\r\n    userLicenses[_msgSender()] = 0;\r\n\r\n    emit LiquidateLicense(_msgSender(), license);\r\n  }\r\n\r\n  /**\r\n   * Extend License\r\n   *  \r\n   */\r\n  function extendLicense() external {\r\n    uint256 userLicenseId = userLicenses[_msgSender()];\r\n    UserLicense storage license = licenses[userLicenseId];\r\n\r\n    require(license.status == LicenseStatus.Active, \"SmartArmy#extendLicense: no license yet\");\r\n    require(license.expireAt <= block.timestamp, \"SmartArmy#extendLicense: still active\");\r\n\r\n    // Transfer Extend fee to fee address\r\n    TransferHelper.safeTransferETH(feeInfo.feeAddress, feeInfo.extendFeeBNB);\r\n\r\n    license.activeAt = block.timestamp;\r\n    license.startAt = block.timestamp;\r\n    license.expireAt = block.timestamp + LICENSE_EXPIRE;\r\n    \r\n    emit ExtendLicense(_msgSender(), license);\r\n  }\r\n\r\n\r\n  /**\r\n   * Transfer License\r\n   *  \r\n   */\r\n  function transferLicense(address _to) external {\r\n    require(false, \"SmartArmy#transferLicense: not implemented yet\");\r\n    require(isActiveLicense(_msgSender()), \"SmartArmy#transferLicense: inactive license\");\r\n\r\n    uint256 userLicenseId = userLicenses[_msgSender()];\r\n    UserLicense storage license = licenses[userLicenseId];\r\n    \r\n    // TODO\r\n    // Transfer tranfer fee to fee address from msgSender\r\n    // If needed, notify to services about transferring license.\r\n\r\n    license.owner = _to;\r\n    userLicenses[_msgSender()] = 0;\r\n    userLicenses[_to] = userLicenseId;\r\n\r\n    emit TransferLicense(_msgSender(), license);\r\n  }\r\n\r\n\r\n  /**\r\n   * Transfer smt token to contract.\r\n   * Swap half as BUSD, \r\n   * Add Liquidity => LP token Lock\r\n   */\r\n  function _tranferSmtToContract(address _from, uint256 _amount) \r\n    private \r\n    returns(uint) \r\n  {\r\n    IERC20 smtToken = comptroller.getSMT();\r\n    \r\n    // Transfer SMT token from user to contract\r\n    uint256 beforeBalance = smtToken.balanceOf(address(this));\r\n    SafeERC20.safeTransferFrom(smtToken, _from, address(this), _amount);\r\n    uint256 amount = smtToken.balanceOf(address(this)).sub(beforeBalance);\r\n    require(amount > 0, \"SmartArmy#transferSmtToContract: faild to transfer SMT token\");\r\n\r\n    smtToken.safeApprove(address(comptroller.getSmartFarm()), amount);\r\n\r\n    return amount;\r\n  }\r\n\r\n  /**\r\n   * Transfer smt token to user.\r\n   */\r\n  function _tranferSmtToUser(address _to, uint256 _amount) private returns(uint) {\r\n    if(_amount == 0) {\r\n      return 0;\r\n    }\r\n    IERC20 smtToken = comptroller.getSMT();\r\n    \r\n    // Tranfer Penalty Fee to fee address\r\n    uint256 feeAmount = _amount.mul(feeInfo.penaltyFeePercent).div(1000);\r\n\r\n    SafeERC20.safeTransfer(smtToken, feeInfo.feeAddress, feeAmount);\r\n\r\n    // Transfer SMT token to user\r\n    SafeERC20.safeTransfer(smtToken, _to, _amount.sub(feeAmount));\r\n    \r\n    return _amount;\r\n  }\r\n\r\n  /**\r\n   * Get License of Account\r\n   */\r\n  function licenseOf(address account) \r\n    public \r\n    view\r\n    override\r\n    returns(UserLicense memory) \r\n  {\r\n      return licenses[userLicenses[account]];\r\n  }\r\n\r\n\r\n  /**\r\n   * Get Locked SMT-BUSD LP token amount on Farming contract\r\n   */\r\n  function lockedLPOf(address account) \r\n    public \r\n    view\r\n    override\r\n    returns(uint256) \r\n  {\r\n    return licenseOf(account).lpLocked;\r\n  }\r\n\r\n  /**\r\n   * Get Level of License Type\r\n   */\r\n  function licenseLevelOf(address account) \r\n    public \r\n    view\r\n    override\r\n    returns(uint256) \r\n  {\r\n    if(isActiveLicense(account)) {\r\n      UserLicense memory license = licenseOf(account);\r\n      LicenseType memory _type = licenseTypes[license.level];\r\n\r\n      return _type.ladderLevel;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check if license is Active status and not expired\r\n   */\r\n  function isActiveLicense(address account) \r\n    public \r\n    view \r\n    override\r\n    returns(bool)\r\n  {\r\n      UserLicense memory license = licenseOf(account);\r\n      return license.status == LicenseStatus.Active && license.expireAt > block.timestamp;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get License active duration from `from` to `to`\r\n   */\r\n  function licenseActiveDuration(\r\n    address account,\r\n    uint256 from,\r\n    uint256 to\r\n  )\r\n    public \r\n    view\r\n    override\r\n    returns (uint256, uint256) \r\n  {\r\n    UserLicense memory license = licenseOf(account);\r\n\r\n    uint256 start = license.activeAt >= from ? license.activeAt : from;\r\n    uint256 end = license.expireAt < to ? license.expireAt : to;\r\n\r\n    if(start >= end) {\r\n      // there is no activation duration\r\n      return (0, 0);\r\n    }\r\n\r\n    return (\r\n      start,\r\n      end\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if enabled intermediary\r\n   */\r\n  function isEnabledIntermediary(address account) \r\n    public \r\n    view \r\n    override\r\n    returns(bool)\r\n  {\r\n      UserLicense memory license = licenseOf(account);\r\n      return (license.status == LicenseStatus.Pending && block.timestamp > license.startAt + 12 * 3600) \r\n        || license.status == LicenseStatus.Active;\r\n  }\r\n}"
    },
    "contracts/SmartComp.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * License Based Service Contract\r\n * @author Liu\r\n */\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\n\r\nimport \"./interfaces/ISmartComp.sol\";\r\n\r\ncontract SmartComp is UUPSUpgradeable, OwnableUpgradeable, ISmartComp {\r\n\r\n  ISmartArmy public smartArmy;\r\n  ISmartLadder public smartLadder;\r\n  ISmartFarm public smartFarm;\r\n  IGoldenTreePool public goldenTreePool;\r\n  ISmartAchievement public smartAchievement;\r\n\r\n  IUniswapV2Router02 public uniswapV2Router;\r\n\r\n  IERC20 public smtToken;\r\n  IERC20 public busdToken;\r\n  \r\n  /// @notice Emitted when smart ladder is changed\r\n  event NewSmartLadder(ISmartLadder oldSmartLadder, ISmartLadder newSmartLadder);\r\n\r\n  /// @notice Emitted when smart army is changed\r\n  event NewSmartArmy(ISmartArmy oldSmartArmy, ISmartArmy newSmartArmy);\r\n\r\n  /// @notice Emitted when smart farm is changed\r\n  event NewSmartFarm(ISmartFarm oldSmartFarm, ISmartFarm newSmartFarm);\r\n\r\n  /// @notice Emitted when golden tree pool is changed\r\n  event NewGoldenTreePool(IGoldenTreePool oldPool, IGoldenTreePool newPool);\r\n\r\n  /// @notice Emitted when smart achievement system is changed\r\n  event NewSmartAchievement(ISmartAchievement oldAchievement, ISmartAchievement newAchievement);\r\n\r\n\r\n  function initialize() public initializer {\r\n\t\t__Ownable_init();\r\n    __SmartComp_init_unchained();\r\n  }\r\n\r\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\r\n\r\n\r\n  function __SmartComp_init_unchained()\r\n    internal\r\n    initializer\r\n  {\r\n    busdToken = IERC20(0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7);  // Testnet\r\n\r\n    // Pancake V2 router\r\n    IUniswapV2Router02 _uniswapRouter = IUniswapV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); \r\n    uniswapV2Router = _uniswapRouter;\r\n  }\r\n\r\n\r\n  /*** View Functions ***/\r\n  function isComptroller() public override pure returns(bool) {\r\n    return true;\r\n  }\r\n  \r\n\r\n  function getSMT() public override view returns(IERC20) {\r\n    return smtToken;\r\n  }\r\n\r\n  function getBUSD() public override view returns(IERC20) {\r\n    return busdToken;\r\n  }\r\n\r\n  function getUniswapV2Factory() public override view returns(address) {\r\n    return uniswapV2Router.factory();\r\n  }\r\n\r\n  function getWBNB() public override view returns(IERC20) {\r\n    return IERC20(uniswapV2Router.WETH());\r\n  }\r\n\r\n  function getUniswapV2Router() public override view returns(IUniswapV2Router02) {\r\n    return uniswapV2Router;\r\n  }\r\n\r\n  function getSmartArmy() public override view returns(ISmartArmy) {\r\n    return smartArmy;\r\n  }\r\n\r\n  function getSmartLadder() public override view returns(ISmartLadder) {\r\n    return smartLadder;\r\n  }\r\n\r\n  function getSmartFarm() public override view returns(ISmartFarm) {\r\n    return smartFarm;\r\n  }\r\n\r\n  function getGoldenTreePool() public override view returns(IGoldenTreePool) {\r\n    return goldenTreePool;\r\n  }\r\n\r\n  function getSmartAchievement() public override view returns(ISmartAchievement) {\r\n    return smartAchievement;\r\n  }\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  /**\r\n    * @notice Sets a new Uniswap Router 02 address contract for the comptroller\r\n    * \r\n    */\r\n  function setUniswapRouter(address _address) external onlyOwner {\r\n      uniswapV2Router = IUniswapV2Router02(_address);\r\n  }\r\n\r\n  /**\r\n    * @notice Sets a new BUSD contract for the comptroller\r\n    * \r\n    */\r\n  function setBUSD(address _address) external onlyOwner {\r\n      busdToken = IERC20(_address);\r\n  }\r\n\r\n  /**\r\n    * @notice Sets a new BUSD contract for the comptroller\r\n    * \r\n    */\r\n  function setSMT(address _address) external onlyOwner {\r\n      smtToken = IERC20(_address);\r\n  }\r\n\r\n  /**\r\n    * @notice Sets a new smart ladder contract for the comptroller\r\n    * \r\n    */\r\n  function setSmartLadder(address _address) external onlyOwner {\r\n    // Track the old for the comptroller\r\n    ISmartLadder oldSmartLadder = smartLadder;\r\n\r\n    smartLadder = ISmartLadder(_address);\r\n\r\n    emit NewSmartLadder(oldSmartLadder, smartLadder);\r\n  }\r\n\r\n  /**\r\n    * @notice Sets a new smart army contract for the comptroller\r\n    * \r\n    */\r\n  function setSmartArmy(address _address) external onlyOwner {\r\n    // Track the old for the comptroller\r\n    ISmartArmy oldSmartArmy = smartArmy;\r\n\r\n    smartArmy = ISmartArmy(_address);\r\n\r\n    emit NewSmartArmy(oldSmartArmy, smartArmy);\r\n  } \r\n\r\n  /**\r\n    * @notice Sets a new smart farm contract for the comptroller\r\n    * \r\n    */\r\n  function setSmartFarm(address _address) external onlyOwner {\r\n    // Track the old for the comptroller\r\n    ISmartFarm oldSmartFarm = smartFarm;\r\n\r\n    smartFarm = ISmartFarm(_address);\r\n\r\n    emit NewSmartFarm(oldSmartFarm, smartFarm);\r\n  } \r\n\r\n\r\n  /**\r\n    * @notice Sets a new golden tree pool contract for the comptroller\r\n    * \r\n    */\r\n  function setGoldenTreePool(address _address) external onlyOwner {\r\n    // Track the old for the comptroller\r\n    IGoldenTreePool oldGoldenTreePool = goldenTreePool;\r\n\r\n    goldenTreePool = IGoldenTreePool(_address);\r\n\r\n    emit NewGoldenTreePool(oldGoldenTreePool, goldenTreePool);\r\n  } \r\n\r\n\r\n  /**\r\n    * @notice Sets a new achievement system contract for the comptroller\r\n    * \r\n    */\r\n  function setSmartAchievement(address _address) external onlyOwner {\r\n    // Track the old for the comptroller\r\n    ISmartAchievement oldAchievement = smartAchievement;\r\n\r\n    smartAchievement = ISmartAchievement(_address);\r\n\r\n    emit NewSmartAchievement(oldAchievement, smartAchievement);\r\n  } \r\n}"
    },
    "contracts/SmartTokenCash.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * Smart Token Cash Token\r\n * @author Liu\r\n */\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\r\n\r\ncontract SmartTokenCash is ERC20, ERC20Burnable {\r\n  \r\n  constructor() \r\n    ERC20(\"Smart Token Cash\", \"SMTC\"){\r\n\r\n    // mint 1 million \r\n    _mint(0xc2A79DdAF7e95C141C20aa1B10F3411540562FF7, 1000_000 * 1e18);\r\n  }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}