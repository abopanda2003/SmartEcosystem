{
  "address": "0x037fcC914697fA3616463D9514e9824e7772aB30",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IGoldenTreePool",
          "name": "oldPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IGoldenTreePool",
          "name": "newPool",
          "type": "address"
        }
      ],
      "name": "NewGoldenTreePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISmartAchievement",
          "name": "oldAchievement",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISmartAchievement",
          "name": "newAchievement",
          "type": "address"
        }
      ],
      "name": "NewSmartAchievement",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISmartArmy",
          "name": "oldSmartArmy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISmartArmy",
          "name": "newSmartArmy",
          "type": "address"
        }
      ],
      "name": "NewSmartArmy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISmartFarm",
          "name": "oldSmartFarm",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISmartFarm",
          "name": "newSmartFarm",
          "type": "address"
        }
      ],
      "name": "NewSmartFarm",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISmartLadder",
          "name": "oldSmartLadder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISmartLadder",
          "name": "newSmartLadder",
          "type": "address"
        }
      ],
      "name": "NewSmartLadder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "busdToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBUSD",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGoldenTreePool",
      "outputs": [
        {
          "internalType": "contract IGoldenTreePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSMT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSmartAchievement",
      "outputs": [
        {
          "internalType": "contract ISmartAchievement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSmartArmy",
      "outputs": [
        {
          "internalType": "contract ISmartArmy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSmartFarm",
      "outputs": [
        {
          "internalType": "contract ISmartFarm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSmartLadder",
      "outputs": [
        {
          "internalType": "contract ISmartLadder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapV2Factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWBNB",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "goldenTreePool",
      "outputs": [
        {
          "internalType": "contract IGoldenTreePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isComptroller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setBUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setGoldenTreePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setSMT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setSmartAchievement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setSmartArmy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setSmartFarm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setSmartLadder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setUniswapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartAchievement",
      "outputs": [
        {
          "internalType": "contract ISmartAchievement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartArmy",
      "outputs": [
        {
          "internalType": "contract ISmartArmy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartFarm",
      "outputs": [
        {
          "internalType": "contract ISmartFarm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartLadder",
      "outputs": [
        {
          "internalType": "contract ISmartLadder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smtToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b7aa29d929efbf43f11d7c076488576ea8026b3b08dd4e9cf4208c4fb83b266",
  "receipt": {
    "to": null,
    "from": "0x153c55C7dE2697AC2EEa969fcc952e2e2b43762f",
    "contractAddress": "0x037fcC914697fA3616463D9514e9824e7772aB30",
    "transactionIndex": 11,
    "gasUsed": "1558604",
    "logsBloom": "0x
    "blockHash": "0x32079267bd68db24a57bd6cc0cdf94d22f58bf10679dd96b9563b616405a74ee",
    "transactionHash": "0x6b7aa29d929efbf43f11d7c076488576ea8026b3b08dd4e9cf4208c4fb83b266",
    "logs": [],
    "blockNumber": 16661974,
    "cumulativeGasUsed": "3042662",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4f3d496aad5f041245e369b5dfba6406",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IGoldenTreePool\",\"name\":\"oldPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IGoldenTreePool\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"NewGoldenTreePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISmartAchievement\",\"name\":\"oldAchievement\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISmartAchievement\",\"name\":\"newAchievement\",\"type\":\"address\"}],\"name\":\"NewSmartAchievement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISmartArmy\",\"name\":\"oldSmartArmy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISmartArmy\",\"name\":\"newSmartArmy\",\"type\":\"address\"}],\"name\":\"NewSmartArmy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISmartFarm\",\"name\":\"oldSmartFarm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISmartFarm\",\"name\":\"newSmartFarm\",\"type\":\"address\"}],\"name\":\"NewSmartFarm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISmartLadder\",\"name\":\"oldSmartLadder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISmartLadder\",\"name\":\"newSmartLadder\",\"type\":\"address\"}],\"name\":\"NewSmartLadder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"busdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGoldenTreePool\",\"outputs\":[{\"internalType\":\"contract IGoldenTreePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSMT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSmartAchievement\",\"outputs\":[{\"internalType\":\"contract ISmartAchievement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSmartArmy\",\"outputs\":[{\"internalType\":\"contract ISmartArmy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSmartFarm\",\"outputs\":[{\"internalType\":\"contract ISmartFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSmartLadder\",\"outputs\":[{\"internalType\":\"contract ISmartLadder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV2Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWBNB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldenTreePool\",\"outputs\":[{\"internalType\":\"contract IGoldenTreePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGoldenTreePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSMT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSmartAchievement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSmartArmy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSmartFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSmartLadder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartAchievement\",\"outputs\":[{\"internalType\":\"contract ISmartAchievement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartArmy\",\"outputs\":[{\"internalType\":\"contract ISmartArmy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartFarm\",\"outputs\":[{\"internalType\":\"contract ISmartFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartLadder\",\"outputs\":[{\"internalType\":\"contract ISmartLadder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"NewGoldenTreePool(address,address)\":{\"notice\":\"Emitted when golden tree pool is changed\"},\"NewSmartAchievement(address,address)\":{\"notice\":\"Emitted when smart achievement system is changed\"},\"NewSmartArmy(address,address)\":{\"notice\":\"Emitted when smart army is changed\"},\"NewSmartFarm(address,address)\":{\"notice\":\"Emitted when smart farm is changed\"},\"NewSmartLadder(address,address)\":{\"notice\":\"Emitted when smart ladder is changed\"}},\"kind\":\"user\",\"methods\":{\"setBUSD(address)\":{\"notice\":\"Sets a new BUSD contract for the comptroller \"},\"setGoldenTreePool(address)\":{\"notice\":\"Sets a new golden tree pool contract for the comptroller \"},\"setSMT(address)\":{\"notice\":\"Sets a new BUSD contract for the comptroller \"},\"setSmartAchievement(address)\":{\"notice\":\"Sets a new achievement system contract for the comptroller \"},\"setSmartArmy(address)\":{\"notice\":\"Sets a new smart army contract for the comptroller \"},\"setSmartFarm(address)\":{\"notice\":\"Sets a new smart farm contract for the comptroller \"},\"setSmartLadder(address)\":{\"notice\":\"Sets a new smart ladder contract for the comptroller \"},\"setUniswapRouter(address)\":{\"notice\":\"Sets a new Uniswap Router 02 address contract for the comptroller \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SmartComp.sol\":\"SmartComp\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x50edf60d06a03639b99ddbe2f1b03c6f7cc1f1a029400ce3ec8db0270d58ef58\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0a63417803194fa5b2b9505b36dbeb1e3cdf04a23dd89ac4c27052324839b827\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"contracts/SmartComp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * License Based Service Contract\\n * @author Liu\\n */\\n\\npragma solidity 0.8.4;\\n\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/ISmartComp.sol\\\";\\n\\ncontract SmartComp is UUPSUpgradeable, OwnableUpgradeable, ISmartComp {\\n\\n  ISmartArmy public smartArmy;\\n  ISmartLadder public smartLadder;\\n  ISmartFarm public smartFarm;\\n  IGoldenTreePool public goldenTreePool;\\n  ISmartAchievement public smartAchievement;\\n\\n  IUniswapV2Router02 public uniswapV2Router;\\n\\n  IERC20 public smtToken;\\n  IERC20 public busdToken;\\n  \\n  /// @notice Emitted when smart ladder is changed\\n  event NewSmartLadder(ISmartLadder oldSmartLadder, ISmartLadder newSmartLadder);\\n\\n  /// @notice Emitted when smart army is changed\\n  event NewSmartArmy(ISmartArmy oldSmartArmy, ISmartArmy newSmartArmy);\\n\\n  /// @notice Emitted when smart farm is changed\\n  event NewSmartFarm(ISmartFarm oldSmartFarm, ISmartFarm newSmartFarm);\\n\\n  /// @notice Emitted when golden tree pool is changed\\n  event NewGoldenTreePool(IGoldenTreePool oldPool, IGoldenTreePool newPool);\\n\\n  /// @notice Emitted when smart achievement system is changed\\n  event NewSmartAchievement(ISmartAchievement oldAchievement, ISmartAchievement newAchievement);\\n\\n\\n  function initialize() public initializer {\\n\\t\\t__Ownable_init();\\n    __SmartComp_init_unchained();\\n  }\\n\\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n\\n  function __SmartComp_init_unchained()\\n    internal\\n    initializer\\n  {\\n    busdToken = IERC20(0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7);  // Testnet\\n\\n    // Pancake V2 router\\n    IUniswapV2Router02 _uniswapRouter = IUniswapV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); \\n    uniswapV2Router = _uniswapRouter;\\n  }\\n\\n\\n  /*** View Functions ***/\\n  function isComptroller() external override pure returns(bool) {\\n    return true;\\n  }\\n  \\n\\n  function getSMT() external override view returns(IERC20) {\\n    return smtToken;\\n  }\\n\\n  function getBUSD() external override view returns(IERC20) {\\n    return busdToken;\\n  }\\n\\n  function getUniswapV2Factory() external override view returns(address) {\\n    return uniswapV2Router.factory();\\n  }\\n\\n  function getWBNB() external override view returns(IERC20) {\\n    return IERC20(uniswapV2Router.WETH());\\n  }\\n\\n  function getUniswapV2Router() external override view returns(IUniswapV2Router02) {\\n    return uniswapV2Router;\\n  }\\n\\n  function getSmartArmy() external override view returns(ISmartArmy) {\\n    return smartArmy;\\n  }\\n\\n  function getSmartLadder() external override view returns(ISmartLadder) {\\n    return smartLadder;\\n  }\\n\\n  function getSmartFarm() external override view returns(ISmartFarm) {\\n    return smartFarm;\\n  }\\n\\n  function getGoldenTreePool() external override view returns(IGoldenTreePool) {\\n    return goldenTreePool;\\n  }\\n\\n  function getSmartAchievement() external override view returns(ISmartAchievement) {\\n    return smartAchievement;\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  /**\\n    * @notice Sets a new Uniswap Router 02 address contract for the comptroller\\n    * \\n    */\\n  function setUniswapRouter(address _address) external onlyOwner {\\n      uniswapV2Router = IUniswapV2Router02(_address);\\n  }\\n\\n  /**\\n    * @notice Sets a new BUSD contract for the comptroller\\n    * \\n    */\\n  function setBUSD(address _address) external onlyOwner {\\n      busdToken = IERC20(_address);\\n  }\\n\\n  /**\\n    * @notice Sets a new BUSD contract for the comptroller\\n    * \\n    */\\n  function setSMT(address _address) external onlyOwner {\\n      smtToken = IERC20(_address);\\n  }\\n\\n  /**\\n    * @notice Sets a new smart ladder contract for the comptroller\\n    * \\n    */\\n  function setSmartLadder(address _address) external onlyOwner {\\n    // Track the old for the comptroller\\n    ISmartLadder oldSmartLadder = smartLadder;\\n\\n    smartLadder = ISmartLadder(_address);\\n\\n    emit NewSmartLadder(oldSmartLadder, smartLadder);\\n  }\\n\\n  /**\\n    * @notice Sets a new smart army contract for the comptroller\\n    * \\n    */\\n  function setSmartArmy(address _address) external onlyOwner {\\n    // Track the old for the comptroller\\n    ISmartArmy oldSmartArmy = smartArmy;\\n\\n    smartArmy = ISmartArmy(_address);\\n\\n    emit NewSmartArmy(oldSmartArmy, smartArmy);\\n  } \\n\\n  /**\\n    * @notice Sets a new smart farm contract for the comptroller\\n    * \\n    */\\n  function setSmartFarm(address _address) external onlyOwner {\\n    // Track the old for the comptroller\\n    ISmartFarm oldSmartFarm = smartFarm;\\n\\n    smartFarm = ISmartFarm(_address);\\n\\n    emit NewSmartFarm(oldSmartFarm, smartFarm);\\n  } \\n\\n\\n  /**\\n    * @notice Sets a new golden tree pool contract for the comptroller\\n    * \\n    */\\n  function setGoldenTreePool(address _address) external onlyOwner {\\n    // Track the old for the comptroller\\n    IGoldenTreePool oldGoldenTreePool = goldenTreePool;\\n\\n    goldenTreePool = IGoldenTreePool(_address);\\n\\n    emit NewGoldenTreePool(oldGoldenTreePool, goldenTreePool);\\n  } \\n\\n\\n  /**\\n    * @notice Sets a new achievement system contract for the comptroller\\n    * \\n    */\\n  function setSmartAchievement(address _address) external onlyOwner {\\n    // Track the old for the comptroller\\n    ISmartAchievement oldAchievement = smartAchievement;\\n\\n    smartAchievement = ISmartAchievement(_address);\\n\\n    emit NewSmartAchievement(oldAchievement, smartAchievement);\\n  } \\n}\",\"keccak256\":\"0x95bd60a0ccb1c3f7273e69dcb1dcb8afc67fc83e25da7e55442d87231ba070c0\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldenTreePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IGoldenTreePool {\\n    function swapDistribute() external;\\n    function notifyReward(uint256 amount, address account) external;\\n}\\n\",\"keccak256\":\"0x0f9b1f1b14eca9873524a3316fda040d3400c56c09eb7b4ac3df18964336aae5\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartAchievement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ISmartAchievement {\\n\\n    struct NobilityType {\\n        string            title;               // Title of Nobility Folks Baron Count Viscount Earl Duke Prince King\\n        uint256           growthRequried;      // Required growth token\\n        uint256           passiveShare;        // Passive share percent\\n\\n        uint256[]         chestSMTRewards;\\n        uint256[]         chestSMTCRewards;\\n    }\\n\\n\\n    function notifyGrowth(address account, uint256 oldGrowth, uint256 newGrowth) external returns(bool);\\n    function claimReward() external;\\n    function claimChestReward() external;\\n    function swapDistribute() external;\\n    \\n    function isUpgradeable(uint256 from, uint256 to) external view returns(bool, uint256);\\n    function nobilityOf(address account) external view returns(NobilityType memory);\\n    function nobilityTitleOf(address account) external view returns(string memory);\\n}\\n\",\"keccak256\":\"0x577c69397493aa9aca5b25daf0d9591807212af258a89964b67497faa8e5b40d\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartArmy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ISmartArmy {\\n    /// @dev License Types\\n    struct LicenseType {\\n        uint256  level;        // level\\n        string   name;         // Trial, Opportunist, Runner, Visionary\\n        uint256  price;        // 100, 1000, 5000, 10,000\\n        uint256  ladderLevel;  // Level of referral system with this license\\n        uint256  duration;     // default 6 months\\n        bool     isValid;\\n    }\\n\\n    enum LicenseStatus {\\n        None,\\n        Pending,\\n        Active,\\n        Expired\\n    }\\n\\n    /// @dev User information on license\\n    struct UserLicense {\\n        address owner;\\n        uint256 level;\\n        uint256 startAt;\\n        uint256 activeAt;\\n        uint256 expireAt;\\n        uint256 lpLocked;\\n\\n        LicenseStatus status;\\n    }\\n\\n    /// @dev User Personal Information\\n    struct UserPersonal {\\n        address sponsor;\\n        string username;\\n        string telegram;\\n    }\\n\\n    /// @dev Fee Info \\n    struct FeeInfo {\\n        uint256 penaltyFeePercent;      // liquidate License LP fee percent\\n        uint256 extendFeeBNB;       // extend Fee as BNB\\n        address feeAddress;\\n    }\\n    \\n    function licenseOf(address account) external view returns(UserLicense memory);\\n    function lockedLPOf(address account) external view returns(uint256);\\n    function isActiveLicense(address account) external view returns(bool);\\n    function isEnabledIntermediary(address account) external view returns(bool);\\n    function licenseLevelOf(address account) external view returns(uint256);\\n    function licenseActiveDuration(address account, uint256 from, uint256 to) external view returns(uint256, uint256);\\n}\\n\",\"keccak256\":\"0x25f63030cf93bf3261bc71f3a14baf7ccbe11e7549c7afe0c08250fa019d621e\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartComp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport './ISmartArmy.sol';\\nimport './ISmartLadder.sol';\\nimport './ISmartFarm.sol';\\nimport './IGoldenTreePool.sol';\\nimport './ISmartAchievement.sol';\\nimport './IUniswapRouter.sol';\\n\\n// Smart Comptroller Interface\\ninterface ISmartComp {\\n    function isComptroller() external pure returns(bool);\\n    function getSMT() external view returns(IERC20);\\n    function getBUSD() external view returns(IERC20);\\n    function getWBNB() external view returns(IERC20);\\n\\n    function getUniswapV2Router() external view returns(IUniswapV2Router02);\\n\\n    function getUniswapV2Factory() external view returns(address);\\n\\n    function getSmartArmy() external view returns(ISmartArmy);\\n\\n    function getSmartLadder() external view returns(ISmartLadder);\\n\\n    function getSmartFarm() external view returns(ISmartFarm);\\n\\n    function getGoldenTreePool() external view returns(IGoldenTreePool);\\n\\n    function getSmartAchievement() external view returns(ISmartAchievement);\\n}\\n\",\"keccak256\":\"0x5c32a845d95a1bc6ba10e80a638d4412fc03d198115c2080dd34ae06f4208cec\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ISmartFarm {\\n    /// @dev Pool Information\\n    struct PoolInfo {\\n        address stakingTokenAddress;     // staking contract address\\n        address rewardTokenAddress;      // reward token contract\\n\\n        uint256 rewardPerDay;            // reward percent per day\\n\\n        uint unstakingFee;\\n            \\n        uint256 totalStaked;             /* How many tokens we have successfully staked */\\n    }\\n\\n\\n    struct UserInfo {\\n        uint256 balance;\\n        uint256 rewards;\\n        uint256 rewardPerTokenPaid;     // User rewards per token paid for passive\\n        uint256 lastUpdated;\\n    }\\n    \\n    function stakeSMT(address account, uint256 amount) external returns(uint256);\\n    function withdrawSMT(address account, uint256 amount) external returns(uint256);\\n    function claimReward() external;\\n\\n    function notifyRewardAmount(uint _reward) external;\\n}\\n\",\"keccak256\":\"0x75b90c575820cc53f1153650fd7c4c0f9c10dc7759ccf21a4f04830c78a366f0\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartLadder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ISmartLadder {\\n    /// @dev Ladder system activities\\n    struct Activity {\\n        string      name;         // buytax, farming, ...\\n        uint16[7]   share;        // share percentage\\n        address     token;        // share token address\\n        bool        enabled;      // enabled or disabled temporally\\n        bool        isValid;\\n        uint256     totalDistributed; // total distributed\\n    }\\n    \\n    function registerSponsor(address _user, address _sponsor) external;\\n    function distributeTax(uint256 id, address account) external; \\n    function distributeBuyTax(address account) external; \\n    function distributeFarmingTax(address account) external; \\n    function distributeSmartLivingTax(address account) external; \\n    function distributeEcosystemTax(address account) external; \\n    \\n    function activity(uint256 id) external view returns(Activity memory);\\n    function sponsorOf(address account) external view returns(address);\\n    function sponsorsOf(address account, uint count) external returns (address[] memory); \\n}\\n\",\"keccak256\":\"0xdb9ba1c5b7ff2f6296285acd1dd17cc9c5b06b157d24b1d05d61c593fa802af3\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\n\\n\\n// pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\",\"keccak256\":\"0xe1374fd93617dbd62d570bf4bc869d063fa911aea6c74584d5031eda2e909513\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b60805234801561001757600080fd5b5060805160601c611b506100526000396000818161097601528181610a0c01528181610c7c01528181610d120152610e0d0152611b506000f3fe6080604052600436106102175760003560e01c80636ac3861a1161011d57806399bd7d8f116100b0578063dc627a981161007f578063de0e701411610064578063de0e7014146105cb578063ec87185d146105eb578063f2fde38b1461060b57600080fd5b8063dc627a981461058d578063dd445c31146105ad57600080fd5b806399bd7d8f1461050f578063bdbfceca1461052d578063bea9849e1461054d578063c3adf9f91461056d57600080fd5b80638129fc1c116100ec5780638129fc1c1461049e5780638da5cb5b146104b357806391a95b25146104d15780639805f01b146104ef57600080fd5b80636ac3861a146104365780636e0d07531461044b578063715018a6146104695780637d627d4c1461047e57600080fd5b80632c50b40d116101b05780634654b7a81161017f5780634f1ef286116101645780634f1ef286146103e257806352d1902d146103f5578063564bde3f1461041857600080fd5b80634654b7a8146103a25780634b3b9cb4146103c257600080fd5b80632c50b40d146103245780633066ebe614610344578063350c7d29146103625780633659cfe61461038257600080fd5b80630962348e116101ec5780630962348e146102a657806311937dc9146102c65780631694505e146102e657806329166e411461030657600080fd5b806271c1751461021c5780627e3dd2146102535780630103982d1461026f57806302839c9b14610284575b600080fd5b34801561022857600080fd5b5060ce546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561025f57600080fd5b506040516001815260200161024a565b34801561027b57600080fd5b5061023661062b565b34801561029057600080fd5b506102a461029f366004611925565b6106c6565b005b3480156102b257600080fd5b5060c954610236906001600160a01b031681565b3480156102d257600080fd5b506102a46102e1366004611925565b610747565b3480156102f257600080fd5b5060ce54610236906001600160a01b031681565b34801561031257600080fd5b5060d0546001600160a01b0316610236565b34801561033057600080fd5b506102a461033f366004611925565b610803565b34801561035057600080fd5b5060cb546001600160a01b0316610236565b34801561036e57600080fd5b506102a461037d366004611925565b6108b7565b34801561038e57600080fd5b506102a461039d366004611925565b61096b565b3480156103ae57600080fd5b506102a46103bd366004611925565b610b09565b3480156103ce57600080fd5b506102a46103dd366004611925565b610bbd565b6102a46103f036600461195d565b610c71565b34801561040157600080fd5b5061040a610e00565b60405190815260200161024a565b34801561042457600080fd5b5060cd546001600160a01b0316610236565b34801561044257600080fd5b50610236610ec5565b34801561045757600080fd5b5060c9546001600160a01b0316610236565b34801561047557600080fd5b506102a4610f23565b34801561048a57600080fd5b5060cb54610236906001600160a01b031681565b3480156104aa57600080fd5b506102a4610f89565b3480156104bf57600080fd5b506097546001600160a01b0316610236565b3480156104dd57600080fd5b5060ca546001600160a01b0316610236565b3480156104fb57600080fd5b506102a461050a366004611925565b611060565b34801561051b57600080fd5b5060cc546001600160a01b0316610236565b34801561053957600080fd5b5060ca54610236906001600160a01b031681565b34801561055957600080fd5b506102a4610568366004611925565b6110dc565b34801561057957600080fd5b5060cd54610236906001600160a01b031681565b34801561059957600080fd5b5060cc54610236906001600160a01b031681565b3480156105b957600080fd5b5060cf546001600160a01b0316610236565b3480156105d757600080fd5b5060d054610236906001600160a01b031681565b3480156105f757600080fd5b5060cf54610236906001600160a01b031681565b34801561061757600080fd5b506102a4610626366004611925565b611158565b60ce54604080517fc45a015500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163c45a0155916004808301926020929190829003018186803b15801561068957600080fd5b505afa15801561069d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c19190611941565b905090565b6097546001600160a01b031633146107255760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60cf80546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b031633146107a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b60cb80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f5e60868b67ea71bce4b4a21e8c0f0ac4e6db30249bc6d34f83685ed22c3ccf2091015b60405180910390a15050565b6097546001600160a01b0316331461085d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b60ca80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f844dcc7bf0c9b2dad005a8fd7a2968bd79511eb65b7f1e51b4dbfc053317761391016107f7565b6097546001600160a01b031633146109115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b60cd80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ffff320da164421caa6e50a928420d3af7d911bcf5ec06cc0a6dac369a4f68acf91016107f7565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a0a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161071c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a657f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610ae15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161071c565b610aea81611237565b60408051600080825260208201909252610b0691839190611291565b50565b6097546001600160a01b03163314610b635760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b60c980546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527fffd3cec1839f24e1c2186c60b798f66cb357faa1380db969b77ee7c3a7c2ebc891016107f7565b6097546001600160a01b03163314610c175760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b60cc80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f75d25e61ea407f503bbf05202b7119c3a17f2e07207e0c470a27212d08ddb5e991016107f7565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d105760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161071c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d6b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610de75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161071c565b610df082611237565b610dfc82826001611291565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ea05760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161071c565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60ce54604080517fad5c464800000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163ad5c4648916004808301926020929190829003018186803b15801561068957600080fd5b6097546001600160a01b03163314610f7d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b610f876000611445565b565b600054610100900460ff16610fa45760005460ff1615610fa8565b303b155b61101a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161071c565b600054610100900460ff1615801561103c576000805461ffff19166101011790555b611044611497565b61104c61151c565b8015610b06576000805461ff001916905550565b6097546001600160a01b031633146110ba5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b60d080546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b031633146111365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b60ce80546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b031633146111b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b6001600160a01b03811661122e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161071c565b610b0681611445565b6097546001600160a01b03163314610b065760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156112c9576112c48361162b565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561130257600080fd5b505afa925050508015611332575060408051601f3d908101601f1916820190925261132f91810190611a1c565b60015b6113a45760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161071c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146114395760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161071c565b506112c48383836116e9565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166115145760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161071c565b610f87611714565b600054610100900460ff166115375760005460ff161561153b565b303b155b6115ad5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161071c565b600054610100900460ff161580156115cf576000805461ffff19166101011790555b60d080546001600160a01b03199081167378867bbeef44f2326bf8ddd1941a4439382ef2a71790915560ce8054909116739ac64cc6e4415144c455bd8e4837fea55603e5c31790558015610b06576000805461ff001916905550565b6001600160a01b0381163b6116a85760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161071c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6116f28361179a565b6000825111806116ff5750805b156112c45761170e83836117da565b50505050565b600054610100900460ff166117915760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161071c565b610f8733611445565b6117a38161162b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6118595760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161071c565b600080846001600160a01b0316846040516118749190611a34565b600060405180830381855af49150503d80600081146118af576040519150601f19603f3d011682016040523d82523d6000602084013e6118b4565b606091505b50915091506118dc8282604051806060016040528060278152602001611af4602791396118e5565b95945050505050565b606083156118f457508161191e565b8251156119045782518084602001fd5b8160405162461bcd60e51b815260040161071c9190611a50565b9392505050565b600060208284031215611936578081fd5b813561191e81611ade565b600060208284031215611952578081fd5b815161191e81611ade565b6000806040838503121561196f578081fd5b823561197a81611ade565b9150602083013567ffffffffffffffff80821115611996578283fd5b818501915085601f8301126119a9578283fd5b8135818111156119bb576119bb611aaf565b604051601f8201601f19908116603f011681019083821181831017156119e3576119e3611aaf565b816040528281528860208487010111156119fb578586fd5b82602086016020830137856020848301015280955050505050509250929050565b600060208284031215611a2d578081fd5b5051919050565b60008251611a46818460208701611a83565b9190910192915050565b6020815260008251806020840152611a6f816040850160208701611a83565b601f01601f19169190910160400192915050565b60005b83811015611a9e578181015183820152602001611a86565b8381111561170e5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b0381168114610b0657600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209e7be94fe6d201c163ce0be1f616e96b56593a4806ffef26b8f4530bc7542f1264736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102175760003560e01c80636ac3861a1161011d57806399bd7d8f116100b0578063dc627a981161007f578063de0e701411610064578063de0e7014146105cb578063ec87185d146105eb578063f2fde38b1461060b57600080fd5b8063dc627a981461058d578063dd445c31146105ad57600080fd5b806399bd7d8f1461050f578063bdbfceca1461052d578063bea9849e1461054d578063c3adf9f91461056d57600080fd5b80638129fc1c116100ec5780638129fc1c1461049e5780638da5cb5b146104b357806391a95b25146104d15780639805f01b146104ef57600080fd5b80636ac3861a146104365780636e0d07531461044b578063715018a6146104695780637d627d4c1461047e57600080fd5b80632c50b40d116101b05780634654b7a81161017f5780634f1ef286116101645780634f1ef286146103e257806352d1902d146103f5578063564bde3f1461041857600080fd5b80634654b7a8146103a25780634b3b9cb4146103c257600080fd5b80632c50b40d146103245780633066ebe614610344578063350c7d29146103625780633659cfe61461038257600080fd5b80630962348e116101ec5780630962348e146102a657806311937dc9146102c65780631694505e146102e657806329166e411461030657600080fd5b806271c1751461021c5780627e3dd2146102535780630103982d1461026f57806302839c9b14610284575b600080fd5b34801561022857600080fd5b5060ce546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561025f57600080fd5b506040516001815260200161024a565b34801561027b57600080fd5b5061023661062b565b34801561029057600080fd5b506102a461029f366004611925565b6106c6565b005b3480156102b257600080fd5b5060c954610236906001600160a01b031681565b3480156102d257600080fd5b506102a46102e1366004611925565b610747565b3480156102f257600080fd5b5060ce54610236906001600160a01b031681565b34801561031257600080fd5b5060d0546001600160a01b0316610236565b34801561033057600080fd5b506102a461033f366004611925565b610803565b34801561035057600080fd5b5060cb546001600160a01b0316610236565b34801561036e57600080fd5b506102a461037d366004611925565b6108b7565b34801561038e57600080fd5b506102a461039d366004611925565b61096b565b3480156103ae57600080fd5b506102a46103bd366004611925565b610b09565b3480156103ce57600080fd5b506102a46103dd366004611925565b610bbd565b6102a46103f036600461195d565b610c71565b34801561040157600080fd5b5061040a610e00565b60405190815260200161024a565b34801561042457600080fd5b5060cd546001600160a01b0316610236565b34801561044257600080fd5b50610236610ec5565b34801561045757600080fd5b5060c9546001600160a01b0316610236565b34801561047557600080fd5b506102a4610f23565b34801561048a57600080fd5b5060cb54610236906001600160a01b031681565b3480156104aa57600080fd5b506102a4610f89565b3480156104bf57600080fd5b506097546001600160a01b0316610236565b3480156104dd57600080fd5b5060ca546001600160a01b0316610236565b3480156104fb57600080fd5b506102a461050a366004611925565b611060565b34801561051b57600080fd5b5060cc546001600160a01b0316610236565b34801561053957600080fd5b5060ca54610236906001600160a01b031681565b34801561055957600080fd5b506102a4610568366004611925565b6110dc565b34801561057957600080fd5b5060cd54610236906001600160a01b031681565b34801561059957600080fd5b5060cc54610236906001600160a01b031681565b3480156105b957600080fd5b5060cf546001600160a01b0316610236565b3480156105d757600080fd5b5060d054610236906001600160a01b031681565b3480156105f757600080fd5b5060cf54610236906001600160a01b031681565b34801561061757600080fd5b506102a4610626366004611925565b611158565b60ce54604080517fc45a015500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163c45a0155916004808301926020929190829003018186803b15801561068957600080fd5b505afa15801561069d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c19190611941565b905090565b6097546001600160a01b031633146107255760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60cf80546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b031633146107a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b60cb80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f5e60868b67ea71bce4b4a21e8c0f0ac4e6db30249bc6d34f83685ed22c3ccf2091015b60405180910390a15050565b6097546001600160a01b0316331461085d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b60ca80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f844dcc7bf0c9b2dad005a8fd7a2968bd79511eb65b7f1e51b4dbfc053317761391016107f7565b6097546001600160a01b031633146109115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b60cd80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ffff320da164421caa6e50a928420d3af7d911bcf5ec06cc0a6dac369a4f68acf91016107f7565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a0a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161071c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a657f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610ae15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161071c565b610aea81611237565b60408051600080825260208201909252610b0691839190611291565b50565b6097546001600160a01b03163314610b635760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b60c980546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527fffd3cec1839f24e1c2186c60b798f66cb357faa1380db969b77ee7c3a7c2ebc891016107f7565b6097546001600160a01b03163314610c175760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b60cc80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f75d25e61ea407f503bbf05202b7119c3a17f2e07207e0c470a27212d08ddb5e991016107f7565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d105760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161071c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d6b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610de75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161071c565b610df082611237565b610dfc82826001611291565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ea05760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161071c565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60ce54604080517fad5c464800000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163ad5c4648916004808301926020929190829003018186803b15801561068957600080fd5b6097546001600160a01b03163314610f7d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b610f876000611445565b565b600054610100900460ff16610fa45760005460ff1615610fa8565b303b155b61101a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161071c565b600054610100900460ff1615801561103c576000805461ffff19166101011790555b611044611497565b61104c61151c565b8015610b06576000805461ff001916905550565b6097546001600160a01b031633146110ba5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b60d080546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b031633146111365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b60ce80546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b031633146111b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b6001600160a01b03811661122e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161071c565b610b0681611445565b6097546001600160a01b03163314610b065760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161071c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156112c9576112c48361162b565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561130257600080fd5b505afa925050508015611332575060408051601f3d908101601f1916820190925261132f91810190611a1c565b60015b6113a45760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161071c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146114395760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161071c565b506112c48383836116e9565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166115145760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161071c565b610f87611714565b600054610100900460ff166115375760005460ff161561153b565b303b155b6115ad5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161071c565b600054610100900460ff161580156115cf576000805461ffff19166101011790555b60d080546001600160a01b03199081167378867bbeef44f2326bf8ddd1941a4439382ef2a71790915560ce8054909116739ac64cc6e4415144c455bd8e4837fea55603e5c31790558015610b06576000805461ff001916905550565b6001600160a01b0381163b6116a85760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161071c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6116f28361179a565b6000825111806116ff5750805b156112c45761170e83836117da565b50505050565b600054610100900460ff166117915760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161071c565b610f8733611445565b6117a38161162b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6118595760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161071c565b600080846001600160a01b0316846040516118749190611a34565b600060405180830381855af49150503d80600081146118af576040519150601f19603f3d011682016040523d82523d6000602084013e6118b4565b606091505b50915091506118dc8282604051806060016040528060278152602001611af4602791396118e5565b95945050505050565b606083156118f457508161191e565b8251156119045782518084602001fd5b8160405162461bcd60e51b815260040161071c9190611a50565b9392505050565b600060208284031215611936578081fd5b813561191e81611ade565b600060208284031215611952578081fd5b815161191e81611ade565b6000806040838503121561196f578081fd5b823561197a81611ade565b9150602083013567ffffffffffffffff80821115611996578283fd5b818501915085601f8301126119a9578283fd5b8135818111156119bb576119bb611aaf565b604051601f8201601f19908116603f011681019083821181831017156119e3576119e3611aaf565b816040528281528860208487010111156119fb578586fd5b82602086016020830137856020848301015280955050505050509250929050565b600060208284031215611a2d578081fd5b5051919050565b60008251611a46818460208701611a83565b9190910192915050565b6020815260008251806020840152611a6f816040850160208701611a83565b601f01601f19169190910160400192915050565b60005b83811015611a9e578181015183820152602001611a86565b8381111561170e5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b0381168114610b0657600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209e7be94fe6d201c163ce0be1f616e96b56593a4806ffef26b8f4530bc7542f1264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewGoldenTreePool(address,address)": {
        "notice": "Emitted when golden tree pool is changed"
      },
      "NewSmartAchievement(address,address)": {
        "notice": "Emitted when smart achievement system is changed"
      },
      "NewSmartArmy(address,address)": {
        "notice": "Emitted when smart army is changed"
      },
      "NewSmartFarm(address,address)": {
        "notice": "Emitted when smart farm is changed"
      },
      "NewSmartLadder(address,address)": {
        "notice": "Emitted when smart ladder is changed"
      }
    },
    "kind": "user",
    "methods": {
      "setBUSD(address)": {
        "notice": "Sets a new BUSD contract for the comptroller "
      },
      "setGoldenTreePool(address)": {
        "notice": "Sets a new golden tree pool contract for the comptroller "
      },
      "setSMT(address)": {
        "notice": "Sets a new BUSD contract for the comptroller "
      },
      "setSmartAchievement(address)": {
        "notice": "Sets a new achievement system contract for the comptroller "
      },
      "setSmartArmy(address)": {
        "notice": "Sets a new smart army contract for the comptroller "
      },
      "setSmartFarm(address)": {
        "notice": "Sets a new smart farm contract for the comptroller "
      },
      "setSmartLadder(address)": {
        "notice": "Sets a new smart ladder contract for the comptroller "
      },
      "setUniswapRouter(address)": {
        "notice": "Sets a new Uniswap Router 02 address contract for the comptroller "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 519,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 522,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 501,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 721,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1006,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7943,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "smartArmy",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(ISmartArmy)13274"
      },
      {
        "astId": 7946,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "smartLadder",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(ISmartLadder)13474"
      },
      {
        "astId": 7949,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "smartFarm",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(ISmartFarm)13397"
      },
      {
        "astId": 7952,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "goldenTreePool",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(IGoldenTreePool)13112"
      },
      {
        "astId": 7955,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "smartAchievement",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(ISmartAchievement)13174"
      },
      {
        "astId": 7958,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IUniswapV2Router02)14183"
      },
      {
        "astId": 7961,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "smtToken",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IERC20)1838"
      },
      {
        "astId": 7964,
        "contract": "contracts/SmartComp.sol:SmartComp",
        "label": "busdToken",
        "offset": 0,
        "slot": "208",
        "type": "t_contract(IERC20)1838"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1838": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGoldenTreePool)13112": {
        "encoding": "inplace",
        "label": "contract IGoldenTreePool",
        "numberOfBytes": "20"
      },
      "t_contract(ISmartAchievement)13174": {
        "encoding": "inplace",
        "label": "contract ISmartAchievement",
        "numberOfBytes": "20"
      },
      "t_contract(ISmartArmy)13274": {
        "encoding": "inplace",
        "label": "contract ISmartArmy",
        "numberOfBytes": "20"
      },
      "t_contract(ISmartFarm)13397": {
        "encoding": "inplace",
        "label": "contract ISmartFarm",
        "numberOfBytes": "20"
      },
      "t_contract(ISmartLadder)13474": {
        "encoding": "inplace",
        "label": "contract ISmartLadder",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)14183": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}