{
  "address": "0x95AbeF217ea1e11300eEcf97585e6C6a66D04d15",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "busd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "goldenTree",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dev",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "achievement",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "farming",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "intermediary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "smartArmy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "smartComp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "airdrop",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lengthOfWhitelist",
          "type": "uint256"
        }
      ],
      "name": "AddedWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "excluded",
          "type": "bool"
        }
      ],
      "name": "ExcludeFromFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start_timestamp",
          "type": "uint256"
        }
      ],
      "name": "ResetedTimestamp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "goldenTree",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dev",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "achievement",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "farming",
          "type": "address"
        }
      ],
      "name": "TaxAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyTaxFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedBuyFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referralFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goldenPoolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "devFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "achievementFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedBuyTaxFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "UpdatedChestLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "UpdatedFarmingLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "UpdatedGoldenTree",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "UpdatedLiquidityLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellTaxFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSellFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "devFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goldenPoolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "farmingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "achievementFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSellTaxFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "UpdatedSmartArmy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "UpdatedSurprizeLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferTaxFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedTransferFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "devFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "achievementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goldenPoolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "farmingFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedTransferTaxFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "UpdatedWhitelistAccount",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURN_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOTAL_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_achievementSystemAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_airdropDist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_bnbDec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_busdDec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_buyAchievementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_buyDevFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_buyGoldenPoolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_buyReferralFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_buyTaxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_chestRewardsDist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_devAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_devDist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_excludedFromFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_farmingRewardAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_farmingRewardDist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getCurrentSellTax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_goldenTreePoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_intermediaryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_liquidityDist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_mintForAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_mintForChestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_mintForFarmingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_mintForLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_mintForSurprizeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_presaleDist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_referralAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellAchievementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellBurnFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellDevFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellFarmingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellGoldenPoolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellTaxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_sellTaxTierDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_sellTaxTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_smartArmy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_suprizeRewardsDist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_tokenPriceByBNB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_tokenPriceByBusd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_transferAchievementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_transferDevFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_transferFarmingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_transferGoldenFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_transferTaxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_uniswapV2BUSDPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_uniswapV2ETHPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_whitelist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "addAccountToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busdContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyTokenWithBNB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyTokenWithBUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyTokenWithHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "enableWhitelistAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "enabledIntermediary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "excluded",
          "type": "bool"
        }
      ],
      "name": "excludeFromFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "existInWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getAmountFromBNB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getAmountFromBUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBuyTaxFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referralFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "goldenPoolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "devFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "achievementFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEnabledAccounts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEventFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buyFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transferFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSellTaxFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "devFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "goldenPoolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "farmingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burnFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "achievementFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTransferTaxFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "devFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "achievementFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "goldenPoolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "farmingFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetStartTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "buyTaxFee",
          "type": "uint256"
        }
      ],
      "name": "setBuyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referralFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "goldenPoolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "devFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "achievementFee",
          "type": "uint256"
        }
      ],
      "name": "setBuyTaxFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "lockStatus",
          "type": "bool"
        }
      ],
      "name": "setChestRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "lockStatus",
          "type": "bool"
        }
      ],
      "name": "setFarmingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setGoldenTreeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "lockStatus",
          "type": "bool"
        }
      ],
      "name": "setInitialLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellTaxFee",
          "type": "uint256"
        }
      ],
      "name": "setSellFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "devFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "goldenPoolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "farmingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burnFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "achievementFee",
          "type": "uint256"
        }
      ],
      "name": "setSellTaxFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setSmartArmyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "lockStatus",
          "type": "bool"
        }
      ],
      "name": "setSurprizeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "goldenTree",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dev",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "achievement",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "farming",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "intermediary",
          "type": "address"
        }
      ],
      "name": "setTaxAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transferTaxFee",
          "type": "uint256"
        }
      ],
      "name": "setTransferFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "devFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "achievementFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "goldenPoolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "farmingFee",
          "type": "uint256"
        }
      ],
      "name": "setTransferTaxFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8cc7157754e60d21adbdfff941862e1a1c551343f33a307f878f8e9e1a5ce08b",
  "receipt": {
    "to": null,
    "from": "0x153c55C7dE2697AC2EEa969fcc952e2e2b43762f",
    "contractAddress": "0x95AbeF217ea1e11300eEcf97585e6C6a66D04d15",
    "transactionIndex": 1,
    "gasUsed": "12331707",
    "logsBloom": "0x000000000000000000000000000000000080000000000120008000000000000000000000000000000000000000000002000000100000000000000000000000000000000000000000000000080000040000110000000000000000000000000000000000000200000000000000000008000000000200020000000000100000004000000000000000000000000000000000000800100000000000000000000000000000000a08000000000000000000000000000000000000000000000000000000000000020000000200000000000000400000000000000000000000000000210000000000000000000c0000000000000000000000100000008000000000000000",
    "blockHash": "0x5e475700e8c820998ae5c503ed0fb458a01533c07965e6e033b5d2f41147b9c8",
    "transactionHash": "0x8cc7157754e60d21adbdfff941862e1a1c551343f33a307f878f8e9e1a5ce08b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 16965876,
        "transactionHash": "0x8cc7157754e60d21adbdfff941862e1a1c551343f33a307f878f8e9e1a5ce08b",
        "address": "0x95AbeF217ea1e11300eEcf97585e6C6a66D04d15",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000153c55c7de2697ac2eea969fcc952e2e2b43762f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5e475700e8c820998ae5c503ed0fb458a01533c07965e6e033b5d2f41147b9c8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 16965876,
        "transactionHash": "0x8cc7157754e60d21adbdfff941862e1a1c551343f33a307f878f8e9e1a5ce08b",
        "address": "0xB7926C0430Afb07AA7DEfDE6DA862aE0Bde767bc",
        "topics": [
          "0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9",
          "0x00000000000000000000000095abef217ea1e11300eecf97585e6c6a66d04d15",
          "0x000000000000000000000000ae13d989dac2f0debff460ac112a837c89baa7cd"
        ],
        "data": "0x00000000000000000000000044e34b530992109c624684e6371fc23e4e1c2c94000000000000000000000000000000000000000000000000000000000001f300",
        "logIndex": 1,
        "blockHash": "0x5e475700e8c820998ae5c503ed0fb458a01533c07965e6e033b5d2f41147b9c8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 16965876,
        "transactionHash": "0x8cc7157754e60d21adbdfff941862e1a1c551343f33a307f878f8e9e1a5ce08b",
        "address": "0xB7926C0430Afb07AA7DEfDE6DA862aE0Bde767bc",
        "topics": [
          "0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9",
          "0x00000000000000000000000016a21a3c7d97d61738e8804b17c5d4f57ee23330",
          "0x00000000000000000000000095abef217ea1e11300eecf97585e6c6a66d04d15"
        ],
        "data": "0x0000000000000000000000001c19f2269e633daa608d00aefa449fe0e0dc44ee000000000000000000000000000000000000000000000000000000000001f301",
        "logIndex": 2,
        "blockHash": "0x5e475700e8c820998ae5c503ed0fb458a01533c07965e6e033b5d2f41147b9c8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 16965876,
        "transactionHash": "0x8cc7157754e60d21adbdfff941862e1a1c551343f33a307f878f8e9e1a5ce08b",
        "address": "0x95AbeF217ea1e11300eEcf97585e6C6a66D04d15",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000153c55c7de2697ac2eea969fcc952e2e2b43762f"
        ],
        "data": "0x000000000000000000000000000000000000000000000fe1c215e8f838e00000",
        "logIndex": 3,
        "blockHash": "0x5e475700e8c820998ae5c503ed0fb458a01533c07965e6e033b5d2f41147b9c8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 16965876,
        "transactionHash": "0x8cc7157754e60d21adbdfff941862e1a1c551343f33a307f878f8e9e1a5ce08b",
        "address": "0x95AbeF217ea1e11300eEcf97585e6C6a66D04d15",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000153c55c7de2697ac2eea969fcc952e2e2b43762f"
        ],
        "data": "0x00000000000000000000000000000000000000000000032d26d12e980b600000",
        "logIndex": 4,
        "blockHash": "0x5e475700e8c820998ae5c503ed0fb458a01533c07965e6e033b5d2f41147b9c8"
      }
    ],
    "blockNumber": 16965876,
    "cumulativeGasUsed": "12352707",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x16a21A3c7d97d61738e8804B17c5D4f57Ee23330",
    "0xB5D0D6855EE08eb07eC4Ca51061c93D644367a1e",
    "0xDAC575ddcdD2Ff269EE5C30420C96028Ba7cB304",
    "0x153c55C7dE2697AC2EEa969fcc952e2e2b43762f",
    "0x828987A77f7145494bD86780349B204F32DB494A",
    "0xb654476d77d59259fF1e7fF38B8c4d408639b844",
    "0xCF6fB9dd95a486e587fF53194B06FE6082220A37",
    "0x86E07ab6b97ADcd7897D960B0c61DFE5CEaD2E76",
    "0xBaa44Dd97E0b709C4E8faA95745a7321416cAf2D",
    "0x153c55C7dE2697AC2EEa969fcc952e2e2b43762f"
  ],
  "solcInputHash": "72d32db482a54aa7e745053b43b35233",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"busd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"goldenTree\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"achievement\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farming\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"intermediary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartArmy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartComp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"airdrop\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lengthOfWhitelist\",\"type\":\"uint256\"}],\"name\":\"AddedWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start_timestamp\",\"type\":\"uint256\"}],\"name\":\"ResetedTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"goldenTree\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"achievement\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farming\",\"type\":\"address\"}],\"name\":\"TaxAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTaxFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedBuyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goldenPoolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"achievementFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedBuyTaxFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"UpdatedChestLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"UpdatedFarmingLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"UpdatedGoldenTree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"UpdatedLiquidityLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellTaxFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goldenPoolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"farmingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"achievementFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedSellTaxFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"UpdatedSmartArmy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"UpdatedSurprizeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferTaxFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedTransferFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"achievementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goldenPoolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"farmingFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedTransferTaxFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"UpdatedWhitelistAccount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_achievementSystemAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_airdropDist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bnbDec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_busdDec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyAchievementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyGoldenPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyReferralFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_chestRewardsDist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devDist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_farmingRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_farmingRewardDist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getCurrentSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_goldenTreePoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_intermediaryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityDist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_mintForAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_mintForChestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_mintForFarmingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_mintForLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_mintForSurprizeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_presaleDist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_referralAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellAchievementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFarmingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellGoldenPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_sellTaxTierDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_sellTaxTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_smartArmy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_suprizeRewardsDist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenPriceByBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenPriceByBusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferAchievementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferFarmingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferGoldenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2BUSDPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2ETHPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_whitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addAccountToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokenWithBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTokenWithBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTokenWithHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableWhitelistAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"enabledIntermediary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"existInWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountFromBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountFromBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyTaxFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referralFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldenPoolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"achievementFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnabledAccounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEventFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellTaxFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldenPoolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"farmingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"achievementFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferTaxFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"achievementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldenPoolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"farmingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTaxFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referralFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldenPoolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"achievementFee\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"lockStatus\",\"type\":\"bool\"}],\"name\":\"setChestRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"lockStatus\",\"type\":\"bool\"}],\"name\":\"setFarmingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGoldenTreeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"lockStatus\",\"type\":\"bool\"}],\"name\":\"setInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTaxFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldenPoolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"farmingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"achievementFee\",\"type\":\"uint256\"}],\"name\":\"setSellTaxFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSmartArmyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"lockStatus\",\"type\":\"bool\"}],\"name\":\"setSurprizeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"goldenTree\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"achievement\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farming\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"intermediary\",\"type\":\"address\"}],\"name\":\"setTaxAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferTaxFee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"achievementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldenPoolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"farmingFee\",\"type\":\"uint256\"}],\"name\":\"setTransferTaxFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_getCurrentSellTax()\":{\"details\":\"get current sellTax percent through sell tax tier system\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"constructor\":{\"details\":\"Sets the values for busdContract, {totalSupply} and tax addresses\"},\"decimals()\":{\"details\":\"Returns the token decimals.\"},\"excludeFromFee(address,bool)\":{\"details\":\"Exclude the address from fee.\"},\"getOwner()\":{\"details\":\"Returns the bep token owner.\"},\"isExcludedFromFee(address)\":{\"details\":\"Returns the address is excluded from burn fee or not.\"},\"name()\":{\"details\":\"Returns the token name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"resetStartTimestamp()\":{\"details\":\"start Sell Tax tier system again \"},\"setBuyFee(uint256)\":{\"details\":\"Sets value for _buyTaxFee with {buyTaxFee} in emergency status.\"},\"setBuyTaxFees(uint256,uint256,uint256,uint256)\":{\"details\":\"Sets buying tax fees\"},\"setGoldenTreeAddress(address)\":{\"details\":\"Sets value for _goldenTreePoolAddress\"},\"setSellFee(uint256)\":{\"details\":\"Sets value for _sellTaxFee with {sellTaxFee} in emergency status.\"},\"setSellTaxFees(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Sets selling tax fees\"},\"setSmartArmyAddress(address)\":{\"details\":\"Sets value for _smartArmy\"},\"setTaxAddresses(address,address,address,address,address,address)\":{\"details\":\"Sets values for tax addresses \"},\"setTransferFee(uint256)\":{\"details\":\"Sets value for _transferTaxFee with {transferTaxFee} in emergency status.\"},\"setTransferTaxFees(uint256,uint256,uint256,uint256)\":{\"details\":\"Sets buying tax fees\"},\"symbol()\":{\"details\":\"Returns the token symbol.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SmartToken.sol\":\"SmartToken\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/SmartToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Smart Token\\n * @author Liu\\n */\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport './libs/IBEP20.sol';\\nimport './libs/TransferHelper.sol';\\nimport './interfaces/IWETH.sol';\\nimport './interfaces/IUniswapRouter.sol';\\nimport './interfaces/IUniswapFactory.sol';\\nimport './interfaces/IUniswapPair.sol';\\nimport './interfaces/IGoldenTreePool.sol';\\nimport './interfaces/ISmartArmy.sol';\\nimport './interfaces/ISmartLadder.sol';\\nimport './interfaces/ISmartFarm.sol';\\nimport './interfaces/ISmartComp.sol';\\nimport './interfaces/ISmartAchievement.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract SmartToken is Context, IBEP20, Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    address public busdContract;\\n    address public _uniswapV2ETHPair;\\n    address public _uniswapV2BUSDPair;\\n    IUniswapV2Router02 public _uniswapV2Router;\\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    address public _operator; \\n    address public _smartArmy;\\n    \\n    // tax addresses\\n    address public _referralAddress;\\n    address public _goldenTreePoolAddress;\\n    address public _devAddress;\\n    address public _achievementSystemAddress;\\n    address public _farmingRewardAddress;\\n    address public _intermediaryAddress;\\n\\n    // Buy Tax information\\n    uint256 public _buyTaxFee = 15; // the % amount of buying amount when buying SMT token\\n\\n    uint256 public _buyReferralFee = 50;\\n    uint256 public _buyGoldenPoolFee = 30;\\n    uint256 public _buyDevFee = 10;\\n    uint256 public _buyAchievementFee = 10;\\n\\n    // Sell Tax information\\n    uint256 public _sellTaxFee = 15; // the % amount of selling amount when selling SMT token\\n\\n    uint256 public _sellDevFee = 10;\\n    uint256 public _sellGoldenPoolFee = 30;\\n    uint256 public _sellFarmingFee = 20;\\n    uint256 public _sellBurnFee = 30;\\n    uint256 public _sellAchievementFee = 10;\\n\\n    // Transfer Tax information\\n    uint256 public _transferTaxFee = 15; // the % amount of transfering amount when transfering SMT token\\n\\n    uint256 public _transferDevFee = 10;\\n    uint256 public _transferAchievementFee = 10;\\n    uint256 public _transferGoldenFee = 50;\\n    uint256 public _transferFarmingFee = 30;\\n\\n    uint256[] public _sellTaxTierDays = [10, 10, 10, 10];\\n    uint256[] public _sellTaxTiers    = [30, 25, 20, 15];\\n    uint256 private _start_timestamp = block.timestamp;\\n\\n    uint256 public constant MAX_TOTAL_SUPPLY = 15000000 * 1e18;\\n\\n    uint256 public _liquidityDist; // SMT-BNB liquidity distribution (locked)\\n    uint256 public _farmingRewardDist; // farming rewards distribution (locked)\\n    uint256 public _presaleDist; // presale distribution\\n    uint256 public _airdropDist; // airdrop distribution\\n    uint256 public _suprizeRewardsDist; // surprize rewards distribution (locked)\\n    uint256 public _chestRewardsDist; // chest rewards distribution (locked)\\n    uint256 public _devDist; // marketing & development distribution (unlocked)\\n\\n    address[] public _whitelist;\\n    mapping(address => bool) mapEnabledWhitelist;\\n\\n    bool _initialLiquidityLocked;\\n    bool _farmingRewardsLocked;\\n    bool _surprizeRewardsLocked;\\n    bool _chestRewardsLocked;\\n\\n    uint256 public _tokenPriceByBusd = 15;\\n    uint256 public _busdDec = 10;\\n\\n    uint256 public _tokenPriceByBNB = 25;\\n    uint256 public _bnbDec = 1000;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) public _excludedFromFee;\\n\\n    ISmartComp comptroller;\\n\\n    event TaxAddressesUpdated(\\n        address indexed referral, \\n        address indexed goldenTree, \\n        address indexed dev, \\n        address achievement, \\n        address farming\\n    );\\n\\n    event ExcludeFromFee(address indexed account, bool excluded);\\n\\n    event UpdatedBuyFee(uint256 buyTaxFee);\\n    event UpdatedSellFee(uint256 sellTaxFee);\\n    event UpdatedTransferFee(uint256 transferTaxFee);\\n\\n    event UpdatedBuyTaxFees(\\n        uint256 referralFee,\\n        uint256 goldenPoolFee,\\n        uint256 devFee,\\n        uint256 achievementFee        \\n    );\\n    event UpdatedSellTaxFees(\\n        uint256 devFee,\\n        uint256 goldenPoolFee,\\n        uint256 farmingFee,\\n        uint256 burnFee,\\n        uint256 achievementFee\\n    );\\n    event UpdatedTransferTaxFees(\\n        uint256 devFee,\\n        uint256 achievementFee,\\n        uint256 goldenPoolFee,\\n        uint256 farmingFee\\n    );\\n\\n    event ResetedTimestamp(uint256 start_timestamp);\\n\\n    event UpdatedGoldenTree(address indexed _address);\\n    event UpdatedSmartArmy(address indexed _address);\\n\\n    event UpdatedLiquidityLocked(bool _enable);\\n    event UpdatedFarmingLocked(bool _enable);\\n    event UpdatedSurprizeLocked(bool _enable);\\n    event UpdatedChestLocked(bool _enable);\\n\\n    event AddedWhitelist(uint256 lengthOfWhitelist);\\n    event UpdatedWhitelistAccount(address account, bool enable);\\n\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender || msg.sender == owner(), \\\"SMT: caller is not the operator\\\");\\n        _;\\n    }\\n    modifier liquidityLocked(uint256 amount) {\\n        require(\\n            _initialLiquidityLocked == false && _liquidityDist-amount > 0, \\n            \\\"Locked the amount for initial SMT-BNB liquidity.\\\"\\n        );\\n        _;\\n    }\\n    modifier farmingRewardsLocked(uint256 amount) {\\n        require(\\n            _farmingRewardsLocked == false && _farmingRewardDist-amount > 0, \\n            \\\"Locked the amount for farming rewards.\\\"\\n        );\\n        _;\\n    }\\n    modifier surprizeRewardsLocked(uint256 amount) {\\n        require(\\n            _surprizeRewardsLocked == false && _suprizeRewardsDist-amount > 0, \\n            \\\"Locked the amount for surprize rewards.\\\"\\n        );\\n        _;\\n    }\\n    modifier chestRewardsLocked(uint256 amount) {\\n        require(\\n            _chestRewardsLocked == false && _chestRewardsDist-amount > 0, \\n            \\\"Locked the amount for chest rewards.\\\"\\n        );\\n        _;\\n    }\\n    /**\\n     * @dev Sets the values for busdContract, {totalSupply} and tax addresses\\n     *\\n     */\\n    constructor(\\n        address busd, \\n        address referral, \\n        address goldenTree, \\n        address dev, \\n        address achievement, // passive global share\\n        address farming,\\n        address intermediary,\\n        address smartArmy,\\n        address smartComp,\\n        address airdrop\\n    ){\\n        _name = \\\"Smart Token\\\";\\n        _symbol = \\\"SMT\\\";\\n        _decimals = 18;\\n\\n        require(\\n            busd != address(0x0) \\n            && referral != address(0x0) \\n            && goldenTree != address(0x0) \\n            && dev != address(0x0) \\n            && achievement != address(0x0) \\n            && farming != address(0x0) \\n            && intermediary != address(0x0) \\n            && smartArmy != address(0x0), \\n        \\\"invalid address\\\");\\n\\n        busdContract = busd;\\n        _operator = msg.sender;\\n        _referralAddress = referral;\\n        _goldenTreePoolAddress = goldenTree;\\n        _devAddress = dev;\\n        _achievementSystemAddress = achievement;\\n        _farmingRewardAddress = farming;\\n        _intermediaryAddress = intermediary;\\n\\n        _smartArmy = smartArmy;\\n\\n        // Pancake V2 router\\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3);\\n        _uniswapV2Router = uniswapRouter;\\n\\n        // Create a pair with ETH\\n        _uniswapV2ETHPair = IUniswapV2Factory(uniswapRouter.factory())\\n            .createPair(address(this), uniswapRouter.WETH());\\n\\n        // Create a pair with BUSD\\n        _uniswapV2BUSDPair = IUniswapV2Factory(uniswapRouter.factory())\\n            .createPair(address(this), busd);\\n\\n        _excludedFromFee[msg.sender] = true;\\n        _excludedFromFee[address(this)] = true;\\n        _excludedFromFee[BURN_ADDRESS] = true;\\n        _excludedFromFee[_referralAddress] = true;\\n        _excludedFromFee[_goldenTreePoolAddress] = true;\\n        _excludedFromFee[_devAddress] = true;\\n        _excludedFromFee[_achievementSystemAddress] = true;\\n        _excludedFromFee[_farmingRewardAddress] = true;\\n        _excludedFromFee[_smartArmy] = true;\\n\\n        _liquidityDist = MAX_TOTAL_SUPPLY.div(10);\\n        _farmingRewardDist = MAX_TOTAL_SUPPLY.div(1000).mul(383);\\n        _presaleDist = MAX_TOTAL_SUPPLY.div(10).mul(3);\\n        _airdropDist = MAX_TOTAL_SUPPLY.div(1000).mul(5);\\n        _suprizeRewardsDist = MAX_TOTAL_SUPPLY.div(100).mul(9);\\n        _chestRewardsDist = MAX_TOTAL_SUPPLY.div(1000).mul(121);\\n        _devDist = MAX_TOTAL_SUPPLY.div(1000);\\n\\n        comptroller = ISmartComp(smartComp);\\n\\n        _mint(airdrop, _airdropDist);\\n        _mint(dev, _devDist);\\n    }\\n\\n    function getOwner() external override view returns (address) {\\n        return owner();\\n    }\\n\\n    function name() external override view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external override view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external override view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() external override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external override view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _transferFrom(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external override view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom (address sender, address recipient, uint256 amount) external override virtual returns (bool) {\\n        _transferFrom(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(amount, 'SMT: transfer amount exceeds allowance')\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, 'SMT: decreased allowance below zero'));\\n        return true;\\n    }\\n\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), 'SMT: transfer from the zero address');\\n        require(recipient != address(0), 'SMT: transfer to the zero address');\\n        require(_balances[sender] >= amount, \\\"The balance of sender is too small.\\\");\\n        if (_excludedFromFee[sender] || _excludedFromFee[recipient]) {\\n            _transfer(sender, recipient, amount);\\n        } else {\\n            bool toPair = recipient == _uniswapV2ETHPair || recipient == _uniswapV2BUSDPair;\\n            bool fromPair = sender == _uniswapV2ETHPair || sender == _uniswapV2BUSDPair;\\n            if(sender == _intermediaryAddress && toPair) {\\n                // Intermediary => Pair: No Fee\\n                _transfer(sender, recipient, amount);\\n            } else if(fromPair && recipient == _intermediaryAddress) {\\n                // Pair => Intermediary: No Fee\\n                _transfer(sender, recipient, amount);\\n            } else if(sender == _intermediaryAddress || recipient == _intermediaryAddress) {\\n                if (recipient == _intermediaryAddress) {\\n                    require(enabledIntermediary(sender), \\\"SMT: no smart army account\\\");\\n                    // sell transfer via intermediary: sell tax reduce 30%\\n                    uint256 taxAmount1 = _getCurrentSellTax().mul(700).div(1000).div(100);\\n                    uint256 recvAmount1 = amount.sub(taxAmount1);\\n                    \\n                    distributeSellTax(sender, taxAmount1);\\n                    _transfer(sender, recipient, recvAmount1);\\n\\n                } else {\\n                    require(enabledIntermediary(recipient), \\\"SMT: no smart army account\\\");\\n                    // buy transfer via intermediary: buy tax reduce 30%\\n                    uint256 taxAmount2 = amount.mul(_buyTaxFee.mul(700).div(1000)).div(100);\\n                    uint256 recvAmount2 = amount.sub(taxAmount2);\\n                    \\n                    distributeBuyTax(sender, recipient, taxAmount2);                    \\n                    _transfer(sender, recipient, recvAmount2);\\n                }\\n            } else if (fromPair) {\\n                // buy transfer\\n                uint256 taxAmount3 = amount.mul(_buyTaxFee).div(100);\\n                uint256 recvAmount3 = amount.sub(taxAmount3);\\n                \\n                distributeBuyTax(sender, recipient, taxAmount3);\\n                _transfer(sender, recipient, recvAmount3);\\n            } else if (toPair) {\\n                // sell transfer \\n                uint256 taxAmount4 = amount.mul(_getCurrentSellTax()).div(100);\\n                uint256 recvAmount4 = amount.sub(taxAmount4);\\n                \\n                distributeSellTax(sender, taxAmount4);\\n                // !!! should be called after distribute!\\n                _transfer(sender, recipient, recvAmount4);\\n            } else {\\n                // normal transfer\\n                uint256 taxAmount5 = amount.mul(_transferTaxFee).div(100);\\n                uint256 recvAmount5 = amount.sub(taxAmount5);\\n                \\n                distributeTransferTax(sender, taxAmount5);\\n                _transfer(sender, recipient, recvAmount5);\\n            }\\n        }\\n    }\\n\\n    function _transfer(address _from, address _to, uint256 _amount) internal {\\n        require(_balances[_from] - _amount >= 0, \\\"amount exceeds current balance\\\");\\n        _balances[_to] += _amount;\\n        _balances[_from] -= _amount;\\n        emit Transfer(_from, _to, _amount);\\n    }\\n\\n     function distributeSellTax (\\n        address sender,\\n        uint256 amount\\n    ) internal {\\n\\n        uint256 devAmount = amount.mul(_sellDevFee).div(100);\\n        uint256 goldenTreeAmount = amount.mul(_sellGoldenPoolFee).div(100);\\n        uint256 farmingAmount = amount.mul(_sellFarmingFee).div(100);\\n        uint256 burnAmount = amount.mul(_sellBurnFee).div(100);\\n        uint256 achievementAmount = amount.mul(_sellAchievementFee).div(100);\\n\\n        _transfer(sender, _devAddress, devAmount);\\n        _transfer(sender, _farmingRewardAddress, farmingAmount);\\n        _transfer(sender, BURN_ADDRESS, burnAmount);\\n        _transfer(sender, _achievementSystemAddress, achievementAmount);\\n        _transfer(sender, _goldenTreePoolAddress, goldenTreeAmount);\\n        \\n        _swapTokenToBUSD(_goldenTreePoolAddress, goldenTreeAmount);\\n        _swapTokenToBNB(_achievementSystemAddress, achievementAmount);\\n\\n        distributeTaxToGoldenTreePool(sender, goldenTreeAmount);\\n\\n        if(farmingAmount > 0) {\\n            distributeSellTaxToFarming(farmingAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Distributes buy tax tokens to tax addresses\\n    */\\n\\n    function distributeBuyTax(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n\\n        uint256 referralAmount = amount.mul(_buyReferralFee).div(100);\\n        uint256 goldenTreeAmount = amount.mul(_buyGoldenPoolFee).div(100);\\n        uint256 devAmount = amount.mul(_buyDevFee).div(100);\\n        uint256 achievementAmount = amount.mul(_buyAchievementFee).div(100);\\n\\n        _transfer(sender, _devAddress, devAmount);\\n        _transfer(sender, _referralAddress, referralAmount);\\n        _transfer(sender, _achievementSystemAddress, achievementAmount);\\n        _transfer(sender, _goldenTreePoolAddress, goldenTreeAmount);\\n\\n        _swapTokenToBUSD(_goldenTreePoolAddress, goldenTreeAmount);\\n        _swapTokenToBNB(_achievementSystemAddress, achievementAmount);\\n\\n        distributeBuyTaxToLadder(recipient);\\n        distributeTaxToGoldenTreePool(recipient, goldenTreeAmount);\\n    }\\n\\n    /**\\n     * @dev Distributes transfer tax tokens to tax addresses\\n     */\\n\\n    function distributeTransferTax(\\n        address sender,\\n        uint256 amount\\n    ) internal {\\n        uint256 devAmount = amount.mul(_transferDevFee).div(100);\\n        uint256 farmingAmount = amount.mul(_transferFarmingFee).div(100);\\n        uint256 goldenTreeAmount = amount.mul(_transferGoldenFee).div(100);\\n        uint256 achievementAmount = amount.mul(_transferAchievementFee).div(100);\\n\\n        _transfer(sender, _devAddress, devAmount);\\n        _transfer(sender, _farmingRewardAddress, farmingAmount);\\n        _transfer(sender, _goldenTreePoolAddress, goldenTreeAmount);\\n        _transfer(sender, _achievementSystemAddress, achievementAmount);\\n\\n        // distributeTaxToGoldenTreePool(sender, goldenTreeAmount);\\n    } \\n\\n    /**\\n     * @dev Distributes buy tax tokens to smart ladder system\\n     */\\n    function distributeBuyTaxToLadder (address from) internal {\\n        ISmartLadder(_referralAddress).distributeBuyTax(from);\\n    } \\n\\n    /**\\n     * @dev Distributes sell tax tokens to farmming passive rewards pool\\n     */\\n    function distributeSellTaxToFarming (uint256 amount) internal {\\n        ISmartFarm(_farmingRewardAddress).notifyRewardAmount(amount);\\n    } \\n\\n    /**\\n     * @dev Distribute tax to golden Tree pool as SMT and notify\\n     */\\n    function distributeTaxToGoldenTreePool (address account, uint256 amount) internal {\\n        IGoldenTreePool(_goldenTreePoolAddress).notifyReward(amount, account);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), 'SMT: mint to the zero address');\\n        require(_totalSupply + amount <= MAX_TOTAL_SUPPLY, \\\"exceeds maximum total supply\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _mintForLiquidity(address account, uint256 amount) \\n        external onlyOperator liquidityLocked(amount)\\n    {\\n        _mint(account, amount);\\n        _liquidityDist = _liquidityDist.sub(amount);\\n    }\\n\\n    function _mintForFarmingPool(address account, uint256 amount)\\n        external onlyOperator farmingRewardsLocked(amount)\\n    {\\n        _mint(account, amount);\\n        _farmingRewardDist = _farmingRewardDist.sub(amount);\\n    }\\n\\n    function _mintForPresale(address account, uint256 amount)\\n        internal\\n    {\\n        require(_presaleDist.sub(amount) >= 0, \\\"the amount to be minted exceeds maximum presale amount\\\");\\n        _mint(account, amount);\\n        _presaleDist = _presaleDist.sub(amount);\\n    }\\n\\n    function _mintForAirdrop(address account, uint256 amount)\\n        external onlyOperator\\n    {\\n        require(_presaleDist.sub(amount) >= 0, \\\"the amount to be minted exceeds maximum presale amount\\\");\\n        _mint(account, amount);\\n        _airdropDist = _airdropDist.sub(amount);\\n    }\\n\\n    function _mintForSurprizeReward(address account, uint256 amount)\\n        external onlyOperator surprizeRewardsLocked(amount)\\n    {\\n        _mint(account, amount);\\n        _suprizeRewardsDist = _suprizeRewardsDist.sub(amount);\\n    }\\n\\n    function _mintForChestReward(address account, uint256 amount)\\n        external onlyOperator chestRewardsLocked(amount)\\n    {\\n        _mint(account, amount);\\n        _chestRewardsDist = _chestRewardsDist.sub(amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), 'SMT: approve from the zero address');\\n        require(spender != address(0), 'SMT: approve to the zero address');\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Returns the address is excluded from burn fee or not.\\n     */\\n    function isExcludedFromFee (address account) external view returns (bool) {\\n        return _excludedFromFee[account];\\n    }\\n\\n    /**\\n     * @dev Exclude the address from fee.\\n     */\\n    function excludeFromFee (address account, bool excluded) external onlyOperator {\\n        require(_excludedFromFee[account] != excluded, \\\"SMT: already excluded or included\\\");\\n        _excludedFromFee[account] = excluded;\\n\\n        emit ExcludeFromFee(account, excluded);\\n    }    \\n\\n    /**\\n     * @dev Sets value for _sellTaxFee with {sellTaxFee} in emergency status.\\n     */\\n    function setSellFee (uint256 sellTaxFee) external onlyOperator {\\n        require(sellTaxFee < 100, 'SMT: sellTaxFee exceeds maximum value');\\n        _sellTaxFee = sellTaxFee;\\n\\n        emit UpdatedSellFee(sellTaxFee);\\n    }    \\n\\n    /**\\n     * @dev Sets value for _buyTaxFee with {buyTaxFee} in emergency status.\\n     */\\n    function setBuyFee (uint256 buyTaxFee) external onlyOperator {\\n        require(buyTaxFee < 100, 'SMT: buyTaxFee exceeds maximum value');\\n        _buyTaxFee = buyTaxFee;\\n\\n        emit UpdatedBuyFee(buyTaxFee);\\n    }    \\n\\n    /**\\n     * @dev Sets value for _transferTaxFee with {transferTaxFee} in emergency status.\\n     */\\n    function setTransferFee (uint256 transferTaxFee) external onlyOperator {\\n        require(transferTaxFee < 100, 'SMT: transferTaxFee exceeds maximum value');\\n        _transferTaxFee = transferTaxFee;\\n\\n        emit UpdatedTransferFee(transferTaxFee);\\n    }  \\n\\n    function getEventFees() external view returns(\\n        uint256 buyFee, \\n        uint256 sellFee, \\n        uint256 transferFee\\n    ){\\n        return (_buyTaxFee, _sellTaxFee, _transferTaxFee);\\n    }\\n\\n    function getBuyTaxFees() external view returns(\\n        uint256 referralFee, \\n        uint256 goldenPoolFee, \\n        uint256 devFee,\\n        uint256 achievementFee\\n    ){\\n        return (\\n            _buyReferralFee, \\n            _buyGoldenPoolFee, \\n            _buyDevFee, \\n            _buyAchievementFee\\n        );\\n    }\\n\\n    function getSellTaxFees() external view returns(\\n        uint256 devFee, \\n        uint256 goldenPoolFee, \\n        uint256 farmingFee,\\n        uint256 burnFee,\\n        uint256 achievementFee\\n    ){\\n        return (\\n            _sellDevFee, \\n            _sellGoldenPoolFee, \\n            _sellFarmingFee, \\n            _sellBurnFee, \\n            _sellAchievementFee\\n        );\\n    }\\n\\n    function getTransferTaxFees() external view returns(\\n        uint256 devFee, \\n        uint256 achievementFee,\\n        uint256 goldenPoolFee, \\n        uint256 farmingFee\\n    ){\\n        return (\\n            _transferDevFee,\\n            _transferAchievementFee,\\n            _transferGoldenFee,\\n            _transferFarmingFee\\n        );\\n    }\\n\\n    /**\\n     * @dev start Sell Tax tier system again \\n     */\\n    function resetStartTimestamp() external onlyOperator {\\n        _start_timestamp = block.timestamp;\\n\\n        emit ResetedTimestamp(_start_timestamp);\\n    }   \\n\\n    /**\\n     * @dev get current sellTax percent through sell tax tier system\\n     */\\n    function _getCurrentSellTax() public view returns (uint256) {\\n        uint256 time_since_start = block.timestamp - _start_timestamp;\\n        for(uint i = 0; i < _sellTaxTierDays.length; i++) {\\n            if(time_since_start < _sellTaxTierDays[i] * 24 * 3600) {\\n                return _sellTaxTiers[i];\\n            }\\n        }\\n        return _sellTaxFee;\\n    }   \\n\\n    /**\\n     *  @dev Sets buying tax fees\\n    */\\n    function setBuyTaxFees(\\n        uint256 referralFee,\\n        uint256 goldenPoolFee,\\n        uint256 devFee,\\n        uint256 achievementFee\\n    ) external onlyOperator {\\n        _buyReferralFee = referralFee;\\n        _buyGoldenPoolFee = goldenPoolFee;\\n        _buyDevFee = devFee;\\n        _buyAchievementFee = achievementFee;\\n        emit UpdatedBuyTaxFees(referralFee, goldenPoolFee, devFee, achievementFee);\\n    }\\n\\n    /**\\n     *  @dev Sets selling tax fees\\n    */\\n    function setSellTaxFees(\\n        uint256 devFee,\\n        uint256 goldenPoolFee,\\n        uint256 farmingFee,\\n        uint256 burnFee,\\n        uint256 achievementFee\\n    ) external onlyOperator {\\n        _sellDevFee = devFee;\\n        _sellGoldenPoolFee = goldenPoolFee;\\n        _sellFarmingFee = farmingFee;\\n        _sellBurnFee = burnFee;\\n        _sellAchievementFee = achievementFee;\\n        emit UpdatedSellTaxFees(devFee, goldenPoolFee, farmingFee, burnFee, achievementFee);\\n    }\\n\\n    /**\\n     *  @dev Sets buying tax fees\\n    */\\n    function setTransferTaxFees(\\n        uint256 devFee,\\n        uint256 achievementFee,\\n        uint256 goldenPoolFee,\\n        uint256 farmingFee\\n    ) external onlyOperator {\\n        _transferDevFee = devFee;\\n        _transferAchievementFee = achievementFee;\\n        _transferGoldenFee = goldenPoolFee;\\n        _transferFarmingFee = farmingFee;\\n        emit UpdatedTransferTaxFees(devFee, achievementFee, goldenPoolFee, farmingFee);\\n    }\\n\\n    /**\\n     *  @dev Sets values for tax addresses \\n     */\\n    function setTaxAddresses (\\n        address referral, \\n        address goldenTree, \\n        address dev, \\n        address achievement, \\n        address farming, \\n        address intermediary\\n    ) external onlyOperator {\\n\\n        if (_referralAddress != referral && referral != address(0x0)) {\\n            _excludedFromFee[_referralAddress] = false;\\n            _referralAddress = referral;\\n            _excludedFromFee[referral] = true;\\n        }\\n        if (_goldenTreePoolAddress != goldenTree && goldenTree != address(0x0)) {\\n            _excludedFromFee[_goldenTreePoolAddress] = false;\\n            _goldenTreePoolAddress = goldenTree;\\n            _excludedFromFee[goldenTree] = true;\\n        }\\n        if (_devAddress != dev && dev != address(0x0)) {\\n            _excludedFromFee[_devAddress] = false;\\n            _devAddress = dev;\\n            _excludedFromFee[dev] = true;\\n        }\\n        if (_achievementSystemAddress != achievement && achievement != address(0x0)) {\\n            _excludedFromFee[_achievementSystemAddress] = false;\\n            _achievementSystemAddress = achievement;\\n            _excludedFromFee[achievement] = true;\\n        }\\n        if (_farmingRewardAddress != farming && farming != address(0x0)) {\\n            _excludedFromFee[_farmingRewardAddress] = false;\\n            _farmingRewardAddress = farming;\\n            _excludedFromFee[farming] = true;\\n        }\\n        if (_intermediaryAddress != intermediary && intermediary != address(0x0)) {\\n            _intermediaryAddress = intermediary;\\n        }\\n        emit TaxAddressesUpdated(referral, goldenTree, dev, achievement, farming);\\n    }\\n\\n    /**\\n     * @dev Sets value for _goldenTreePoolAddress\\n     */\\n    function setGoldenTreeAddress (address _address) external onlyOperator {\\n        require(_address!= address(0x0), 'SMT: not allowed zero address');\\n        _goldenTreePoolAddress = _address;\\n\\n        emit UpdatedGoldenTree(_address);\\n    }\\n\\n    /**\\n     * @dev Sets value for _smartArmy\\n     */\\n    function setSmartArmyAddress (address _address) external onlyOperator {\\n        require(_address!= address(0x0), 'SMT: not allowed zero address');\\n        _smartArmy = _address;\\n\\n        emit UpdatedSmartArmy(_address);\\n    }\\n    \\n    function setInitialLiquidity(bool lockStatus) external onlyOperator {\\n        _initialLiquidityLocked = lockStatus;\\n        emit UpdatedLiquidityLocked(lockStatus);\\n    }\\n\\n    function setFarmingRewards(bool lockStatus) external onlyOperator {\\n        _farmingRewardsLocked = lockStatus;\\n        emit UpdatedFarmingLocked(lockStatus);\\n    }\\n\\n    function setSurprizeRewards(bool lockStatus) external onlyOperator {\\n        _surprizeRewardsLocked = lockStatus;\\n        emit UpdatedSurprizeLocked(lockStatus);\\n    }\\n\\n    function setChestRewards(bool lockStatus) external onlyOperator {\\n        _chestRewardsLocked = lockStatus;\\n        emit UpdatedChestLocked(lockStatus);\\n    }    \\n\\n    function enabledIntermediary (address account) public view returns (bool){\\n        if(_smartArmy == address(0x0)) {\\n            return false;\\n        }\\n        return ISmartArmy(_smartArmy).isEnabledIntermediary(account);\\n    }\\n\\n    function getAmountFromBUSD(uint256 amount) public view returns(uint256){\\n        return amount.div(_tokenPriceByBusd).mul(_busdDec);\\n    }\\n\\n    function getAmountFromBNB(uint256 amount) public view returns(uint256){\\n        return amount.div(_tokenPriceByBNB).mul(_bnbDec);\\n    }\\n\\n    function buyTokenWithBNB() external payable {\\n        address payable sender = payable(msg.sender);\\n        uint256 _amount = getAmountFromBNB(msg.value);\\n        require(\\n            sender.balance >= msg.value, \\n            \\\"balance is too small, you can't pay for minting.\\\"\\n        );\\n        _mintForPresale(msg.sender, _amount);\\n        payable(_operator).transfer(msg.value);\\n    }\\n\\n    function buyTokenWithBUSD(uint256 amount) external {\\n        // require(existInWhitelist(to), \\\"this address have to become whitelist\\\");\\n        IERC20 busd = IERC20(busdContract);        \\n        uint256 amountIn = amount.mul(1e18);\\n        uint256 allow = busd.allowance(msg.sender, address(this));\\n        uint256 _amount = getAmountFromBUSD(amountIn);\\n        require(allow >= amountIn, \\\"cost is the smaller than allowed amount\\\");\\n        require(busd.balanceOf(msg.sender) >= amountIn, \\\"balance is too small, you can't pay for minting.\\\");\\n        _mintForPresale(msg.sender, _amount);\\n        busd.transferFrom(msg.sender, _operator, amountIn);\\n    }\\n\\n    function buyTokenWithHelper(uint256 amount) external {\\n        IERC20 busd = IERC20(busdContract);\\n        uint256 amountIn = amount.mul(1e18);\\n        uint256 _amount = getAmountFromBUSD(amountIn);\\n        require(busd.balanceOf(msg.sender) >= amount, \\\"balance is too small, you can't pay for minting.\\\");        \\n        _mintForPresale(msg.sender, _amount);\\n        TransferHelper.safeTransfer(address(busd), _operator, amountIn);\\n    }\\n\\n    function addAccountToWhitelist(address[] memory accounts) \\n        external onlyOperator \\n    {\\n        uint256 counter = 0;\\n        for(uint256 i=0; i<accounts.length; i++){\\n            if(accounts[i] != address(0x0)){\\n                _whitelist.push(accounts[i]); counter++;\\n            }\\n        }\\n        emit AddedWhitelist(accounts.length);\\n    }\\n\\n    function enableWhitelistAccount(address account, bool _enable) \\n        external onlyOperator \\n    {\\n        mapEnabledWhitelist[account] = _enable;\\n        emit UpdatedWhitelistAccount(account, _enable);\\n    }\\n\\n    function getEnabledAccounts() public view returns(address[] memory) {\\n        address[] memory availables;\\n        uint256 cn = 0;\\n        for(uint256 i=0; i<_whitelist.length; i++){\\n            if(_whitelist[i] != address(0x0) \\n                && !mapEnabledWhitelist[_whitelist[i]]) {\\n                    availables[cn++] = _whitelist[i];\\n            }\\n        }\\n        return availables;\\n    }\\n\\n    function existInWhitelist(address account) public view returns(bool) {\\n        bool exist = false;\\n        for(uint256 i=0; i<_whitelist.length; i++){\\n            if(_whitelist[i] != address(0x0) \\n                && !mapEnabledWhitelist[_whitelist[i]]) {\\n                if(_whitelist[i] == account){\\n                    exist == true;\\n                    break;\\n                }\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    function _swapTokenToBNB(address to, uint256 tokenAmount) private {\\n        IERC20 smtToken = comptroller.getSMT();\\n        // IERC20 busdToken = comptroller.getBUSD();\\n        IUniswapV2Router02 uniswapV2Router = comptroller.getUniswapV2Router();\\n\\n        // generate the uniswap pair path of token -> busd\\n        address[] memory path = new address[](2);\\n        path[0] = address(smtToken);\\n        path[1] = address(uniswapV2Router.WETH());\\n\\n        smtToken.approve(address(uniswapV2Router), tokenAmount);\\n        \\n\\t\\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\t\\ttokenAmount,\\n\\t\\t\\t0,\\n\\t\\t\\tpath,\\n            to,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n    }\\n\\n    function _swapTokenToBUSD(address to, uint256 tokenAmount) private {\\n        IERC20 smtToken = comptroller.getSMT();\\n        IERC20 busdToken = comptroller.getBUSD();\\n        IUniswapV2Router02 uniswapV2Router = comptroller.getUniswapV2Router();\\n\\n        // generate the uniswap pair path of token -> busd\\n        address[] memory path = new address[](2);\\n        path[0] = address(smtToken);\\n        path[1] = address(busdToken);\\n\\n        smtToken.approve(address(uniswapV2Router), tokenAmount);\\n        \\n        // make the swap\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _addLiquidity(uint256 tokenAmount, uint256 busdAmount) \\n        private \\n        returns (uint amountA, uint amountB, uint liquidity)\\n    {\\n        IERC20 smtToken = comptroller.getSMT();\\n        IERC20 busdToken = comptroller.getBUSD();\\n        IUniswapV2Router02 uniswapV2Router = comptroller.getUniswapV2Router();\\n\\n        // approve token transfer to cover all possible scenarios\\n        smtToken.approve(address(uniswapV2Router), tokenAmount);\\n        busdToken.approve(address(uniswapV2Router), busdAmount);\\n        \\n        // add the liquidity\\n        (amountA, amountB, liquidity) = uniswapV2Router.addLiquidity(\\n            address(smtToken),\\n            address(busdToken),\\n            tokenAmount,\\n            busdAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _removeLiquidity(uint256 lpAmount) \\n        private \\n        returns (uint amountA, uint amountB)\\n    {\\n        IERC20 smtToken = comptroller.getSMT();\\n        IERC20 busdToken = comptroller.getBUSD();\\n        IUniswapV2Router02 uniswapV2Router = comptroller.getUniswapV2Router();\\n\\n        // approve token transfer to cover all possible scenarios\\n        address pair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(address(smtToken), address(busdToken));\\n        IERC20(pair).approve(address(uniswapV2Router), lpAmount);    \\n        \\n        // add the liquidity\\n        (amountA, amountB) = uniswapV2Router.removeLiquidity(\\n            address(smtToken),\\n            address(busdToken),\\n            lpAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n     //to recieve ETH from uniswapV2Router when swaping\\n    receive() external payable {}\\n}\\n\\n\",\"keccak256\":\"0xcbcc3324ceb1194e6e6794f29e394215c60496e2a732e7f3eb731695d42eb095\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldenTreePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IGoldenTreePool {\\n    function swapDistribute() external;\\n    function notifyReward(uint256 amount, address account) external;\\n}\\n\",\"keccak256\":\"0x0f9b1f1b14eca9873524a3316fda040d3400c56c09eb7b4ac3df18964336aae5\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartAchievement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ISmartAchievement {\\n\\n    struct NobilityType {\\n        string            title;               // Title of Nobility Folks Baron Count Viscount Earl Duke Prince King\\n        uint256           growthRequried;      // Required growth token\\n        uint256           passiveShare;        // Passive share percent\\n\\n        uint256[]         chestSMTRewards;\\n        uint256[]         chestSMTCRewards;\\n    }\\n\\n\\n    function notifyGrowth(address account, uint256 oldGrowth, uint256 newGrowth) external returns(bool);\\n    function claimReward() external;\\n    function claimChestReward() external;\\n    function swapDistribute() external;\\n    \\n    function isUpgradeable(uint256 from, uint256 to) external view returns(bool, uint256);\\n    function nobilityOf(address account) external view returns(NobilityType memory);\\n    function nobilityTitleOf(address account) external view returns(string memory);\\n}\\n\",\"keccak256\":\"0x577c69397493aa9aca5b25daf0d9591807212af258a89964b67497faa8e5b40d\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartArmy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ISmartArmy {\\n    /// @dev License Types\\n    struct LicenseType {\\n        uint256  level;        // level\\n        string   name;         // Trial, Opportunist, Runner, Visionary\\n        uint256  price;        // 100, 1000, 5000, 10,000\\n        uint256  ladderLevel;  // Level of referral system with this license\\n        uint256  duration;     // default 6 months\\n        bool     isValid;\\n    }\\n\\n    enum LicenseStatus {\\n        None,\\n        Pending,\\n        Active,\\n        Expired\\n    }\\n\\n    /// @dev User information on license\\n    struct UserLicense {\\n        address owner;\\n        uint256 level;\\n        uint256 startAt;\\n        uint256 activeAt;\\n        uint256 expireAt;\\n        uint256 lpLocked;\\n\\n        LicenseStatus status;\\n    }\\n\\n    /// @dev User Personal Information\\n    struct UserPersonal {\\n        address sponsor;\\n        string username;\\n        string telegram;\\n    }\\n\\n    /// @dev Fee Info \\n    struct FeeInfo {\\n        uint256 penaltyFeePercent;      // liquidate License LP fee percent\\n        uint256 extendFeeBNB;       // extend Fee as BNB\\n        address feeAddress;\\n    }\\n    \\n    function licenseOf(address account) external view returns(UserLicense memory);\\n    function lockedLPOf(address account) external view returns(uint256);\\n    function isActiveLicense(address account) external view returns(bool);\\n    function isEnabledIntermediary(address account) external view returns(bool);\\n    function licenseLevelOf(address account) external view returns(uint256);\\n    function licenseActiveDuration(address account, uint256 from, uint256 to) external view returns(uint256, uint256);\\n}\\n\",\"keccak256\":\"0x25f63030cf93bf3261bc71f3a14baf7ccbe11e7549c7afe0c08250fa019d621e\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartComp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport './ISmartArmy.sol';\\nimport './ISmartLadder.sol';\\nimport './ISmartFarm.sol';\\nimport './IGoldenTreePool.sol';\\nimport './ISmartAchievement.sol';\\nimport './IUniswapRouter.sol';\\n\\n// Smart Comptroller Interface\\ninterface ISmartComp {\\n    function isComptroller() external pure returns(bool);\\n    function getSMT() external view returns(IERC20);\\n    function getBUSD() external view returns(IERC20);\\n    function getWBNB() external view returns(IERC20);\\n\\n    function getUniswapV2Router() external view returns(IUniswapV2Router02);\\n\\n    function getUniswapV2Factory() external view returns(address);\\n\\n    function getSmartArmy() external view returns(ISmartArmy);\\n\\n    function getSmartLadder() external view returns(ISmartLadder);\\n\\n    function getSmartFarm() external view returns(ISmartFarm);\\n\\n    function getGoldenTreePool() external view returns(IGoldenTreePool);\\n\\n    function getSmartAchievement() external view returns(ISmartAchievement);\\n}\\n\",\"keccak256\":\"0x5c32a845d95a1bc6ba10e80a638d4412fc03d198115c2080dd34ae06f4208cec\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ISmartFarm {\\n    /// @dev Pool Information\\n    struct PoolInfo {\\n        address stakingTokenAddress;     // staking contract address\\n        address rewardTokenAddress;      // reward token contract\\n\\n        uint256 rewardPerDay;            // reward percent per day\\n\\n        uint unstakingFee;\\n            \\n        uint256 totalStaked;             /* How many tokens we have successfully staked */\\n    }\\n\\n\\n    struct UserInfo {\\n        uint256 balance;\\n        uint256 rewards;\\n        uint256 rewardPerTokenPaid;     // User rewards per token paid for passive\\n        uint256 lastUpdated;\\n    }\\n    \\n    function stakeSMT(address account, uint256 amount) external returns(uint256);\\n    function withdrawSMT(address account, uint256 amount) external returns(uint256);\\n    function claimReward() external;\\n\\n    function notifyRewardAmount(uint _reward) external;\\n}\\n\",\"keccak256\":\"0x75b90c575820cc53f1153650fd7c4c0f9c10dc7759ccf21a4f04830c78a366f0\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartLadder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ISmartLadder {\\n    /// @dev Ladder system activities\\n    struct Activity {\\n        string      name;         // buytax, farming, ...\\n        uint16[7]   share;        // share percentage\\n        address     token;        // share token address\\n        bool        enabled;      // enabled or disabled temporally\\n        bool        isValid;\\n        uint256     totalDistributed; // total distributed\\n    }\\n    \\n    function registerSponsor(address _user, address _sponsor) external;\\n    function distributeTax(uint256 id, address account) external; \\n    function distributeBuyTax(address account) external; \\n    function distributeFarmingTax(address account) external; \\n    function distributeSmartLivingTax(address account) external; \\n    function distributeEcosystemTax(address account) external; \\n    \\n    function activity(uint256 id) external view returns(Activity memory);\\n    function sponsorOf(address account) external view returns(address);\\n    function sponsorsOf(address account, uint count) external returns (address[] memory); \\n}\\n\",\"keccak256\":\"0xdb9ba1c5b7ff2f6296285acd1dd17cc9c5b06b157d24b1d05d61c593fa802af3\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\",\"keccak256\":\"0x8b2d84cf955e2844d663c41694fea389ee1fcc49c442930f8f90a50e67b2f9b1\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0xa716687b4db09e34ede1ecc3963be9cbc5cb36ed4802f27a1340c774619c453b\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\n\\n\\n// pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\",\"keccak256\":\"0xe1374fd93617dbd62d570bf4bc869d063fa911aea6c74584d5031eda2e909513\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x39f17e72f381e2532958ba52b0ad0407250c5f14aa7aa1072ab3daa9d33085dd\",\"license\":\"MIT\"},\"contracts/libs/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb348064a5c19ebf955b29b845d5ae9007a9edc30531a84474d03a210e702ea27\",\"license\":\"MIT\"},\"contracts/libs/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    address constant NATIVE_TOKEN = address(0);\\n\\n    function isEther(address token) internal pure returns (bool) {\\n      return token == NATIVE_TOKEN;\\n    }\\n\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferTokenOrETH(address token, address to, uint value) internal {\\n        isEther(token) \\n            ? safeTransferETH(to, value)\\n            : safeTransfer(token, to, value);\\n    }\\n}\",\"keccak256\":\"0x173d9381ca2d039bfb874e387d488158faf38e1b64484f65c8a923c9a8ee2114\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600f601081905560326011819055601e6012819055600a601381905560148181556015859055601682905560178390556018556019829055601a819055601b93909355601c839055601d839055908155601f55610100604052608081815260a082905260c082905260e0919091526200007d90602090600462000a17565b5060408051608081018252601e815260196020820152601491810191909152600f6060820152620000b390602190600462000a17565b5042602255600f602d55600a602e556019602f556103e8603055348015620000da57600080fd5b5060405162005dd838038062005dd8833981016040819052620000fd9162000b3a565b620001083362000823565b60408051808201909152600b8082526a29b6b0b93a102a37b5b2b760a91b60209092019182526200013c9160029162000a6c565b506040805180820190915260038082526214d35560ea1b602090920191825262000167918162000a6c565b506004805460ff191660121790556001600160a01b038a16158015906200019657506001600160a01b03891615155b8015620001ab57506001600160a01b03881615155b8015620001c057506001600160a01b03871615155b8015620001d557506001600160a01b03861615155b8015620001ea57506001600160a01b03851615155b8015620001ff57506001600160a01b03841615155b80156200021457506001600160a01b03831615155b620002585760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064015b60405180910390fd5b60048054610100600160a81b0319166101006001600160a01b038d81169190910291909117825560088054336001600160a01b031991821617909155600a805482168d8416179055600b805482168c8416179055600c805482168b8416179055600d805482168a8416179055600e80548216898416179055600f805482168884161790556009805482169287169290921790915560078054739ac64cc6e4415144c455bd8e4837fea55603e5c39216821790556040805163c45a015560e01b815290519192839263c45a0155928083019260209291829003018186803b1580156200034257600080fd5b505afa15801562000357573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200037d919062000b1d565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015620003c657600080fd5b505afa158015620003db573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000401919062000b1d565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381600087803b1580156200044a57600080fd5b505af11580156200045f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000485919062000b1d565b600560006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015620004e557600080fd5b505afa158015620004fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000520919062000b1d565b6040516364e329cb60e11b81523060048201526001600160a01b038d81166024830152919091169063c9c6539690604401602060405180830381600087803b1580156200056c57600080fd5b505af115801562000581573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005a7919062000b1d565b600680546001600160a01b0319166001600160a01b03928316179055336000908152603360209081526040808320805460ff19908116600190811790925530855282852080548216831790557f797464dbf411727de94027e1fdf88bb523a37123d715877a38fefe312b70e15a8054821683179055600a8054871686528386208054831684179055600b54871686528386208054831684179055600c54871686528386208054831684179055600d54871686528386208054831684179055600e548716865283862080548316841790556009549096168552919093208054909116909217909155620006af916a0c685fa11e01ec6f0000009162000873811b6200353717901c565b602355620006f261017f620006de6a0c685fa11e01ec6f0000006103e862000873602090811b6200353717901c565b6200088860201b6200354a1790919060201c565b6024556200071f6003620006de6a0c685fa11e01ec6f000000600a62000873602090811b6200353717901c565b6025556200074d6005620006de6a0c685fa11e01ec6f0000006103e862000873602090811b6200353717901c565b6026556200077a6009620006de6a0c685fa11e01ec6f000000606462000873602090811b6200353717901c565b602755620007a86079620006de6a0c685fa11e01ec6f0000006103e862000873602090811b6200353717901c565b602855620007d06a0c685fa11e01ec6f0000006103e862000873602090811b6200353717901c565b602955603480546001600160a01b0319166001600160a01b038516179055602654620007fe90839062000896565b62000812886029546200089660201b60201c565b505050505050505050505062000cb9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600062000881828462000c23565b9392505050565b600062000881828462000c44565b6001600160a01b038216620008ee5760405162461bcd60e51b815260206004820152601d60248201527f534d543a206d696e7420746f20746865207a65726f206164647265737300000060448201526064016200024f565b6a0c685fa11e01ec6f000000816001546200090a919062000c08565b11156200095a5760405162461bcd60e51b815260206004820152601c60248201527f65786365656473206d6178696d756d20746f74616c20737570706c790000000060448201526064016200024f565b620009768160015462000a0960201b620035561790919060201c565b6001556001600160a01b038216600090815260316020908152604090912054620009ab9183906200355662000a09821b17901c565b6001600160a01b0383166000818152603160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90620009fd9085815260200190565b60405180910390a35050565b600062000881828462000c08565b82805482825590600052602060002090810192821562000a5a579160200282015b8281111562000a5a578251829060ff1690559160200191906001019062000a38565b5062000a6892915062000ae9565b5090565b82805462000a7a9062000c66565b90600052602060002090601f01602090048101928262000a9e576000855562000a5a565b82601f1062000ab957805160ff191683800117855562000a5a565b8280016001018555821562000a5a579182015b8281111562000a5a57825182559160200191906001019062000acc565b5b8082111562000a68576000815560010162000aea565b80516001600160a01b038116811462000b1857600080fd5b919050565b60006020828403121562000b2f578081fd5b620008818262000b00565b6000806000806000806000806000806101408b8d03121562000b5a578586fd5b62000b658b62000b00565b995062000b7560208c0162000b00565b985062000b8560408c0162000b00565b975062000b9560608c0162000b00565b965062000ba560808c0162000b00565b955062000bb560a08c0162000b00565b945062000bc560c08c0162000b00565b935062000bd560e08c0162000b00565b925062000be66101008c0162000b00565b915062000bf76101208c0162000b00565b90509295989b9194979a5092959850565b6000821982111562000c1e5762000c1e62000ca3565b500190565b60008262000c3f57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161562000c615762000c6162000ca3565b500290565b600181811c9082168062000c7b57607f821691505b6020821081141562000c9d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b61510f8062000cc96000396000f3fe6080604052600436106106275760003560e01c80637f1794c811610322578063b1ab260c116101a5578063df8408fe116100ec578063f6bcf37711610095578063fccc28131161006f578063fccc281314611151578063fde74dce14611167578063ff4658f81461118757600080fd5b8063f6bcf377146110fc578063f7fd33991461111c578063fca464f71461113c57600080fd5b8063efcc52de116100c6578063efcc52de146110b0578063f2fde38b146110c6578063f40cf331146110e657600080fd5b8063df8408fe14611050578063e9a8a17a14611070578063ee356ec01461109057600080fd5b8063cb9cecdd1161014e578063dd2f147111610128578063dd2f147114610fde578063dd62ed3e14610ff4578063de8ec6651461103a57600080fd5b8063cb9cecdd14610f79578063cbe0e3ed14610f99578063cf9d101c14610fb957600080fd5b8063c0f8c9b91161017f578063c0f8c9b914610f37578063c25129ad14610f4d578063c9cf778914610f6357600080fd5b8063b1ab260c14610eeb578063b661ef7814610f01578063b74f263214610f1757600080fd5b80639d631f0a11610269578063a7fa295711610212578063ab4fd424116101ec578063ab4fd42414610e95578063ac0a86c514610eab578063ad47751c14610ecb57600080fd5b8063a7fa295714610e3f578063a9059cbb14610e5f578063a95bada514610e7f57600080fd5b8063a457c2d711610243578063a457c2d714610ddf578063a68a91ee14610dff578063a7d701da14610e1f57600080fd5b80639d631f0a14610d895780639f611b0814610da9578063a1c1757c14610dbf57600080fd5b80638c14b796116102cb5780638f02bb5b116102a55780638f02bb5b14610d34578063956fef8b14610d5457806395d89b4114610d7457600080fd5b80638c14b79614610cf45780638da5cb5b14610c965780638e67230014610d1457600080fd5b8063893d20e8116102fc578063893d20e814610c965780638a5aa2a814610cb45780638b4cee0814610cd457600080fd5b80637f1794c814610c4a5780637f55d49114610c6057806388de3e8314610c7657600080fd5b806344c40538116104aa57806362636507116103f157806370b0a8431161039a5780637abdc1ca116103745780637abdc1ca14610bf65780637bdf840414610c0c5780637e80b9d214610c2a57600080fd5b806370b0a84314610bb9578063715018a614610bd957806372fdaae314610bee57600080fd5b80636951ec2d116103cb5780636951ec2d14610b295780636af6592914610b6357806370a0823114610b8357600080fd5b80636263650714610ad45780636291f36714610ae957806364ae9fa814610b0957600080fd5b80635342acb4116104535780635ca3f8db1161042d5780635ca3f8db14610a6d5780636030de2a14610a8d5780636201585214610abe57600080fd5b80635342acb4146109f4578063542efd3014610a2d578063583e056814610a4d57600080fd5b8063515b94fb11610484578063515b94fb1461099e57806353048640146109be578063530e72a9146109d457600080fd5b806344c405381461094657806349c1f12a1461095c5780634bbe64e11461097e57600080fd5b806323b872dd1161056e57806333ea7fa3116105175780633cc1e871116104f15780633cc1e871146108fa57806341009e5f14610910578063446515631461092657600080fd5b806333ea7fa31461088257806339509351146108a25780633b860c93146108c257600080fd5b8063313ce56711610548578063313ce5671461082b57806333039d3d1461084d578063339f40e11461086c57600080fd5b806323b872dd146107b157806324cae07f146107d15780632f92e9f8146107e757600080fd5b806312455d0f116105d05780631d8e14ae116105aa5780631d8e14ae1461075b578063200a692d1461077b57806322f988c31461079157600080fd5b806312455d0f1461071a57806318160ddd146107305780631bb8e33d1461074557600080fd5b80630cc835a3116106015780630cc835a3146106b25780630d29573f146106d45780631194d0641461070457600080fd5b806306fdde0314610633578063094389e81461065e578063095ea7b31461068257600080fd5b3661062e57005b600080fd5b34801561063f57600080fd5b506106486111a7565b6040516106559190614ec2565b60405180910390f35b34801561066a57600080fd5b5061067460255481565b604051908152602001610655565b34801561068e57600080fd5b506106a261069d366004614c8b565b611239565b6040519015158152602001610655565b3480156106be57600080fd5b506106d26106cd366004614db5565b61124f565b005b3480156106e057600080fd5b506106a26106ef366004614b2d565b60336020526000908152604090205460ff1681565b34801561071057600080fd5b50610674601e5481565b34801561072657600080fd5b50610674602f5481565b34801561073c57600080fd5b50600154610674565b34801561075157600080fd5b50610674602e5481565b34801561076757600080fd5b50610674610776366004614db5565b611362565b34801561078757600080fd5b5061067460155481565b34801561079d57600080fd5b506106d26107ac366004614d7d565b611383565b3480156107bd57600080fd5b506106a26107cc366004614c1e565b611448565b3480156107dd57600080fd5b50610674601a5481565b3480156107f357600080fd5b50601654601754601854601954601a54604080519586526020860194909452928401919091526060830152608082015260a001610655565b34801561083757600080fd5b5060045460405160ff9091168152602001610655565b34801561085957600080fd5b506106746a0c685fa11e01ec6f00000081565b34801561087857600080fd5b5061067460265481565b34801561088e57600080fd5b506106d261089d366004614c5e565b6114b1565b3480156108ae57600080fd5b506106a26108bd366004614c8b565b611572565b3480156108ce57600080fd5b506006546108e2906001600160a01b031681565b6040516001600160a01b039091168152602001610655565b34801561090657600080fd5b5061067460275481565b34801561091c57600080fd5b50610674601d5481565b34801561093257600080fd5b50600a546108e2906001600160a01b031681565b34801561095257600080fd5b5061067460285481565b34801561096857600080fd5b506109716115a8565b6040516106559190614eaf565b34801561098a57600080fd5b506106d2610999366004614c8b565b6116f3565b3480156109aa57600080fd5b506106a26109b9366004614b2d565b611809565b3480156109ca57600080fd5b50610674601c5481565b3480156109e057600080fd5b506106d26109ef366004614d7d565b6118c0565b348015610a0057600080fd5b506106a2610a0f366004614b2d565b6001600160a01b031660009081526033602052604090205460ff1690565b348015610a3957600080fd5b506106d2610a48366004614c8b565b611983565b348015610a5957600080fd5b506007546108e2906001600160a01b031681565b348015610a7957600080fd5b506106d2610a88366004614b2d565b611a82565b348015610a9957600080fd5b50601054601554601b5460408051938452602084019290925290820152606001610655565b348015610aca57600080fd5b5061067460135481565b348015610ae057600080fd5b506106d2611b7f565b348015610af557600080fd5b506106d2610b04366004614c8b565b611c17565b348015610b1557600080fd5b506106d2610b24366004614b9d565b611d2c565b348015610b3557600080fd5b50601c54601d54601e54601f545b604080519485526020850193909352918301526060820152608001610655565b348015610b6f57600080fd5b50600c546108e2906001600160a01b031681565b348015610b8f57600080fd5b50610674610b9e366004614b2d565b6001600160a01b031660009081526031602052604090205490565b348015610bc557600080fd5b506008546108e2906001600160a01b031681565b348015610be557600080fd5b506106d2612080565b6106d26120e6565b348015610c0257600080fd5b5061067460195481565b348015610c1857600080fd5b50601154601254601354601454610b43565b348015610c3657600080fd5b506005546108e2906001600160a01b031681565b348015610c5657600080fd5b5061067460245481565b348015610c6c57600080fd5b50610674602d5481565b348015610c8257600080fd5b50610674610c91366004614db5565b6121bc565b348015610ca257600080fd5b506000546001600160a01b03166108e2565b348015610cc057600080fd5b506106d2610ccf366004614cb6565b6121cc565b348015610ce057600080fd5b506106d2610cef366004614db5565b612327565b348015610d0057600080fd5b506009546108e2906001600160a01b031681565b348015610d2057600080fd5b506106d2610d2f366004614c8b565b61242f565b348015610d4057600080fd5b506106d2610d4f366004614db5565b61253f565b348015610d6057600080fd5b506106d2610d6f366004614b2d565b612647565b348015610d8057600080fd5b50610648612744565b348015610d9557600080fd5b506106d2610da4366004614c8b565b612753565b348015610db557600080fd5b5061067460115481565b348015610dcb57600080fd5b506106d2610dda366004614de5565b612869565b348015610deb57600080fd5b506106a2610dfa366004614c8b565b612929565b348015610e0b57600080fd5b506106d2610e1a366004614db5565b612978565b348015610e2b57600080fd5b506106d2610e3a366004614d7d565b612adb565b348015610e4b57600080fd5b50600f546108e2906001600160a01b031681565b348015610e6b57600080fd5b506106a2610e7a366004614c8b565b612b79565b348015610e8b57600080fd5b5061067460185481565b348015610ea157600080fd5b50610674601b5481565b348015610eb757600080fd5b506108e2610ec6366004614db5565b612b86565b348015610ed757600080fd5b50600e546108e2906001600160a01b031681565b348015610ef757600080fd5b5061067460235481565b348015610f0d57600080fd5b5061067460175481565b348015610f2357600080fd5b50610674610f32366004614db5565b612bb0565b348015610f4357600080fd5b5061067460125481565b348015610f5957600080fd5b5061067460295481565b348015610f6f57600080fd5b5061067460165481565b348015610f8557600080fd5b506106d2610f94366004614e16565b612bd3565b348015610fa557600080fd5b506106d2610fb4366004614de5565b612c9f565b348015610fc557600080fd5b506004546108e29061010090046001600160a01b031681565b348015610fea57600080fd5b5061067460145481565b34801561100057600080fd5b5061067461100f366004614b65565b6001600160a01b03918216600090815260326020908152604080832093909416825291909152205490565b34801561104657600080fd5b5061067460305481565b34801561105c57600080fd5b506106d261106b366004614c5e565b612d55565b34801561107c57600080fd5b5061067461108b366004614db5565b612ea6565b34801561109c57600080fd5b506106d26110ab366004614db5565b612ec3565b3480156110bc57600080fd5b5061067460105481565b3480156110d257600080fd5b506106d26110e1366004614b2d565b6131c6565b3480156110f257600080fd5b50610674601f5481565b34801561110857600080fd5b506106d2611117366004614d7d565b6132a8565b34801561112857600080fd5b506106a2611137366004614b2d565b61336c565b34801561114857600080fd5b5061067461347d565b34801561115d57600080fd5b506108e261dead81565b34801561117357600080fd5b50600d546108e2906001600160a01b031681565b34801561119357600080fd5b50600b546108e2906001600160a01b031681565b6060600280546111b690614fcb565b80601f01602080910402602001604051908101604052809291908181526020018280546111e290614fcb565b801561122f5780601f106112045761010080835404028352916020019161122f565b820191906000526020600020905b81548152906001019060200180831161121257829003601f168201915b5050505050905090565b6000611246338484613562565b50600192915050565b6008546001600160a01b031633148061127257506000546001600160a01b031633145b6112b15760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064015b60405180910390fd5b606481106113265760405162461bcd60e51b8152602060048201526024808201527f534d543a206275795461784665652065786365656473206d6178696d756d207660448201527f616c75650000000000000000000000000000000000000000000000000000000060648201526084016112a8565b60108190556040518181527f03cd3090e7c409e4a7ffd2d90ff610979f4a94a87a512188b7b615671bfb772f906020015b60405180910390a150565b6020818154811061137257600080fd5b600091825260209091200154905081565b6008546001600160a01b03163314806113a657506000546001600160a01b031633145b6113e05760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c80548215156301000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff9091161790556040517f58d1576e2475fe515de111f492583918cfdbca4eedabf5ee9c20a49d8941b6b29061135790831515815260200190565b6000611455848484613696565b6114a784336114a2856040518060600160405280602681526020016150b4602691396001600160a01b038a1660009081526032602090815260408083203384529091529020549190613b2b565b613562565b5060019392505050565b6008546001600160a01b03163314806114d457506000546001600160a01b031633145b61150e5760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b6001600160a01b0382166000818152602b6020908152604091829020805460ff19168515159081179091558251938452908301527f9d279f0c3c0d3f9a1afba1ead1fb55e2c602d633014f228b87ec7b6c66d6c08791015b60405180910390a15050565b3360008181526032602090815260408083206001600160a01b038716845290915281205490916112469185906114a29086613556565b6060806000805b602a548110156116eb5760006001600160a01b0316602a82815481106115e557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316148015906116525750602b6000602a838154811061162857634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16155b156116d957602a818154811061167857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316838361169881615006565b9450815181106116b857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b806116e381615006565b9150506115af565b509092915050565b6008546001600160a01b031633148061171657506000546001600160a01b031633145b6117505760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c54819062010000900460ff1615801561177857506000816027546117769190614f88565b115b6117ea5760405162461bcd60e51b815260206004820152602760248201527f4c6f636b65642074686520616d6f756e7420666f72207375727072697a65207260448201527f6577617264732e0000000000000000000000000000000000000000000000000060648201526084016112a8565b6117f48383613b57565b6027546118019083613ca5565b602755505050565b6009546000906001600160a01b031661182457506000919050565b6009546040517fe39fe88e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529091169063e39fe88e9060240160206040518083038186803b15801561188257600080fd5b505afa158015611896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ba9190614d99565b92915050565b6008546001600160a01b03163314806118e357506000546001600160a01b031633145b61191d5760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c8054821515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091161790556040517f11689aff0a3631ff5f969a8e9d824430602059e31d928a19fc7d61692a9712dc9061135790831515815260200190565b6008546001600160a01b03163314806119a657506000546001600160a01b031633145b6119e05760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b6025546000906119f09083613ca5565b1015611a645760405162461bcd60e51b815260206004820152603660248201527f74686520616d6f756e7420746f206265206d696e74656420657863656564732060448201527f6d6178696d756d2070726573616c6520616d6f756e740000000000000000000060648201526084016112a8565b611a6e8282613b57565b602654611a7b9082613ca5565b6026555050565b6008546001600160a01b0316331480611aa557506000546001600160a01b031633145b611adf5760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b6001600160a01b038116611b355760405162461bcd60e51b815260206004820152601d60248201527f534d543a206e6f7420616c6c6f776564207a65726f206164647265737300000060448201526064016112a8565b600980546001600160a01b0319166001600160a01b0383169081179091556040517fc9dab044ef39a4c54ae3e0e5cb2fa573d051392d2ba745976e7077566ec0ca3890600090a250565b6008546001600160a01b0316331480611ba257506000546001600160a01b031633145b611bdc5760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b4260228190556040519081527f7cbbfcb7566a7ff4a2a9d05b0ab00569fabbe7e5578f501743dee5031369a0cb9060200160405180910390a1565b6008546001600160a01b0316331480611c3a57506000546001600160a01b031633145b611c745760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c548190610100900460ff16158015611c9b5750600081602454611c999190614f88565b115b611d0d5760405162461bcd60e51b815260206004820152602660248201527f4c6f636b65642074686520616d6f756e7420666f72206661726d696e6720726560448201527f77617264732e000000000000000000000000000000000000000000000000000060648201526084016112a8565b611d178383613b57565b602454611d249083613ca5565b602455505050565b6008546001600160a01b0316331480611d4f57506000546001600160a01b031633145b611d895760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b600a546001600160a01b03878116911614801590611daf57506001600160a01b03861615155b15611e0157600a80546001600160a01b03908116600090815260336020526040808220805460ff1990811690915584546001600160a01b031916938b1693841790945591815220805490911660011790555b600b546001600160a01b03868116911614801590611e2757506001600160a01b03851615155b15611e7957600b80546001600160a01b03908116600090815260336020526040808220805460ff1990811690915584546001600160a01b031916938a1693841790945591815220805490911660011790555b600c546001600160a01b03858116911614801590611e9f57506001600160a01b03841615155b15611ef157600c80546001600160a01b03908116600090815260336020526040808220805460ff1990811690915584546001600160a01b03191693891693841790945591815220805490911660011790555b600d546001600160a01b03848116911614801590611f1757506001600160a01b03831615155b15611f6957600d80546001600160a01b03908116600090815260336020526040808220805460ff1990811690915584546001600160a01b03191693881693841790945591815220805490911660011790555b600e546001600160a01b03838116911614801590611f8f57506001600160a01b03821615155b15611fe157600e80546001600160a01b03908116600090815260336020526040808220805460ff1990811690915584546001600160a01b03191693871693841790945591815220805490911660011790555b600f546001600160a01b0382811691161480159061200757506001600160a01b03811615155b1561202857600f80546001600160a01b0319166001600160a01b0383161790555b604080516001600160a01b03858116825284811660208301528087169288821692918a16917fea39236f613486e3c3a28ea53cb64489dabe5c6b3a3d59cfed61a147f1966133910160405180910390a4505050505050565b6000546001600160a01b031633146120da5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016112a8565b6120e46000613cb1565b565b3360006120f234612bb0565b905034826001600160a01b03163110156121745760405162461bcd60e51b815260206004820152603060248201527f62616c616e636520697320746f6f20736d616c6c2c20796f752063616e27742060448201527f70617920666f72206d696e74696e672e0000000000000000000000000000000060648201526084016112a8565b61217e3382613d01565b6008546040516001600160a01b03909116903480156108fc02916000818181858888f193505050501580156121b7573d6000803e3d6000fd5b505050565b6021818154811061137257600080fd5b6008546001600160a01b03163314806121ef57506000546001600160a01b031633145b6122295760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b6000805b82518110156122f45760006001600160a01b031683828151811061226157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146122e257602a83828151811061229957634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b03909216919091179055816122de81615006565b9250505b806122ec81615006565b91505061222d565b507fbc613d7698cb74d2db24ad91ffe69371b98b24a8f189d577c9c5908c0496bc37825160405161156691815260200190565b6008546001600160a01b031633148061234a57506000546001600160a01b031633145b6123845760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b606481106123fa5760405162461bcd60e51b815260206004820152602560248201527f534d543a2073656c6c5461784665652065786365656473206d6178696d756d2060448201527f76616c756500000000000000000000000000000000000000000000000000000060648201526084016112a8565b60158190556040518181527f274faecd49018fb411281f27986b6b4acc86e5db4100735531acd18b7b6d5f9390602001611357565b6008546001600160a01b031633148061245257506000546001600160a01b031633145b61248c5760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c54819060ff161580156124ae57506000816023546124ac9190614f88565b115b6125205760405162461bcd60e51b815260206004820152603060248201527f4c6f636b65642074686520616d6f756e7420666f7220696e697469616c20534d60448201527f542d424e42206c69717569646974792e0000000000000000000000000000000060648201526084016112a8565b61252a8383613b57565b6023546125379083613ca5565b602355505050565b6008546001600160a01b031633148061256257506000546001600160a01b031633145b61259c5760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b606481106126125760405162461bcd60e51b815260206004820152602960248201527f534d543a207472616e736665725461784665652065786365656473206d61786960448201527f6d756d2076616c7565000000000000000000000000000000000000000000000060648201526084016112a8565b601b8190556040518181527f066ec06a21c2e65d6e69290f91b812f9171e098dfef39c8837c4ed6c57bd02ec90602001611357565b6008546001600160a01b031633148061266a57506000546001600160a01b031633145b6126a45760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b6001600160a01b0381166126fa5760405162461bcd60e51b815260206004820152601d60248201527f534d543a206e6f7420616c6c6f776564207a65726f206164647265737300000060448201526064016112a8565b600b80546001600160a01b0319166001600160a01b0383169081179091556040517f83ab943c0896225bd8b132456a8e2a247848ba8d8524da9fe44cbcb907b4571490600090a250565b6060600380546111b690614fcb565b6008546001600160a01b031633148061277657506000546001600160a01b031633145b6127b05760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c5481906301000000900460ff161580156127d957506000816028546127d79190614f88565b115b61284a5760405162461bcd60e51b8152602060048201526024808201527f4c6f636b65642074686520616d6f756e7420666f72206368657374207265776160448201527f7264732e0000000000000000000000000000000000000000000000000000000060648201526084016112a8565b6128548383613b57565b6028546128619083613ca5565b602855505050565b6008546001600160a01b031633148061288c57506000546001600160a01b031633145b6128c65760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b60118490556012839055601382905560148190556040805185815260208101859052908101839052606081018290527fdabbdd7e45811850a1d2f628e202253f234812ba7768c53f23229e50803350d1906080015b60405180910390a150505050565b600061124633846114a285604051806060016040528060238152602001615091602391393360009081526032602090815260408083206001600160a01b038d1684529091529020549190613b2b565b60045461010090046001600160a01b0316600061299d83670de0b6b3a764000061354a565b905060006129aa82612ea6565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290915084906001600160a01b038516906370a082319060240160206040518083038186803b158015612a0757600080fd5b505afa158015612a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3f9190614dcd565b1015612ab35760405162461bcd60e51b815260206004820152603060248201527f62616c616e636520697320746f6f20736d616c6c2c20796f752063616e27742060448201527f70617920666f72206d696e74696e672e0000000000000000000000000000000060648201526084016112a8565b612abd3382613d01565b600854612ad59084906001600160a01b031684613da3565b50505050565b6008546001600160a01b0316331480612afe57506000546001600160a01b031633145b612b385760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c805460ff19168215159081179091556040519081527f299c2fc45124dd9f4c59056e6d8b78a8a67694b7850dfaefcf8513a705abaac590602001611357565b6000611246338484613696565b602a8181548110612b9657600080fd5b6000918252602090912001546001600160a01b0316905081565b60006118ba603054612bcd602f548561353790919063ffffffff16565b9061354a565b6008546001600160a01b0316331480612bf657506000546001600160a01b031633145b612c305760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b6016859055601784905560188390556019829055601a819055604080518681526020810186905290810184905260608101839052608081018290527fed3c6a03d28d3cbb601cf4e05eed412c0e4df1fac68b43758c84200edcb750329060a00160405180910390a15050505050565b6008546001600160a01b0316331480612cc257506000546001600160a01b031633145b612cfc5760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b601c849055601d839055601e829055601f8190556040805185815260208101859052908101839052606081018290527fa1b517484aabc470f36b8b4d5ad20eba494f25defdb1d863dcfd6f9d89e959a49060800161291b565b6008546001600160a01b0316331480612d7857506000546001600160a01b031633145b612db25760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b6001600160a01b03821660009081526033602052604090205460ff1615158115151415612e475760405162461bcd60e51b815260206004820152602160248201527f534d543a20616c7265616479206578636c75646564206f7220696e636c75646560448201527f640000000000000000000000000000000000000000000000000000000000000060648201526084016112a8565b6001600160a01b038216600081815260336020908152604091829020805460ff191685151590811790915591519182527fd5144d2a6c8ff9b87b7a40852df5102cab2ce561c06b56cc6fe7ccf1fa7f8c2d910160405180910390a25050565b60006118ba602e54612bcd602d548561353790919063ffffffff16565b60045461010090046001600160a01b03166000612ee883670de0b6b3a764000061354a565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529091506000906001600160a01b0384169063dd62ed3e9060440160206040518083038186803b158015612f4c57600080fd5b505afa158015612f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f849190614dcd565b90506000612f9183612ea6565b9050828210156130095760405162461bcd60e51b815260206004820152602760248201527f636f73742069732074686520736d616c6c6572207468616e20616c6c6f77656460448201527f20616d6f756e740000000000000000000000000000000000000000000000000060648201526084016112a8565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015283906001600160a01b038616906370a082319060240160206040518083038186803b15801561306357600080fd5b505afa158015613077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309b9190614dcd565b101561310f5760405162461bcd60e51b815260206004820152603060248201527f62616c616e636520697320746f6f20736d616c6c2c20796f752063616e27742060448201527f70617920666f72206d696e74696e672e0000000000000000000000000000000060648201526084016112a8565b6131193382613d01565b6008546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03918216602482015260448101859052908516906323b872dd90606401602060405180830381600087803b15801561318657600080fd5b505af115801561319a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131be9190614d99565b505050505050565b6000546001600160a01b031633146132205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016112a8565b6001600160a01b03811661329c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016112a8565b6132a581613cb1565b50565b6008546001600160a01b03163314806132cb57506000546001600160a01b031633145b6133055760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c805482151562010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff9091161790556040517fdb6dd66b90893f4093dca838afb2024e286897d1367609ff62dc668533c4a98e9061135790831515815260200190565b600080805b602a548110156134765760006001600160a01b0316602a82815481106133a757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316148015906134145750602b6000602a83815481106133ea57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16155b1561346457836001600160a01b0316602a828154811061344457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316141561346457613476565b8061346e81615006565b915050613371565b5092915050565b6000806022544261348e9190614f88565b905060005b60205481101561352d57602081815481106134be57634e487b7160e01b600052603260045260246000fd5b906000526020600020015460186134d59190614f69565b6134e190610e10614f69565b82101561351b576021818154811061350957634e487b7160e01b600052603260045260246000fd5b90600052602060002001549250505090565b8061352581615006565b915050613493565b5060155491505090565b60006135438284614f49565b9392505050565b60006135438284614f69565b60006135438284614f31565b6001600160a01b0383166135de5760405162461bcd60e51b815260206004820152602260248201527f534d543a20617070726f76652066726f6d20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016112a8565b6001600160a01b0382166136345760405162461bcd60e51b815260206004820181905260248201527f534d543a20617070726f766520746f20746865207a65726f206164647265737360448201526064016112a8565b6001600160a01b0383811660008181526032602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166137125760405162461bcd60e51b815260206004820152602360248201527f534d543a207472616e736665722066726f6d20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016112a8565b6001600160a01b03821661378e5760405162461bcd60e51b815260206004820152602160248201527f534d543a207472616e7366657220746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016112a8565b6001600160a01b03831660009081526031602052604090205481111561381c5760405162461bcd60e51b815260206004820152602360248201527f5468652062616c616e6365206f662073656e64657220697320746f6f20736d6160448201527f6c6c2e000000000000000000000000000000000000000000000000000000000060648201526084016112a8565b6001600160a01b03831660009081526033602052604090205460ff168061385b57506001600160a01b03821660009081526033602052604090205460ff165b1561386b576121b7838383613ee5565b6005546000906001600160a01b038481169116148061389757506006546001600160a01b038481169116145b6005549091506000906001600160a01b03868116911614806138c657506006546001600160a01b038681169116145b600f549091506001600160a01b0386811691161480156138e35750815b156138f8576138f3858585613ee5565b613b24565b8080156139125750600f546001600160a01b038581169116145b15613922576138f3858585613ee5565b600f546001600160a01b038681169116148061394b5750600f546001600160a01b038581169116145b15613aa657600f546001600160a01b0385811691161415613a085761396f85611809565b6139bb5760405162461bcd60e51b815260206004820152601a60248201527f534d543a206e6f20736d6172742061726d79206163636f756e7400000000000060448201526064016112a8565b60006139dc60646139d66103e86139d66102bc612bcd61347d565b90613537565b905060006139ea8583613ca5565b90506139f68783613ff8565b613a01878783613ee5565b5050613b24565b613a1184611809565b613a5d5760405162461bcd60e51b815260206004820152601a60248201527f534d543a206e6f20736d6172742061726d79206163636f756e7400000000000060448201526064016112a8565b6000613a8b60646139d6613a846103e86139d66102bc60105461354a90919063ffffffff16565b879061354a565b90506000613a998583613ca5565b90506139f6878784614141565b8015613ac8576000613a8b60646139d66010548761354a90919063ffffffff16565b8115613ae05760006139dc60646139d6613a8461347d565b6000613afc60646139d6601b548761354a90919063ffffffff16565b90506000613b0a8583613ca5565b9050613b168783614259565b613b21878783613ee5565b50505b5050505050565b60008184841115613b4f5760405162461bcd60e51b81526004016112a89190614ec2565b505050900390565b6001600160a01b038216613bad5760405162461bcd60e51b815260206004820152601d60248201527f534d543a206d696e7420746f20746865207a65726f206164647265737300000060448201526064016112a8565b6a0c685fa11e01ec6f00000081600154613bc79190614f31565b1115613c155760405162461bcd60e51b815260206004820152601c60248201527f65786365656473206d6178696d756d20746f74616c20737570706c790000000060448201526064016112a8565b600154613c229082613556565b6001556001600160a01b038216600090815260316020526040902054613c489082613556565b6001600160a01b0383166000818152603160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90613c999085815260200190565b60405180910390a35050565b60006135438284614f88565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b602554600090613d119083613ca5565b1015613d855760405162461bcd60e51b815260206004820152603660248201527f74686520616d6f756e7420746f206265206d696e74656420657863656564732060448201527f6d6178696d756d2070726573616c6520616d6f756e740000000000000000000060648201526084016112a8565b613d8f8282613b57565b602554613d9c9082613ca5565b6025555050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691613e2d9190614e93565b6000604051808303816000865af19150503d8060008114613e6a576040519150601f19603f3d011682016040523d82523d6000602084013e613e6f565b606091505b5091509150818015613e99575080511580613e99575080806020019051810190613e999190614d99565b613b245760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016112a8565b6001600160a01b038316600090815260316020526040812054613f09908390614f88565b1015613f575760405162461bcd60e51b815260206004820152601e60248201527f616d6f756e7420657863656564732063757272656e742062616c616e6365000060448201526064016112a8565b6001600160a01b03821660009081526031602052604081208054839290613f7f908490614f31565b90915550506001600160a01b03831660009081526031602052604081208054839290613fac908490614f88565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161368991815260200190565b600061401460646139d66016548561354a90919063ffffffff16565b9050600061403260646139d66017548661354a90919063ffffffff16565b9050600061405060646139d66018548761354a90919063ffffffff16565b9050600061406e60646139d66019548861354a90919063ffffffff16565b9050600061408c60646139d6601a548961354a90919063ffffffff16565b600c549091506140a79088906001600160a01b031687613ee5565b600e546140bf9088906001600160a01b031685613ee5565b6140cc8761dead84613ee5565b600d546140e49088906001600160a01b031683613ee5565b600b546140fc9088906001600160a01b031686613ee5565b600b54614112906001600160a01b031685614332565b600d54614128906001600160a01b031682614698565b61413287856149e3565b8215613b2157613b2183614a5e565b600061415d60646139d66011548561354a90919063ffffffff16565b9050600061417b60646139d66012548661354a90919063ffffffff16565b9050600061419960646139d66013548761354a90919063ffffffff16565b905060006141b760646139d66014548861354a90919063ffffffff16565b600c549091506141d29088906001600160a01b031684613ee5565b600a546141ea9088906001600160a01b031686613ee5565b600d546142029088906001600160a01b031683613ee5565b600b5461421a9088906001600160a01b031685613ee5565b600b54614230906001600160a01b031684614332565b600d54614246906001600160a01b031682614698565b61424f86614ad2565b613b2186846149e3565b600061427560646139d6601c548561354a90919063ffffffff16565b9050600061429360646139d6601f548661354a90919063ffffffff16565b905060006142b160646139d6601e548761354a90919063ffffffff16565b905060006142cf60646139d6601d548861354a90919063ffffffff16565b600c549091506142ea9087906001600160a01b031686613ee5565b600e546143029087906001600160a01b031685613ee5565b600b5461431a9087906001600160a01b031684613ee5565b600d546131be9087906001600160a01b031683613ee5565b603454604080517fdd445c3100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163dd445c31916004808301926020929190829003018186803b15801561439057600080fd5b505afa1580156143a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143c89190614b49565b90506000603460009054906101000a90046001600160a01b03166001600160a01b03166329166e416040518163ffffffff1660e01b815260040160206040518083038186803b15801561441a57600080fd5b505afa15801561442e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144529190614b49565b90506000603460009054906101000a90046001600160a01b03166001600160a01b03166271c1756040518163ffffffff1660e01b815260040160206040518083038186803b1580156144a357600080fd5b505afa1580156144b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144db9190614b49565b6040805160028082526060820183529293506000929091602083019080368337019050509050838160008151811061452357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061456557634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526040517f095ea7b30000000000000000000000000000000000000000000000000000000081528382166004820152602481018790529085169063095ea7b390604401602060405180830381600087803b1580156145d757600080fd5b505af11580156145eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061460f9190614d99565b506040517f5c11d7950000000000000000000000000000000000000000000000000000000081526001600160a01b03831690635c11d7959061465e90889060009086908c904290600401614ef5565b600060405180830381600087803b15801561467857600080fd5b505af115801561468c573d6000803e3d6000fd5b50505050505050505050565b603454604080517fdd445c3100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163dd445c31916004808301926020929190829003018186803b1580156146f657600080fd5b505afa15801561470a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061472e9190614b49565b90506000603460009054906101000a90046001600160a01b03166001600160a01b03166271c1756040518163ffffffff1660e01b815260040160206040518083038186803b15801561477f57600080fd5b505afa158015614793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147b79190614b49565b604080516002808252606082018352929350600092909160208301908036833701905050905082816000815181106147ff57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050816001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561485857600080fd5b505afa15801561486c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148909190614b49565b816001815181106148b157634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526040517f095ea7b30000000000000000000000000000000000000000000000000000000081528382166004820152602481018690529084169063095ea7b390604401602060405180830381600087803b15801561492357600080fd5b505af1158015614937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061495b9190614d99565b506040517f791ac9470000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063791ac947906149aa90879060009086908b904290600401614ef5565b600060405180830381600087803b1580156149c457600080fd5b505af11580156149d8573d6000803e3d6000fd5b505050505050505050565b600b546040517f8ab599a8000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03848116602483015290911690638ab599a890604401600060405180830381600087803b158015614a4a57600080fd5b505af11580156131be573d6000803e3d6000fd5b600e546040517f3c6b16ab000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0390911690633c6b16ab906024015b600060405180830381600087803b158015614abe57600080fd5b505af1158015613b24573d6000803e3d6000fd5b600a546040517f74bac8760000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152909116906374bac87690602401614aa4565b8035614b288161504d565b919050565b600060208284031215614b3e578081fd5b81356135438161504d565b600060208284031215614b5a578081fd5b81516135438161504d565b60008060408385031215614b77578081fd5b8235614b828161504d565b91506020830135614b928161504d565b809150509250929050565b60008060008060008060c08789031215614bb5578182fd5b8635614bc08161504d565b95506020870135614bd08161504d565b94506040870135614be08161504d565b93506060870135614bf08161504d565b92506080870135614c008161504d565b915060a0870135614c108161504d565b809150509295509295509295565b600080600060608486031215614c32578283fd5b8335614c3d8161504d565b92506020840135614c4d8161504d565b929592945050506040919091013590565b60008060408385031215614c70578182fd5b8235614c7b8161504d565b91506020830135614b9281615062565b60008060408385031215614c9d578182fd5b8235614ca88161504d565b946020939093013593505050565b60006020808385031215614cc8578182fd5b823567ffffffffffffffff80821115614cdf578384fd5b818501915085601f830112614cf2578384fd5b813581811115614d0457614d04615037565b8060051b604051601f19603f83011681018181108582111715614d2957614d29615037565b604052828152858101935084860182860187018a1015614d47578788fd5b8795505b83861015614d7057614d5c81614b1d565b855260019590950194938601938601614d4b565b5098975050505050505050565b600060208284031215614d8e578081fd5b813561354381615062565b600060208284031215614daa578081fd5b815161354381615062565b600060208284031215614dc6578081fd5b5035919050565b600060208284031215614dde578081fd5b5051919050565b60008060008060808587031215614dfa578182fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a08688031215614e2d578283fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000815180845260208085019450808401835b83811015614e885781516001600160a01b031687529582019590820190600101614e63565b509495945050505050565b60008251614ea5818460208701614f9f565b9190910192915050565b6020815260006135436020830184614e50565b6020815260008251806020840152614ee1816040850160208701614f9f565b601f01601f19169190910160400192915050565b85815284602082015260a060408201526000614f1460a0830186614e50565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115614f4457614f44615021565b500190565b600082614f6457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614f8357614f83615021565b500290565b600082821015614f9a57614f9a615021565b500390565b60005b83811015614fba578181015183820152602001614fa2565b83811115612ad55750506000910152565b600181811c90821680614fdf57607f821691505b6020821081141561500057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561501a5761501a615021565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146132a557600080fd5b80151581146132a557600080fdfe534d543a2063616c6c6572206973206e6f7420746865206f70657261746f7200534d543a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f534d543a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212205e38462a08e3916f12d4d254c042f721195eee837f81314246cb8f3fad5acef864736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106106275760003560e01c80637f1794c811610322578063b1ab260c116101a5578063df8408fe116100ec578063f6bcf37711610095578063fccc28131161006f578063fccc281314611151578063fde74dce14611167578063ff4658f81461118757600080fd5b8063f6bcf377146110fc578063f7fd33991461111c578063fca464f71461113c57600080fd5b8063efcc52de116100c6578063efcc52de146110b0578063f2fde38b146110c6578063f40cf331146110e657600080fd5b8063df8408fe14611050578063e9a8a17a14611070578063ee356ec01461109057600080fd5b8063cb9cecdd1161014e578063dd2f147111610128578063dd2f147114610fde578063dd62ed3e14610ff4578063de8ec6651461103a57600080fd5b8063cb9cecdd14610f79578063cbe0e3ed14610f99578063cf9d101c14610fb957600080fd5b8063c0f8c9b91161017f578063c0f8c9b914610f37578063c25129ad14610f4d578063c9cf778914610f6357600080fd5b8063b1ab260c14610eeb578063b661ef7814610f01578063b74f263214610f1757600080fd5b80639d631f0a11610269578063a7fa295711610212578063ab4fd424116101ec578063ab4fd42414610e95578063ac0a86c514610eab578063ad47751c14610ecb57600080fd5b8063a7fa295714610e3f578063a9059cbb14610e5f578063a95bada514610e7f57600080fd5b8063a457c2d711610243578063a457c2d714610ddf578063a68a91ee14610dff578063a7d701da14610e1f57600080fd5b80639d631f0a14610d895780639f611b0814610da9578063a1c1757c14610dbf57600080fd5b80638c14b796116102cb5780638f02bb5b116102a55780638f02bb5b14610d34578063956fef8b14610d5457806395d89b4114610d7457600080fd5b80638c14b79614610cf45780638da5cb5b14610c965780638e67230014610d1457600080fd5b8063893d20e8116102fc578063893d20e814610c965780638a5aa2a814610cb45780638b4cee0814610cd457600080fd5b80637f1794c814610c4a5780637f55d49114610c6057806388de3e8314610c7657600080fd5b806344c40538116104aa57806362636507116103f157806370b0a8431161039a5780637abdc1ca116103745780637abdc1ca14610bf65780637bdf840414610c0c5780637e80b9d214610c2a57600080fd5b806370b0a84314610bb9578063715018a614610bd957806372fdaae314610bee57600080fd5b80636951ec2d116103cb5780636951ec2d14610b295780636af6592914610b6357806370a0823114610b8357600080fd5b80636263650714610ad45780636291f36714610ae957806364ae9fa814610b0957600080fd5b80635342acb4116104535780635ca3f8db1161042d5780635ca3f8db14610a6d5780636030de2a14610a8d5780636201585214610abe57600080fd5b80635342acb4146109f4578063542efd3014610a2d578063583e056814610a4d57600080fd5b8063515b94fb11610484578063515b94fb1461099e57806353048640146109be578063530e72a9146109d457600080fd5b806344c405381461094657806349c1f12a1461095c5780634bbe64e11461097e57600080fd5b806323b872dd1161056e57806333ea7fa3116105175780633cc1e871116104f15780633cc1e871146108fa57806341009e5f14610910578063446515631461092657600080fd5b806333ea7fa31461088257806339509351146108a25780633b860c93146108c257600080fd5b8063313ce56711610548578063313ce5671461082b57806333039d3d1461084d578063339f40e11461086c57600080fd5b806323b872dd146107b157806324cae07f146107d15780632f92e9f8146107e757600080fd5b806312455d0f116105d05780631d8e14ae116105aa5780631d8e14ae1461075b578063200a692d1461077b57806322f988c31461079157600080fd5b806312455d0f1461071a57806318160ddd146107305780631bb8e33d1461074557600080fd5b80630cc835a3116106015780630cc835a3146106b25780630d29573f146106d45780631194d0641461070457600080fd5b806306fdde0314610633578063094389e81461065e578063095ea7b31461068257600080fd5b3661062e57005b600080fd5b34801561063f57600080fd5b506106486111a7565b6040516106559190614ec2565b60405180910390f35b34801561066a57600080fd5b5061067460255481565b604051908152602001610655565b34801561068e57600080fd5b506106a261069d366004614c8b565b611239565b6040519015158152602001610655565b3480156106be57600080fd5b506106d26106cd366004614db5565b61124f565b005b3480156106e057600080fd5b506106a26106ef366004614b2d565b60336020526000908152604090205460ff1681565b34801561071057600080fd5b50610674601e5481565b34801561072657600080fd5b50610674602f5481565b34801561073c57600080fd5b50600154610674565b34801561075157600080fd5b50610674602e5481565b34801561076757600080fd5b50610674610776366004614db5565b611362565b34801561078757600080fd5b5061067460155481565b34801561079d57600080fd5b506106d26107ac366004614d7d565b611383565b3480156107bd57600080fd5b506106a26107cc366004614c1e565b611448565b3480156107dd57600080fd5b50610674601a5481565b3480156107f357600080fd5b50601654601754601854601954601a54604080519586526020860194909452928401919091526060830152608082015260a001610655565b34801561083757600080fd5b5060045460405160ff9091168152602001610655565b34801561085957600080fd5b506106746a0c685fa11e01ec6f00000081565b34801561087857600080fd5b5061067460265481565b34801561088e57600080fd5b506106d261089d366004614c5e565b6114b1565b3480156108ae57600080fd5b506106a26108bd366004614c8b565b611572565b3480156108ce57600080fd5b506006546108e2906001600160a01b031681565b6040516001600160a01b039091168152602001610655565b34801561090657600080fd5b5061067460275481565b34801561091c57600080fd5b50610674601d5481565b34801561093257600080fd5b50600a546108e2906001600160a01b031681565b34801561095257600080fd5b5061067460285481565b34801561096857600080fd5b506109716115a8565b6040516106559190614eaf565b34801561098a57600080fd5b506106d2610999366004614c8b565b6116f3565b3480156109aa57600080fd5b506106a26109b9366004614b2d565b611809565b3480156109ca57600080fd5b50610674601c5481565b3480156109e057600080fd5b506106d26109ef366004614d7d565b6118c0565b348015610a0057600080fd5b506106a2610a0f366004614b2d565b6001600160a01b031660009081526033602052604090205460ff1690565b348015610a3957600080fd5b506106d2610a48366004614c8b565b611983565b348015610a5957600080fd5b506007546108e2906001600160a01b031681565b348015610a7957600080fd5b506106d2610a88366004614b2d565b611a82565b348015610a9957600080fd5b50601054601554601b5460408051938452602084019290925290820152606001610655565b348015610aca57600080fd5b5061067460135481565b348015610ae057600080fd5b506106d2611b7f565b348015610af557600080fd5b506106d2610b04366004614c8b565b611c17565b348015610b1557600080fd5b506106d2610b24366004614b9d565b611d2c565b348015610b3557600080fd5b50601c54601d54601e54601f545b604080519485526020850193909352918301526060820152608001610655565b348015610b6f57600080fd5b50600c546108e2906001600160a01b031681565b348015610b8f57600080fd5b50610674610b9e366004614b2d565b6001600160a01b031660009081526031602052604090205490565b348015610bc557600080fd5b506008546108e2906001600160a01b031681565b348015610be557600080fd5b506106d2612080565b6106d26120e6565b348015610c0257600080fd5b5061067460195481565b348015610c1857600080fd5b50601154601254601354601454610b43565b348015610c3657600080fd5b506005546108e2906001600160a01b031681565b348015610c5657600080fd5b5061067460245481565b348015610c6c57600080fd5b50610674602d5481565b348015610c8257600080fd5b50610674610c91366004614db5565b6121bc565b348015610ca257600080fd5b506000546001600160a01b03166108e2565b348015610cc057600080fd5b506106d2610ccf366004614cb6565b6121cc565b348015610ce057600080fd5b506106d2610cef366004614db5565b612327565b348015610d0057600080fd5b506009546108e2906001600160a01b031681565b348015610d2057600080fd5b506106d2610d2f366004614c8b565b61242f565b348015610d4057600080fd5b506106d2610d4f366004614db5565b61253f565b348015610d6057600080fd5b506106d2610d6f366004614b2d565b612647565b348015610d8057600080fd5b50610648612744565b348015610d9557600080fd5b506106d2610da4366004614c8b565b612753565b348015610db557600080fd5b5061067460115481565b348015610dcb57600080fd5b506106d2610dda366004614de5565b612869565b348015610deb57600080fd5b506106a2610dfa366004614c8b565b612929565b348015610e0b57600080fd5b506106d2610e1a366004614db5565b612978565b348015610e2b57600080fd5b506106d2610e3a366004614d7d565b612adb565b348015610e4b57600080fd5b50600f546108e2906001600160a01b031681565b348015610e6b57600080fd5b506106a2610e7a366004614c8b565b612b79565b348015610e8b57600080fd5b5061067460185481565b348015610ea157600080fd5b50610674601b5481565b348015610eb757600080fd5b506108e2610ec6366004614db5565b612b86565b348015610ed757600080fd5b50600e546108e2906001600160a01b031681565b348015610ef757600080fd5b5061067460235481565b348015610f0d57600080fd5b5061067460175481565b348015610f2357600080fd5b50610674610f32366004614db5565b612bb0565b348015610f4357600080fd5b5061067460125481565b348015610f5957600080fd5b5061067460295481565b348015610f6f57600080fd5b5061067460165481565b348015610f8557600080fd5b506106d2610f94366004614e16565b612bd3565b348015610fa557600080fd5b506106d2610fb4366004614de5565b612c9f565b348015610fc557600080fd5b506004546108e29061010090046001600160a01b031681565b348015610fea57600080fd5b5061067460145481565b34801561100057600080fd5b5061067461100f366004614b65565b6001600160a01b03918216600090815260326020908152604080832093909416825291909152205490565b34801561104657600080fd5b5061067460305481565b34801561105c57600080fd5b506106d261106b366004614c5e565b612d55565b34801561107c57600080fd5b5061067461108b366004614db5565b612ea6565b34801561109c57600080fd5b506106d26110ab366004614db5565b612ec3565b3480156110bc57600080fd5b5061067460105481565b3480156110d257600080fd5b506106d26110e1366004614b2d565b6131c6565b3480156110f257600080fd5b50610674601f5481565b34801561110857600080fd5b506106d2611117366004614d7d565b6132a8565b34801561112857600080fd5b506106a2611137366004614b2d565b61336c565b34801561114857600080fd5b5061067461347d565b34801561115d57600080fd5b506108e261dead81565b34801561117357600080fd5b50600d546108e2906001600160a01b031681565b34801561119357600080fd5b50600b546108e2906001600160a01b031681565b6060600280546111b690614fcb565b80601f01602080910402602001604051908101604052809291908181526020018280546111e290614fcb565b801561122f5780601f106112045761010080835404028352916020019161122f565b820191906000526020600020905b81548152906001019060200180831161121257829003601f168201915b5050505050905090565b6000611246338484613562565b50600192915050565b6008546001600160a01b031633148061127257506000546001600160a01b031633145b6112b15760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064015b60405180910390fd5b606481106113265760405162461bcd60e51b8152602060048201526024808201527f534d543a206275795461784665652065786365656473206d6178696d756d207660448201527f616c75650000000000000000000000000000000000000000000000000000000060648201526084016112a8565b60108190556040518181527f03cd3090e7c409e4a7ffd2d90ff610979f4a94a87a512188b7b615671bfb772f906020015b60405180910390a150565b6020818154811061137257600080fd5b600091825260209091200154905081565b6008546001600160a01b03163314806113a657506000546001600160a01b031633145b6113e05760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c80548215156301000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff9091161790556040517f58d1576e2475fe515de111f492583918cfdbca4eedabf5ee9c20a49d8941b6b29061135790831515815260200190565b6000611455848484613696565b6114a784336114a2856040518060600160405280602681526020016150b4602691396001600160a01b038a1660009081526032602090815260408083203384529091529020549190613b2b565b613562565b5060019392505050565b6008546001600160a01b03163314806114d457506000546001600160a01b031633145b61150e5760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b6001600160a01b0382166000818152602b6020908152604091829020805460ff19168515159081179091558251938452908301527f9d279f0c3c0d3f9a1afba1ead1fb55e2c602d633014f228b87ec7b6c66d6c08791015b60405180910390a15050565b3360008181526032602090815260408083206001600160a01b038716845290915281205490916112469185906114a29086613556565b6060806000805b602a548110156116eb5760006001600160a01b0316602a82815481106115e557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316148015906116525750602b6000602a838154811061162857634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16155b156116d957602a818154811061167857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316838361169881615006565b9450815181106116b857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b806116e381615006565b9150506115af565b509092915050565b6008546001600160a01b031633148061171657506000546001600160a01b031633145b6117505760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c54819062010000900460ff1615801561177857506000816027546117769190614f88565b115b6117ea5760405162461bcd60e51b815260206004820152602760248201527f4c6f636b65642074686520616d6f756e7420666f72207375727072697a65207260448201527f6577617264732e0000000000000000000000000000000000000000000000000060648201526084016112a8565b6117f48383613b57565b6027546118019083613ca5565b602755505050565b6009546000906001600160a01b031661182457506000919050565b6009546040517fe39fe88e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529091169063e39fe88e9060240160206040518083038186803b15801561188257600080fd5b505afa158015611896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ba9190614d99565b92915050565b6008546001600160a01b03163314806118e357506000546001600160a01b031633145b61191d5760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c8054821515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091161790556040517f11689aff0a3631ff5f969a8e9d824430602059e31d928a19fc7d61692a9712dc9061135790831515815260200190565b6008546001600160a01b03163314806119a657506000546001600160a01b031633145b6119e05760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b6025546000906119f09083613ca5565b1015611a645760405162461bcd60e51b815260206004820152603660248201527f74686520616d6f756e7420746f206265206d696e74656420657863656564732060448201527f6d6178696d756d2070726573616c6520616d6f756e740000000000000000000060648201526084016112a8565b611a6e8282613b57565b602654611a7b9082613ca5565b6026555050565b6008546001600160a01b0316331480611aa557506000546001600160a01b031633145b611adf5760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b6001600160a01b038116611b355760405162461bcd60e51b815260206004820152601d60248201527f534d543a206e6f7420616c6c6f776564207a65726f206164647265737300000060448201526064016112a8565b600980546001600160a01b0319166001600160a01b0383169081179091556040517fc9dab044ef39a4c54ae3e0e5cb2fa573d051392d2ba745976e7077566ec0ca3890600090a250565b6008546001600160a01b0316331480611ba257506000546001600160a01b031633145b611bdc5760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b4260228190556040519081527f7cbbfcb7566a7ff4a2a9d05b0ab00569fabbe7e5578f501743dee5031369a0cb9060200160405180910390a1565b6008546001600160a01b0316331480611c3a57506000546001600160a01b031633145b611c745760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c548190610100900460ff16158015611c9b5750600081602454611c999190614f88565b115b611d0d5760405162461bcd60e51b815260206004820152602660248201527f4c6f636b65642074686520616d6f756e7420666f72206661726d696e6720726560448201527f77617264732e000000000000000000000000000000000000000000000000000060648201526084016112a8565b611d178383613b57565b602454611d249083613ca5565b602455505050565b6008546001600160a01b0316331480611d4f57506000546001600160a01b031633145b611d895760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b600a546001600160a01b03878116911614801590611daf57506001600160a01b03861615155b15611e0157600a80546001600160a01b03908116600090815260336020526040808220805460ff1990811690915584546001600160a01b031916938b1693841790945591815220805490911660011790555b600b546001600160a01b03868116911614801590611e2757506001600160a01b03851615155b15611e7957600b80546001600160a01b03908116600090815260336020526040808220805460ff1990811690915584546001600160a01b031916938a1693841790945591815220805490911660011790555b600c546001600160a01b03858116911614801590611e9f57506001600160a01b03841615155b15611ef157600c80546001600160a01b03908116600090815260336020526040808220805460ff1990811690915584546001600160a01b03191693891693841790945591815220805490911660011790555b600d546001600160a01b03848116911614801590611f1757506001600160a01b03831615155b15611f6957600d80546001600160a01b03908116600090815260336020526040808220805460ff1990811690915584546001600160a01b03191693881693841790945591815220805490911660011790555b600e546001600160a01b03838116911614801590611f8f57506001600160a01b03821615155b15611fe157600e80546001600160a01b03908116600090815260336020526040808220805460ff1990811690915584546001600160a01b03191693871693841790945591815220805490911660011790555b600f546001600160a01b0382811691161480159061200757506001600160a01b03811615155b1561202857600f80546001600160a01b0319166001600160a01b0383161790555b604080516001600160a01b03858116825284811660208301528087169288821692918a16917fea39236f613486e3c3a28ea53cb64489dabe5c6b3a3d59cfed61a147f1966133910160405180910390a4505050505050565b6000546001600160a01b031633146120da5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016112a8565b6120e46000613cb1565b565b3360006120f234612bb0565b905034826001600160a01b03163110156121745760405162461bcd60e51b815260206004820152603060248201527f62616c616e636520697320746f6f20736d616c6c2c20796f752063616e27742060448201527f70617920666f72206d696e74696e672e0000000000000000000000000000000060648201526084016112a8565b61217e3382613d01565b6008546040516001600160a01b03909116903480156108fc02916000818181858888f193505050501580156121b7573d6000803e3d6000fd5b505050565b6021818154811061137257600080fd5b6008546001600160a01b03163314806121ef57506000546001600160a01b031633145b6122295760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b6000805b82518110156122f45760006001600160a01b031683828151811061226157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146122e257602a83828151811061229957634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b03909216919091179055816122de81615006565b9250505b806122ec81615006565b91505061222d565b507fbc613d7698cb74d2db24ad91ffe69371b98b24a8f189d577c9c5908c0496bc37825160405161156691815260200190565b6008546001600160a01b031633148061234a57506000546001600160a01b031633145b6123845760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b606481106123fa5760405162461bcd60e51b815260206004820152602560248201527f534d543a2073656c6c5461784665652065786365656473206d6178696d756d2060448201527f76616c756500000000000000000000000000000000000000000000000000000060648201526084016112a8565b60158190556040518181527f274faecd49018fb411281f27986b6b4acc86e5db4100735531acd18b7b6d5f9390602001611357565b6008546001600160a01b031633148061245257506000546001600160a01b031633145b61248c5760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c54819060ff161580156124ae57506000816023546124ac9190614f88565b115b6125205760405162461bcd60e51b815260206004820152603060248201527f4c6f636b65642074686520616d6f756e7420666f7220696e697469616c20534d60448201527f542d424e42206c69717569646974792e0000000000000000000000000000000060648201526084016112a8565b61252a8383613b57565b6023546125379083613ca5565b602355505050565b6008546001600160a01b031633148061256257506000546001600160a01b031633145b61259c5760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b606481106126125760405162461bcd60e51b815260206004820152602960248201527f534d543a207472616e736665725461784665652065786365656473206d61786960448201527f6d756d2076616c7565000000000000000000000000000000000000000000000060648201526084016112a8565b601b8190556040518181527f066ec06a21c2e65d6e69290f91b812f9171e098dfef39c8837c4ed6c57bd02ec90602001611357565b6008546001600160a01b031633148061266a57506000546001600160a01b031633145b6126a45760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b6001600160a01b0381166126fa5760405162461bcd60e51b815260206004820152601d60248201527f534d543a206e6f7420616c6c6f776564207a65726f206164647265737300000060448201526064016112a8565b600b80546001600160a01b0319166001600160a01b0383169081179091556040517f83ab943c0896225bd8b132456a8e2a247848ba8d8524da9fe44cbcb907b4571490600090a250565b6060600380546111b690614fcb565b6008546001600160a01b031633148061277657506000546001600160a01b031633145b6127b05760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c5481906301000000900460ff161580156127d957506000816028546127d79190614f88565b115b61284a5760405162461bcd60e51b8152602060048201526024808201527f4c6f636b65642074686520616d6f756e7420666f72206368657374207265776160448201527f7264732e0000000000000000000000000000000000000000000000000000000060648201526084016112a8565b6128548383613b57565b6028546128619083613ca5565b602855505050565b6008546001600160a01b031633148061288c57506000546001600160a01b031633145b6128c65760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b60118490556012839055601382905560148190556040805185815260208101859052908101839052606081018290527fdabbdd7e45811850a1d2f628e202253f234812ba7768c53f23229e50803350d1906080015b60405180910390a150505050565b600061124633846114a285604051806060016040528060238152602001615091602391393360009081526032602090815260408083206001600160a01b038d1684529091529020549190613b2b565b60045461010090046001600160a01b0316600061299d83670de0b6b3a764000061354a565b905060006129aa82612ea6565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290915084906001600160a01b038516906370a082319060240160206040518083038186803b158015612a0757600080fd5b505afa158015612a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3f9190614dcd565b1015612ab35760405162461bcd60e51b815260206004820152603060248201527f62616c616e636520697320746f6f20736d616c6c2c20796f752063616e27742060448201527f70617920666f72206d696e74696e672e0000000000000000000000000000000060648201526084016112a8565b612abd3382613d01565b600854612ad59084906001600160a01b031684613da3565b50505050565b6008546001600160a01b0316331480612afe57506000546001600160a01b031633145b612b385760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c805460ff19168215159081179091556040519081527f299c2fc45124dd9f4c59056e6d8b78a8a67694b7850dfaefcf8513a705abaac590602001611357565b6000611246338484613696565b602a8181548110612b9657600080fd5b6000918252602090912001546001600160a01b0316905081565b60006118ba603054612bcd602f548561353790919063ffffffff16565b9061354a565b6008546001600160a01b0316331480612bf657506000546001600160a01b031633145b612c305760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b6016859055601784905560188390556019829055601a819055604080518681526020810186905290810184905260608101839052608081018290527fed3c6a03d28d3cbb601cf4e05eed412c0e4df1fac68b43758c84200edcb750329060a00160405180910390a15050505050565b6008546001600160a01b0316331480612cc257506000546001600160a01b031633145b612cfc5760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b601c849055601d839055601e829055601f8190556040805185815260208101859052908101839052606081018290527fa1b517484aabc470f36b8b4d5ad20eba494f25defdb1d863dcfd6f9d89e959a49060800161291b565b6008546001600160a01b0316331480612d7857506000546001600160a01b031633145b612db25760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b6001600160a01b03821660009081526033602052604090205460ff1615158115151415612e475760405162461bcd60e51b815260206004820152602160248201527f534d543a20616c7265616479206578636c75646564206f7220696e636c75646560448201527f640000000000000000000000000000000000000000000000000000000000000060648201526084016112a8565b6001600160a01b038216600081815260336020908152604091829020805460ff191685151590811790915591519182527fd5144d2a6c8ff9b87b7a40852df5102cab2ce561c06b56cc6fe7ccf1fa7f8c2d910160405180910390a25050565b60006118ba602e54612bcd602d548561353790919063ffffffff16565b60045461010090046001600160a01b03166000612ee883670de0b6b3a764000061354a565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529091506000906001600160a01b0384169063dd62ed3e9060440160206040518083038186803b158015612f4c57600080fd5b505afa158015612f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f849190614dcd565b90506000612f9183612ea6565b9050828210156130095760405162461bcd60e51b815260206004820152602760248201527f636f73742069732074686520736d616c6c6572207468616e20616c6c6f77656460448201527f20616d6f756e740000000000000000000000000000000000000000000000000060648201526084016112a8565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015283906001600160a01b038616906370a082319060240160206040518083038186803b15801561306357600080fd5b505afa158015613077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309b9190614dcd565b101561310f5760405162461bcd60e51b815260206004820152603060248201527f62616c616e636520697320746f6f20736d616c6c2c20796f752063616e27742060448201527f70617920666f72206d696e74696e672e0000000000000000000000000000000060648201526084016112a8565b6131193382613d01565b6008546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03918216602482015260448101859052908516906323b872dd90606401602060405180830381600087803b15801561318657600080fd5b505af115801561319a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131be9190614d99565b505050505050565b6000546001600160a01b031633146132205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016112a8565b6001600160a01b03811661329c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016112a8565b6132a581613cb1565b50565b6008546001600160a01b03163314806132cb57506000546001600160a01b031633145b6133055760405162461bcd60e51b815260206004820152601f602482015260008051602061507183398151915260448201526064016112a8565b602c805482151562010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff9091161790556040517fdb6dd66b90893f4093dca838afb2024e286897d1367609ff62dc668533c4a98e9061135790831515815260200190565b600080805b602a548110156134765760006001600160a01b0316602a82815481106133a757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316148015906134145750602b6000602a83815481106133ea57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16155b1561346457836001600160a01b0316602a828154811061344457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316141561346457613476565b8061346e81615006565b915050613371565b5092915050565b6000806022544261348e9190614f88565b905060005b60205481101561352d57602081815481106134be57634e487b7160e01b600052603260045260246000fd5b906000526020600020015460186134d59190614f69565b6134e190610e10614f69565b82101561351b576021818154811061350957634e487b7160e01b600052603260045260246000fd5b90600052602060002001549250505090565b8061352581615006565b915050613493565b5060155491505090565b60006135438284614f49565b9392505050565b60006135438284614f69565b60006135438284614f31565b6001600160a01b0383166135de5760405162461bcd60e51b815260206004820152602260248201527f534d543a20617070726f76652066726f6d20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016112a8565b6001600160a01b0382166136345760405162461bcd60e51b815260206004820181905260248201527f534d543a20617070726f766520746f20746865207a65726f206164647265737360448201526064016112a8565b6001600160a01b0383811660008181526032602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166137125760405162461bcd60e51b815260206004820152602360248201527f534d543a207472616e736665722066726f6d20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016112a8565b6001600160a01b03821661378e5760405162461bcd60e51b815260206004820152602160248201527f534d543a207472616e7366657220746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016112a8565b6001600160a01b03831660009081526031602052604090205481111561381c5760405162461bcd60e51b815260206004820152602360248201527f5468652062616c616e6365206f662073656e64657220697320746f6f20736d6160448201527f6c6c2e000000000000000000000000000000000000000000000000000000000060648201526084016112a8565b6001600160a01b03831660009081526033602052604090205460ff168061385b57506001600160a01b03821660009081526033602052604090205460ff165b1561386b576121b7838383613ee5565b6005546000906001600160a01b038481169116148061389757506006546001600160a01b038481169116145b6005549091506000906001600160a01b03868116911614806138c657506006546001600160a01b038681169116145b600f549091506001600160a01b0386811691161480156138e35750815b156138f8576138f3858585613ee5565b613b24565b8080156139125750600f546001600160a01b038581169116145b15613922576138f3858585613ee5565b600f546001600160a01b038681169116148061394b5750600f546001600160a01b038581169116145b15613aa657600f546001600160a01b0385811691161415613a085761396f85611809565b6139bb5760405162461bcd60e51b815260206004820152601a60248201527f534d543a206e6f20736d6172742061726d79206163636f756e7400000000000060448201526064016112a8565b60006139dc60646139d66103e86139d66102bc612bcd61347d565b90613537565b905060006139ea8583613ca5565b90506139f68783613ff8565b613a01878783613ee5565b5050613b24565b613a1184611809565b613a5d5760405162461bcd60e51b815260206004820152601a60248201527f534d543a206e6f20736d6172742061726d79206163636f756e7400000000000060448201526064016112a8565b6000613a8b60646139d6613a846103e86139d66102bc60105461354a90919063ffffffff16565b879061354a565b90506000613a998583613ca5565b90506139f6878784614141565b8015613ac8576000613a8b60646139d66010548761354a90919063ffffffff16565b8115613ae05760006139dc60646139d6613a8461347d565b6000613afc60646139d6601b548761354a90919063ffffffff16565b90506000613b0a8583613ca5565b9050613b168783614259565b613b21878783613ee5565b50505b5050505050565b60008184841115613b4f5760405162461bcd60e51b81526004016112a89190614ec2565b505050900390565b6001600160a01b038216613bad5760405162461bcd60e51b815260206004820152601d60248201527f534d543a206d696e7420746f20746865207a65726f206164647265737300000060448201526064016112a8565b6a0c685fa11e01ec6f00000081600154613bc79190614f31565b1115613c155760405162461bcd60e51b815260206004820152601c60248201527f65786365656473206d6178696d756d20746f74616c20737570706c790000000060448201526064016112a8565b600154613c229082613556565b6001556001600160a01b038216600090815260316020526040902054613c489082613556565b6001600160a01b0383166000818152603160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90613c999085815260200190565b60405180910390a35050565b60006135438284614f88565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b602554600090613d119083613ca5565b1015613d855760405162461bcd60e51b815260206004820152603660248201527f74686520616d6f756e7420746f206265206d696e74656420657863656564732060448201527f6d6178696d756d2070726573616c6520616d6f756e740000000000000000000060648201526084016112a8565b613d8f8282613b57565b602554613d9c9082613ca5565b6025555050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691613e2d9190614e93565b6000604051808303816000865af19150503d8060008114613e6a576040519150601f19603f3d011682016040523d82523d6000602084013e613e6f565b606091505b5091509150818015613e99575080511580613e99575080806020019051810190613e999190614d99565b613b245760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016112a8565b6001600160a01b038316600090815260316020526040812054613f09908390614f88565b1015613f575760405162461bcd60e51b815260206004820152601e60248201527f616d6f756e7420657863656564732063757272656e742062616c616e6365000060448201526064016112a8565b6001600160a01b03821660009081526031602052604081208054839290613f7f908490614f31565b90915550506001600160a01b03831660009081526031602052604081208054839290613fac908490614f88565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161368991815260200190565b600061401460646139d66016548561354a90919063ffffffff16565b9050600061403260646139d66017548661354a90919063ffffffff16565b9050600061405060646139d66018548761354a90919063ffffffff16565b9050600061406e60646139d66019548861354a90919063ffffffff16565b9050600061408c60646139d6601a548961354a90919063ffffffff16565b600c549091506140a79088906001600160a01b031687613ee5565b600e546140bf9088906001600160a01b031685613ee5565b6140cc8761dead84613ee5565b600d546140e49088906001600160a01b031683613ee5565b600b546140fc9088906001600160a01b031686613ee5565b600b54614112906001600160a01b031685614332565b600d54614128906001600160a01b031682614698565b61413287856149e3565b8215613b2157613b2183614a5e565b600061415d60646139d66011548561354a90919063ffffffff16565b9050600061417b60646139d66012548661354a90919063ffffffff16565b9050600061419960646139d66013548761354a90919063ffffffff16565b905060006141b760646139d66014548861354a90919063ffffffff16565b600c549091506141d29088906001600160a01b031684613ee5565b600a546141ea9088906001600160a01b031686613ee5565b600d546142029088906001600160a01b031683613ee5565b600b5461421a9088906001600160a01b031685613ee5565b600b54614230906001600160a01b031684614332565b600d54614246906001600160a01b031682614698565b61424f86614ad2565b613b2186846149e3565b600061427560646139d6601c548561354a90919063ffffffff16565b9050600061429360646139d6601f548661354a90919063ffffffff16565b905060006142b160646139d6601e548761354a90919063ffffffff16565b905060006142cf60646139d6601d548861354a90919063ffffffff16565b600c549091506142ea9087906001600160a01b031686613ee5565b600e546143029087906001600160a01b031685613ee5565b600b5461431a9087906001600160a01b031684613ee5565b600d546131be9087906001600160a01b031683613ee5565b603454604080517fdd445c3100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163dd445c31916004808301926020929190829003018186803b15801561439057600080fd5b505afa1580156143a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143c89190614b49565b90506000603460009054906101000a90046001600160a01b03166001600160a01b03166329166e416040518163ffffffff1660e01b815260040160206040518083038186803b15801561441a57600080fd5b505afa15801561442e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144529190614b49565b90506000603460009054906101000a90046001600160a01b03166001600160a01b03166271c1756040518163ffffffff1660e01b815260040160206040518083038186803b1580156144a357600080fd5b505afa1580156144b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144db9190614b49565b6040805160028082526060820183529293506000929091602083019080368337019050509050838160008151811061452357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061456557634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526040517f095ea7b30000000000000000000000000000000000000000000000000000000081528382166004820152602481018790529085169063095ea7b390604401602060405180830381600087803b1580156145d757600080fd5b505af11580156145eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061460f9190614d99565b506040517f5c11d7950000000000000000000000000000000000000000000000000000000081526001600160a01b03831690635c11d7959061465e90889060009086908c904290600401614ef5565b600060405180830381600087803b15801561467857600080fd5b505af115801561468c573d6000803e3d6000fd5b50505050505050505050565b603454604080517fdd445c3100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163dd445c31916004808301926020929190829003018186803b1580156146f657600080fd5b505afa15801561470a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061472e9190614b49565b90506000603460009054906101000a90046001600160a01b03166001600160a01b03166271c1756040518163ffffffff1660e01b815260040160206040518083038186803b15801561477f57600080fd5b505afa158015614793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147b79190614b49565b604080516002808252606082018352929350600092909160208301908036833701905050905082816000815181106147ff57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050816001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561485857600080fd5b505afa15801561486c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148909190614b49565b816001815181106148b157634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526040517f095ea7b30000000000000000000000000000000000000000000000000000000081528382166004820152602481018690529084169063095ea7b390604401602060405180830381600087803b15801561492357600080fd5b505af1158015614937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061495b9190614d99565b506040517f791ac9470000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063791ac947906149aa90879060009086908b904290600401614ef5565b600060405180830381600087803b1580156149c457600080fd5b505af11580156149d8573d6000803e3d6000fd5b505050505050505050565b600b546040517f8ab599a8000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03848116602483015290911690638ab599a890604401600060405180830381600087803b158015614a4a57600080fd5b505af11580156131be573d6000803e3d6000fd5b600e546040517f3c6b16ab000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0390911690633c6b16ab906024015b600060405180830381600087803b158015614abe57600080fd5b505af1158015613b24573d6000803e3d6000fd5b600a546040517f74bac8760000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152909116906374bac87690602401614aa4565b8035614b288161504d565b919050565b600060208284031215614b3e578081fd5b81356135438161504d565b600060208284031215614b5a578081fd5b81516135438161504d565b60008060408385031215614b77578081fd5b8235614b828161504d565b91506020830135614b928161504d565b809150509250929050565b60008060008060008060c08789031215614bb5578182fd5b8635614bc08161504d565b95506020870135614bd08161504d565b94506040870135614be08161504d565b93506060870135614bf08161504d565b92506080870135614c008161504d565b915060a0870135614c108161504d565b809150509295509295509295565b600080600060608486031215614c32578283fd5b8335614c3d8161504d565b92506020840135614c4d8161504d565b929592945050506040919091013590565b60008060408385031215614c70578182fd5b8235614c7b8161504d565b91506020830135614b9281615062565b60008060408385031215614c9d578182fd5b8235614ca88161504d565b946020939093013593505050565b60006020808385031215614cc8578182fd5b823567ffffffffffffffff80821115614cdf578384fd5b818501915085601f830112614cf2578384fd5b813581811115614d0457614d04615037565b8060051b604051601f19603f83011681018181108582111715614d2957614d29615037565b604052828152858101935084860182860187018a1015614d47578788fd5b8795505b83861015614d7057614d5c81614b1d565b855260019590950194938601938601614d4b565b5098975050505050505050565b600060208284031215614d8e578081fd5b813561354381615062565b600060208284031215614daa578081fd5b815161354381615062565b600060208284031215614dc6578081fd5b5035919050565b600060208284031215614dde578081fd5b5051919050565b60008060008060808587031215614dfa578182fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a08688031215614e2d578283fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000815180845260208085019450808401835b83811015614e885781516001600160a01b031687529582019590820190600101614e63565b509495945050505050565b60008251614ea5818460208701614f9f565b9190910192915050565b6020815260006135436020830184614e50565b6020815260008251806020840152614ee1816040850160208701614f9f565b601f01601f19169190910160400192915050565b85815284602082015260a060408201526000614f1460a0830186614e50565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115614f4457614f44615021565b500190565b600082614f6457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614f8357614f83615021565b500290565b600082821015614f9a57614f9a615021565b500390565b60005b83811015614fba578181015183820152602001614fa2565b83811115612ad55750506000910152565b600181811c90821680614fdf57607f821691505b6020821081141561500057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561501a5761501a615021565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146132a557600080fd5b80151581146132a557600080fdfe534d543a2063616c6c6572206973206e6f7420746865206f70657261746f7200534d543a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f534d543a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212205e38462a08e3916f12d4d254c042f721195eee837f81314246cb8f3fad5acef864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_getCurrentSellTax()": {
        "details": "get current sellTax percent through sell tax tier system"
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "constructor": {
        "details": "Sets the values for busdContract, {totalSupply} and tax addresses"
      },
      "decimals()": {
        "details": "Returns the token decimals."
      },
      "excludeFromFee(address,bool)": {
        "details": "Exclude the address from fee."
      },
      "getOwner()": {
        "details": "Returns the bep token owner."
      },
      "isExcludedFromFee(address)": {
        "details": "Returns the address is excluded from burn fee or not."
      },
      "name()": {
        "details": "Returns the token name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "resetStartTimestamp()": {
        "details": "start Sell Tax tier system again "
      },
      "setBuyFee(uint256)": {
        "details": "Sets value for _buyTaxFee with {buyTaxFee} in emergency status."
      },
      "setBuyTaxFees(uint256,uint256,uint256,uint256)": {
        "details": "Sets buying tax fees"
      },
      "setGoldenTreeAddress(address)": {
        "details": "Sets value for _goldenTreePoolAddress"
      },
      "setSellFee(uint256)": {
        "details": "Sets value for _sellTaxFee with {sellTaxFee} in emergency status."
      },
      "setSellTaxFees(uint256,uint256,uint256,uint256,uint256)": {
        "details": "Sets selling tax fees"
      },
      "setSmartArmyAddress(address)": {
        "details": "Sets value for _smartArmy"
      },
      "setTaxAddresses(address,address,address,address,address,address)": {
        "details": "Sets values for tax addresses "
      },
      "setTransferFee(uint256)": {
        "details": "Sets value for _transferTaxFee with {transferTaxFee} in emergency status."
      },
      "setTransferTaxFees(uint256,uint256,uint256,uint256)": {
        "details": "Sets buying tax fees"
      },
      "symbol()": {
        "details": "Returns the token symbol."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1075,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10706,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10708,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 10710,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 10712,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_decimals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 10714,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "busdContract",
        "offset": 1,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10716,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_uniswapV2ETHPair",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10718,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_uniswapV2BUSDPair",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10721,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_uniswapV2Router",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IUniswapV2Router02)15015"
      },
      {
        "astId": 10726,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_operator",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10728,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_smartArmy",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 10730,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_referralAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10732,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_goldenTreePoolAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 10734,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_devAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 10736,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_achievementSystemAddress",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 10738,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_farmingRewardAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 10740,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_intermediaryAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 10743,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_buyTaxFee",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 10746,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_buyReferralFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 10749,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_buyGoldenPoolFee",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 10752,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_buyDevFee",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 10755,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_buyAchievementFee",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 10758,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_sellTaxFee",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 10761,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_sellDevFee",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 10764,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_sellGoldenPoolFee",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 10767,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_sellFarmingFee",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 10770,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_sellBurnFee",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 10773,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_sellAchievementFee",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 10776,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_transferTaxFee",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 10779,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_transferDevFee",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 10782,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_transferAchievementFee",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 10785,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_transferGoldenFee",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 10788,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_transferFarmingFee",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 10796,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_sellTaxTierDays",
        "offset": 0,
        "slot": "32",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10804,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_sellTaxTiers",
        "offset": 0,
        "slot": "33",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10808,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_start_timestamp",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      },
      {
        "astId": 10815,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_liquidityDist",
        "offset": 0,
        "slot": "35",
        "type": "t_uint256"
      },
      {
        "astId": 10817,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_farmingRewardDist",
        "offset": 0,
        "slot": "36",
        "type": "t_uint256"
      },
      {
        "astId": 10819,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_presaleDist",
        "offset": 0,
        "slot": "37",
        "type": "t_uint256"
      },
      {
        "astId": 10821,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_airdropDist",
        "offset": 0,
        "slot": "38",
        "type": "t_uint256"
      },
      {
        "astId": 10823,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_suprizeRewardsDist",
        "offset": 0,
        "slot": "39",
        "type": "t_uint256"
      },
      {
        "astId": 10825,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_chestRewardsDist",
        "offset": 0,
        "slot": "40",
        "type": "t_uint256"
      },
      {
        "astId": 10827,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_devDist",
        "offset": 0,
        "slot": "41",
        "type": "t_uint256"
      },
      {
        "astId": 10830,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_whitelist",
        "offset": 0,
        "slot": "42",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10834,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "mapEnabledWhitelist",
        "offset": 0,
        "slot": "43",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10836,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_initialLiquidityLocked",
        "offset": 0,
        "slot": "44",
        "type": "t_bool"
      },
      {
        "astId": 10838,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_farmingRewardsLocked",
        "offset": 1,
        "slot": "44",
        "type": "t_bool"
      },
      {
        "astId": 10840,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_surprizeRewardsLocked",
        "offset": 2,
        "slot": "44",
        "type": "t_bool"
      },
      {
        "astId": 10842,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_chestRewardsLocked",
        "offset": 3,
        "slot": "44",
        "type": "t_bool"
      },
      {
        "astId": 10845,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_tokenPriceByBusd",
        "offset": 0,
        "slot": "45",
        "type": "t_uint256"
      },
      {
        "astId": 10848,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_busdDec",
        "offset": 0,
        "slot": "46",
        "type": "t_uint256"
      },
      {
        "astId": 10851,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_tokenPriceByBNB",
        "offset": 0,
        "slot": "47",
        "type": "t_uint256"
      },
      {
        "astId": 10854,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_bnbDec",
        "offset": 0,
        "slot": "48",
        "type": "t_uint256"
      },
      {
        "astId": 10858,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_balances",
        "offset": 0,
        "slot": "49",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10864,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10868,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "_excludedFromFee",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10871,
        "contract": "contracts/SmartToken.sol:SmartToken",
        "label": "comptroller",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(ISmartComp)14180"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISmartComp)14180": {
        "encoding": "inplace",
        "label": "contract ISmartComp",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)15015": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}